#usda 1.0
(
    upAxis = "Z"
)

over "RootNode"
{
    over "meshes"
    {
        over "mesh_CC4CB5945AE01664"
        {
            custom int preserveOriginalDrawCall = 1

            def RectLight "SafeHouse_Overhead_01" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float colorTemperature = 7500
                bool enableColorTemperature = 1
                float exposure = 0
                float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                float height = 5.2000003
                float intensity = 0.7
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                float width = 10.3
                double3 xformOp:rotateXYZ = (0, 0, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-0.10000000149011612, -0.9000000134110451, 5.4000000804662704)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def DistantLight "DistantLight" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float inputs:angle = 1.2
                float inputs:colorTemperature = 8000
                bool inputs:enableColorTemperature = 1
                float inputs:intensity = 1.9
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (-157.70000234991312, 47.000000700354576, -125.10000186413527)
                double3 xformOp:scale = (1, 1.1000000163912773, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_30CCB1A9384BCF22"
        {
            token visibility = "inherited"

            over "mesh"
            {
                token visibility = "invisible"
            }
        }

        over "mesh_9ACC87B9BF36B49C"
        {
            custom int preserveOriginalDrawCall = 1
        }

        over "mesh_3C3EA1FCD37A68EF"
        {
            custom int preserveOriginalDrawCall = 1

            def RectLight "ParkingGarageLight" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                float inputs:height = 2.4
                float inputs:intensity = 24
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                float inputs:width = 0.2
                double3 xformOp:rotateXYZ = (0, 0, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0.07552621503415005, -0.0973452410851193, 4.835518779349744)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "ParkingGarageLight01" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                float inputs:height = 2.4
                float inputs:intensity = 24
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                float inputs:width = 0.2
                double3 xformOp:rotateXYZ = (0, 0, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (4.643328992929686, -0.09734524108511639, 4.835518779349744)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "ParkingGarageLight02" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                float inputs:height = 2.4
                float inputs:intensity = 24
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                float inputs:width = 0.2
                double3 xformOp:rotateXYZ = (0, 0, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-4.715273995642909, -0.09734524108511548, 4.835518779349744)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "ParkingGarageLight03" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                float inputs:height = 2.4
                float inputs:intensity = 24
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                float inputs:width = 0.2
                double3 xformOp:rotateXYZ = (0, 0, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0.07552621503414869, -2.930459644791003, 4.835518779349744)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "ParkingGarageLight04" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                float inputs:height = 2.4
                float inputs:intensity = 24
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                float inputs:width = 0.2
                double3 xformOp:rotateXYZ = (0, 0, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (4.643328992929686, -2.93045964479098, 4.835518779349744)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "ParkingGarageLight05" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                float inputs:height = 2.4
                float inputs:intensity = 24
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                float inputs:width = 0.2
                double3 xformOp:rotateXYZ = (0, 0, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-4.740419834716886, -2.930459644791199, 4.835518779349744)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "ParkingGarageLight06" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                float inputs:height = 2.4
                float inputs:intensity = 24
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                float inputs:width = 0.2
                double3 xformOp:rotateXYZ = (0, 0, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0.07552621503414869, 3.03841692853637, 4.682887011065464)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "ParkingGarageLight07" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                float inputs:height = 2.4
                float inputs:intensity = 24
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                float inputs:width = 0.2
                double3 xformOp:rotateXYZ = (0, 0, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (4.643328992929686, 3.0384169285364195, 4.682887011065464)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "ParkingGarageLight08" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                float inputs:height = 2.4
                float inputs:intensity = 24
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                float inputs:width = 0.2
                double3 xformOp:rotateXYZ = (0, 0, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-4.715273995642909, 3.0384169285363734, 4.682887011065464)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "ParkingGarageLight09" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                float inputs:height = 2.4
                float inputs:intensity = 24
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                float inputs:width = 0.2
                double3 xformOp:rotateXYZ = (0, 0, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0.19650382063806138, -14.965087180458514, 5.480348175987442)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "ParkingGarageLight10" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                float inputs:height = 2.4
                float inputs:intensity = 24
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                float inputs:width = 0.2
                double3 xformOp:rotateXYZ = (0, 0, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (4.764306598533564, -14.965087180458518, 5.480348175987442)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "ParkingGarageLight11" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                float inputs:height = 2.4
                float inputs:intensity = 24
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                float inputs:width = 0.2
                double3 xformOp:rotateXYZ = (0, 0, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-4.594296390038991, -14.965087180458301, 5.480348175987442)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "ParkingGarageLight12" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                float inputs:height = 2.4
                float inputs:intensity = 24
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                float inputs:width = 0.2
                double3 xformOp:rotateXYZ = (0, 0, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0.3814656014155684, -18.07791713494639, 5.625545522138395)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "ParkingGarageLight13" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                float inputs:height = 2.4
                float inputs:intensity = 24
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                float inputs:width = 0.2
                double3 xformOp:rotateXYZ = (0, 0, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (4.949268379311505, -18.07791713494596, 5.625545522138395)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "ParkingGarageLight14" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                float inputs:height = 2.4
                float inputs:intensity = 24
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                float inputs:width = 0.2
                double3 xformOp:rotateXYZ = (0, 0, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-4.434480448335444, -18.07791713494648, 5.625545522138395)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "ParkingGarageLight15" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                float inputs:height = 2.4
                float inputs:intensity = 24
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                float inputs:width = 0.2
                double3 xformOp:rotateXYZ = (0, 0, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0.1965038206380223, -11.829325010836843, 5.327716407703162)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "ParkingGarageLight16" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                float inputs:height = 2.4
                float inputs:intensity = 24
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                float inputs:width = 0.2
                double3 xformOp:rotateXYZ = (0, 0, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (4.764306598533566, -11.82932501083763, 5.327716407703162)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "ParkingGarageLight17" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                float inputs:height = 2.4
                float inputs:intensity = 24
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                float inputs:width = 0.2
                double3 xformOp:rotateXYZ = (0, 0, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-4.5942963900390295, -11.829325010836842, 5.327716407703162)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_CF8BD482BBEE1C6F"
        {
            custom int preserveOriginalDrawCall = 1

            def DistantLight "DistantLight" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float inputs:angle = 0.6
                float inputs:exposure = 0
                float inputs:intensity = 5.6
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (-129, -27.400000408291817, -97.00000144541264)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_94355ABBDF1AAC12"
        {
            token visibility = "inherited"

            over "mesh"
            {
                token visibility = "invisible"
            }
        }

        over "mesh_5F2570D2052FAC50"
        {
            token visibility = "inherited"

            over "mesh"
            {
                token visibility = "invisible"
            }
        }

        over "mesh_903774F3722AED80"
        {
            token visibility = "inherited"

            over "mesh"
            {
                token visibility = "invisible"
            }
        }

        over "mesh_890AB3A9603B7A5B"
        {
            token visibility = "inherited"

            over "mesh"
            {
                token visibility = "invisible"
            }
        }

        over "mesh_127C2B3811BFA971"
        {
            custom int preserveOriginalDrawCall = 1

            def DistantLight "DistantLight" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float angle = 1
                float inputs:angle = 0.8
                float inputs:exposure = 0
                float inputs:intensity = 2.8
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                float intensity = 3000
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                double3 xformOp:rotateXYZ = (-164.10000244528055, -6.500000096857548, 38.000000566244125)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_347DDBEB1FD66764"
        {
            token visibility = "inherited"

            over "mesh"
            {
                token visibility = "invisible"
            }
        }

        over "mesh_DD9CF6CB1D18873D"
        {
            custom int preserveOriginalDrawCall = 1

            def SphereLight "BRoom" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:colorTemperature = 6000
                bool inputs:enableColorTemperature = 1
                float inputs:intensity = 100
                float inputs:radius = 0.25
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (90, 0, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-10.500000156462193, -5.800000086426735, 3.500000052154064)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "BRoom_01" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:colorTemperature = 6000
                bool inputs:enableColorTemperature = 1
                float inputs:intensity = 100
                float inputs:radius = 0.25
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (90, 0, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-6.600000098347664, -5.800000086426735, 3.500000052154064)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "BRoom_05" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:colorTemperature = 6000
                bool inputs:enableColorTemperature = 1
                float inputs:intensity = 100
                float inputs:radius = 0.25
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (90, 0, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-10.500000156462193, 6.600000098347664, 3.500000052154064)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "BRoom_06" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:colorTemperature = 6000
                bool inputs:enableColorTemperature = 1
                float inputs:intensity = 100
                float inputs:radius = 0.25
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (90, 0, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-6.600000098347664, 6.600000098347664, 3.500000052154064)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "BRoom_07" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:colorTemperature = 6000
                bool inputs:enableColorTemperature = 1
                float inputs:intensity = 100
                float inputs:radius = 0.25
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (90, 0, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (6.500000096857548, 6.600000098347664, 3.500000052154064)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "BRoom_03" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:colorTemperature = 6000
                bool inputs:enableColorTemperature = 1
                float inputs:intensity = 100
                float inputs:radius = 0.25
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (90, 0, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (12.200000181794167, -5.800000086426735, 3.500000052154064)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "BRoom_04" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:colorTemperature = 6000
                bool inputs:enableColorTemperature = 1
                float inputs:intensity = 100
                float inputs:radius = 0.25
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (90, 0, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (18.0000002682209, -5.800000086426735, 3.500000052154064)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "BRoom_02" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:colorTemperature = 6000
                bool inputs:enableColorTemperature = 1
                float inputs:intensity = 100
                float inputs:radius = 0.25
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (90, 0, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (6.500000096857548, -5.800000086426735, 3.500000052154064)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_D76F4C31221C606F"
        {
            custom int preserveOriginalDrawCall = 1

            def DistantLight "DistantLight" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                float angle = 1
                float inputs:angle = 0.8
                float inputs:exposure = 0
                float inputs:intensity = 2.8
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                float intensity = 3000
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                double3 xformOp:rotateXYZ = (-164.10000244528055, -6.500000096857548, 38.000000566244125)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "UpgradeShop" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:colorTemperature = 6000
                bool inputs:enableColorTemperature = 1
                float inputs:exposure = 5.4
                float inputs:intensity = 100
                float inputs:radius = 0.1
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (90, 0, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-6.44896816724454, -1.2437813044571728, 3.6555352880138994)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "UpgradeShop_01" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:colorTemperature = 6000
                bool inputs:enableColorTemperature = 1
                float inputs:exposure = 5.4
                float inputs:intensity = 100
                float inputs:radius = 0.1
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (90, 0, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-7.73885066464333, 5.203283161792311, 3.6555352880138994)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "UpgradeShop_02" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:colorTemperature = 6000
                bool inputs:enableColorTemperature = 1
                float inputs:exposure = 5.4
                float inputs:intensity = 100
                float inputs:radius = 0.1
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (90, 0, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-5.220357796208707, -7.80535743356354, 3.6555352880138994)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "UpgradeShop_03" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:colorTemperature = 6000
                bool inputs:enableColorTemperature = 1
                float inputs:exposure = 5.4
                float inputs:intensity = 100
                float inputs:radius = 0.1
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (90, 0, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-4.457245389590515, -11.564742110311949, 3.6555352880138994)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "UpgradeShop_04" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:colorTemperature = 6000
                bool inputs:enableColorTemperature = 1
                float inputs:exposure = 5.4
                float inputs:intensity = 100
                float inputs:radius = 0.1
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (90, 0, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (5.66517169432618, 1.1430036905699934, 3.6555352880139)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "UpgradeShop_05" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:colorTemperature = 6000
                bool inputs:enableColorTemperature = 1
                float inputs:exposure = 5.4
                float inputs:intensity = 100
                float inputs:radius = 0.1
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (90, 0, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (4.573358034462923, 7.462783954240885, 3.6555352880139496)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "UpgradeShop_06" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:colorTemperature = 6000
                bool inputs:enableColorTemperature = 1
                float inputs:exposure = 5.4
                float inputs:intensity = 100
                float inputs:radius = 0.1
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (90, 0, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (6.9411717637723065, -5.418572438536296, 3.6555352880138714)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "UpgradeShop_07" (
                apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:colorTemperature = 6000
                bool inputs:enableColorTemperature = 1
                float inputs:exposure = 5.4
                float inputs:intensity = 100
                float inputs:radius = 0.1
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (90, 0, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (7.854963309515769, -9.177957115284883, 3.6555352880138994)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_879DB53C1FE2059B"
        {
            custom int preserveOriginalDrawCall = 0
            token visibility = "invisible"

            over "mesh"
            {
                token visibility = "inherited"
            }
        }

        over "mesh_60E81DD9C1857C05"
        {
            custom int preserveOriginalDrawCall = 1

            def DistantLight "PerfGar_Sun" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float inputs:angle = 1
                float inputs:intensity = 5
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (-180, 53.500000797212124, 94.9000014141202)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_9C03DD27B2B43355"
        {
            custom int preserveOriginalDrawCall = 1

            def SphereLight "PerfGar_Pendant" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:colorTemperature = 4000
                bool inputs:enableColorTemperature = 1
                float inputs:exposure = 0
                float inputs:intensity = 200
                float inputs:radius = 0.15
                float inputs:shaping:cone:angle = 90
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (0, 0, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-6.488723062052099, -1.2848112999710548, 3.6143813313186968)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "PerfGar_Pendant_01" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:colorTemperature = 4000
                bool inputs:enableColorTemperature = 1
                float inputs:exposure = 0
                float inputs:intensity = 200
                float inputs:radius = 0.15
                float inputs:shaping:cone:angle = 90
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (0, 0, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-7.678759793125355, 5.10651812585211, 3.6082409201121934)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "PerfGar_Pendant_02" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:colorTemperature = 4000
                bool inputs:enableColorTemperature = 1
                float inputs:exposure = 0
                float inputs:intensity = 200
                float inputs:radius = 0.15
                float inputs:shaping:cone:angle = 90
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (0, 0, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-5.1357353340565695, -7.7288577668722755, 3.6143813313186968)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "PerfGar_Pendant_03" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:colorTemperature = 4000
                bool inputs:enableColorTemperature = 1
                float inputs:exposure = 0
                float inputs:intensity = 200
                float inputs:radius = 0.15
                float inputs:shaping:cone:angle = 90
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (0, 0, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-4.406761144313586, -11.467390109176014, 3.6143813313186968)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "PerfGar_Pendant_04" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:colorTemperature = 4000
                bool inputs:enableColorTemperature = 1
                float inputs:exposure = 0
                float inputs:intensity = 200
                float inputs:radius = 0.15
                float inputs:shaping:cone:angle = 90
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (0, 0, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (5.534798112725069, 1.1607765327417296, 3.6143813313186968)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "PerfGar_Pendant_05" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:colorTemperature = 4000
                bool inputs:enableColorTemperature = 1
                float inputs:exposure = 0
                float inputs:intensity = 200
                float inputs:radius = 0.15
                float inputs:shaping:cone:angle = 90
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (0, 0, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (4.3447613816516375, 7.569943437853492, 3.6082409201121934)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "PerfGar_Pendant_06" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:colorTemperature = 4000
                bool inputs:enableColorTemperature = 1
                float inputs:exposure = 0
                float inputs:intensity = 200
                float inputs:radius = 0.15
                float inputs:shaping:cone:angle = 90
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (0, 0, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (6.8877858407205705, -5.397033250675665, 3.6143813313186968)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "PerfGar_Pendant_07" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:colorTemperature = 4000
                bool inputs:enableColorTemperature = 1
                float inputs:exposure = 0
                float inputs:intensity = 200
                float inputs:radius = 0.15
                float inputs:shaping:cone:angle = 90
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (0, 0, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (7.616760030463698, -9.135565592979725, 3.6143813313186968)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "PerfGar_Pendant_08" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:colorTemperature = 4000
                bool inputs:enableColorTemperature = 1
                float inputs:exposure = 0
                float inputs:intensity = 200
                float inputs:radius = 0.15
                float inputs:shaping:cone:angle = 90
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (0, 0, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (3.3288354896813326, 13.091805197302076, 3.6082409201121934)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "PerfGar_Pendant_09" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:colorTemperature = 4000
                bool inputs:enableColorTemperature = 1
                float inputs:exposure = 0
                float inputs:intensity = 200
                float inputs:radius = 0.15
                float inputs:shaping:cone:angle = 90
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (0, 0, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (2.2605675878044997, 18.61887566117551, 3.6082409201121934)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_7B775283A618152B"
        {
            custom int preserveOriginalDrawCall = 1

            def SphereLight "DoubleCobra" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:colorTemperature = 5000
                bool inputs:enableColorTemperature = 1
                float inputs:intensity = 250
                float inputs:radius = 0.25
                float inputs:shaping:cone:angle = 70.8
                float inputs:shaping:cone:softness = 0.3
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (-26.600000396370888, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, -3.9000000581145287, 8.600000128149986)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "DoubleCobra_01" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:colorTemperature = 5000
                bool inputs:enableColorTemperature = 1
                float inputs:intensity = 250
                float inputs:radius = 0.25
                float inputs:shaping:cone:angle = 70.8
                float inputs:shaping:cone:softness = 0.3
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (26.6, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 3.9, 8.600000128149986)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_3EBEC50452B6EAE5"
        {
            custom int preserveOriginalDrawCall = 1

            def SphereLight "CobraLight" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:colorTemperature = 5000
                bool inputs:enableColorTemperature = 1
                float inputs:exposure = 4.2000003
                float inputs:intensity = 150
                float inputs:radius = 0.25
                float inputs:shaping:cone:angle = 45.3
                float inputs:shaping:cone:softness = 0.2
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (-12.800000190734863, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, -6.000000089406967, 12.600000187754631)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_17A1D8E6B5928265"
        {
            custom int preserveOriginalDrawCall = 1
        }

        over "mesh_CB82625AADA235C4"
        {
            custom int preserveOriginalDrawCall = 1
            token visibility = "inherited"

            def RectLight "TunnelLight" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                color3f inputs:color = (0.8146718, 1, 0.83470714)
                float inputs:colorTemperature = 5000
                bool inputs:enableColorTemperature = 1
                float inputs:exposure = 0
                float inputs:height = 3.9
                float inputs:intensity = 150
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                float inputs:width = 0.5
                double3 xformOp:rotateXYZ = (-0.1567314095098311, -53.67732332687925, 102.88983908643621)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (1519.4374836272775, 491.1550558042292, 93.22367744506202)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "TunnelLight_01" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                color3f inputs:color = (0.8146718, 1, 0.83470714)
                float inputs:colorTemperature = 5000
                bool inputs:enableColorTemperature = 1
                float inputs:exposure = 0
                float inputs:height = 3.9
                float inputs:intensity = 150
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                float inputs:width = 0.5
                double3 xformOp:rotateXYZ = (-0.11793683568259894, -38.07765830625641, 102.836296560986)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (1509.5136270420076, 488.7866457663371, 93.293476649047)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "TunnelLight_02" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                color3f inputs:color = (0.8146718, 1, 0.83470714)
                float inputs:colorTemperature = 5000
                bool inputs:enableColorTemperature = 1
                float inputs:exposure = 0
                float inputs:height = 3.9
                float inputs:intensity = 150
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                float inputs:width = 0.5
                double3 xformOp:rotateXYZ = (-1.762674495843811, -37.61922631288735, 102.06629212250516)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (1499.0984817959484, 486.57117886507865, 93.1382351014125)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "TunnelLight_03" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                color3f inputs:color = (0.8146718, 1, 0.83470714)
                float inputs:colorTemperature = 5000
                bool inputs:enableColorTemperature = 1
                float inputs:exposure = 0
                float inputs:height = 3.9
                float inputs:intensity = 150
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                float inputs:width = 0.5
                double3 xformOp:rotateXYZ = (-1.7626744958409688, -37.61922631288738, 102.06629212250567)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (1488.6669963011184, 484.57829094010975, 92.67385570384987)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "TunnelLight_04" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                color3f inputs:color = (0.8146718, 1, 0.83470714)
                float inputs:colorTemperature = 5000
                bool inputs:enableColorTemperature = 1
                float inputs:exposure = 0
                float inputs:height = 3.9
                float inputs:intensity = 150
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                float inputs:width = 0.5
                double3 xformOp:rotateXYZ = (-2.7106176549136762, -39.370009233360264, 99.15984497855698)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (1478.0929201985039, 483.2229933861488, 92.34294023594343)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "TunnelLight_05" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                color3f inputs:color = (0.8146718, 1, 0.83470714)
                float inputs:colorTemperature = 5000
                bool inputs:enableColorTemperature = 1
                float inputs:exposure = 0
                float inputs:height = 3.9
                float inputs:intensity = 150
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                float inputs:width = 0.5
                double3 xformOp:rotateXYZ = (-0.09029899958639476, 37.612528695207544, 95.82450038989191)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (1475.2762649566894, 506.93831302358313, 92.55508221797056)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "TunnelLight_06" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                color3f inputs:color = (0.8146718, 1, 0.83470714)
                float inputs:colorTemperature = 5000
                bool inputs:enableColorTemperature = 1
                float inputs:exposure = 0
                float inputs:height = 3.9
                float inputs:intensity = 150
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                float inputs:width = 0.5
                double3 xformOp:rotateXYZ = (-0.09029899958639476, 37.612528695207544, 95.82450038989191)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (1484.8621183100713, 507.94990082829065, 92.54839016601775)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "TunnelLight_07" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                color3f inputs:color = (0.8146718, 1, 0.83470714)
                float inputs:colorTemperature = 5000
                bool inputs:enableColorTemperature = 1
                float inputs:exposure = 0
                float inputs:height = 3.9
                float inputs:intensity = 150
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                float inputs:width = 0.5
                double3 xformOp:rotateXYZ = (-2.524509066161727, 37.75754929358962, 100.13802894095272)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (1494.522788677881, 509.88341902443636, 92.67448928015904)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "TunnelLight_08" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                color3f inputs:color = (0.8146718, 1, 0.83470714)
                float inputs:colorTemperature = 5000
                bool inputs:enableColorTemperature = 1
                float inputs:exposure = 0
                float inputs:height = 3.9
                float inputs:intensity = 150
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                float inputs:width = 0.5
                double3 xformOp:rotateXYZ = (-1.2619411142994466, 37.75754929358965, 100.13802894095278)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (1504.2245654813375, 511.8931158732567, 92.94907946133377)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def RectLight "TunnelLight_09" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                color3f inputs:color = (0.8146718, 1, 0.83470714)
                float inputs:colorTemperature = 5000
                bool inputs:enableColorTemperature = 1
                float inputs:exposure = 0
                float inputs:height = 3.9
                float inputs:intensity = 150
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                float inputs:width = 0.5
                double3 xformOp:rotateXYZ = (-1.756866597711877, 35.013002280343045, 100.24446836650225)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (1514.1593778797026, 514.3513806777122, 93.01125316626533)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_ACB5AC0744177C64"
        {
            custom int preserveOriginalDrawCall = 0
        }

        over "mesh_E8E3F35352B51235"
        {
            custom int preserveOriginalDrawCall = 1
            token visibility = "invisible"

            def DistantLight "DistantLight" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float inputs:angle = 3
                float inputs:colorTemperature = 3700
                bool inputs:enableColorTemperature = 1
                float inputs:intensity = 4.2000003
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                token visibility = "inherited"
                double3 xformOp:rotateXYZ = (-180, -57.100000850856304, 29.300000436604023)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "SphereLight" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:intensity = 46.100002
                float inputs:radius = 0.5
                float inputs:shaping:cone:angle = 90
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (0, 0, -58.964703000008484)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-8.511112562280449, 5.985254600345008, 6.900000102819454)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "SphereLight_01" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:intensity = 46.100002
                float inputs:radius = 0.5
                float inputs:shaping:cone:angle = 90
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (0, 0, -58.964703000008484)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (1.6967520281977013, -2.5519624485725547, 5.498230327926351)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_2C51E9104B71EAC5"
        {
            custom int preserveOriginalDrawCall = 0
        }

        over "mesh_E9A6B08C2304905F"
        {
            custom int preserveOriginalDrawCall = 1

            def SphereLight "MainMenu_Pendant" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:colorTemperature = 4000
                bool inputs:enableColorTemperature = 1
                float inputs:exposure = 2.5
                float inputs:intensity = 150
                float inputs:radius = 0.05
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (6.5, 5.55, 3.2)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "MainMenu_Pendant_01" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:colorTemperature = 4000
                bool inputs:enableColorTemperature = 1
                float inputs:exposure = 2.5
                float inputs:intensity = 150
                float inputs:radius = 0.05
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (6.900000102818012, 1.9000000283122063, 3.300000049173832)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "MainMenu_Pendant_02" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:colorTemperature = 4000
                bool inputs:enableColorTemperature = 1
                float inputs:exposure = 2.5
                float inputs:intensity = 150
                float inputs:radius = 0.05
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (6.900000102818012, -3.1000000461935997, 3.300000049173832)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "MainMenu_Pendant_03" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:colorTemperature = 4000
                bool inputs:enableColorTemperature = 1
                float inputs:exposure = 2.5
                float inputs:intensity = 150
                float inputs:radius = 0.05
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (6.900000102818012, -5.100000075995922, 4.2)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "MainMenu_Pendant_04" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:colorTemperature = 4000
                bool inputs:enableColorTemperature = 1
                float inputs:exposure = 2.5
                float inputs:intensity = 150
                float inputs:radius = 0.05
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (6.900000102818012, -9.500000141561031, 4.25)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_075F8E23C596BA01"
        {
            custom int preserveOriginalDrawCall = 1

            def SphereLight "MainMenu_SimpleLightPost" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:colorTemperature = 4000
                bool inputs:enableColorTemperature = 1
                float inputs:intensity = 500
                float inputs:radius = 0.08
                float inputs:shaping:cone:angle = 90
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-13.000000193715096, -4.000000059604645, 2.7000000402331352)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "MainMenu_SimpleLightPost_01" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:colorTemperature = 4000
                bool inputs:enableColorTemperature = 1
                float inputs:intensity = 500
                float inputs:radius = 0.08
                float inputs:shaping:cone:angle = 90
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-13.000000193715096, 6.100000090897083, 3.200000047683716)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_8465F8B75622290B"
        {
            custom int preserveOriginalDrawCall = 1

            def SphereLight "CobraLight_2" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:exposure = 0
                float inputs:intensity = 500
                float inputs:radius = 0.3
                float inputs:shaping:cone:angle = 73
                float inputs:shaping:cone:softness = 0.4
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (0, 5.600000083446503, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, -6.000000089406967, 9.700000144541264)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_76F37F9C0347361D"
        {
            custom int preserveOriginalDrawCall = 1

            def RectLight "WrapLight" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                float inputs:colorTemperature = 5000
                bool inputs:enableColorTemperature = 1
                float inputs:exposure = 0
                float inputs:height = 6.9
                float inputs:intensity = 98
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                float inputs:width = 0.7
                double3 xformOp:rotateXYZ = (0, -68.2000010162592, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0.20000000298023224, 0.10000000149011612)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_2C026CD1A1F246EC"
        {
            custom int preserveOriginalDrawCall = 1

            def SphereLight "M3HeadLightRight" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:colorTemperature = 8000
                bool inputs:enableColorTemperature = 1
                float inputs:exposure = 8.400001
                float inputs:intensity = 500
                float inputs:radius = 0.05
                float inputs:shaping:cone:angle = 55.2
                float inputs:shaping:cone:softness = 1.4
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (0, -75.90000113099813, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (2.6, -0.57, 0.5)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "M3HeadLightLeft" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:colorTemperature = 8000
                bool inputs:enableColorTemperature = 1
                float inputs:exposure = 8.400001
                float inputs:intensity = 500
                float inputs:radius = 0.05
                float inputs:shaping:cone:angle = 55.2
                float inputs:shaping:cone:softness = 1.4
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (0, -75.90000113099813, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (2.6, 0.57, 0.5)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_88CE67E29BA2FB7D"
        {
            custom int preserveOriginalDrawCall = 1

            def SphereLight "M3PlateLight" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:colorTemperature = 4500
                bool inputs:enableColorTemperature = 1
                float inputs:exposure = 0.7
                float inputs:intensity = 174.2
                float inputs:radius = 0.01
                float inputs:shaping:cone:angle = 81.8
                float inputs:shaping:cone:softness = 1
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-2.0000000298023224, -0.10000000149011612, 0.72)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "M3PlateLight_01" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:colorTemperature = 4500
                bool inputs:enableColorTemperature = 1
                float inputs:exposure = 0.7
                float inputs:intensity = 174.2
                float inputs:radius = 0.01
                float inputs:shaping:cone:angle = 81.8
                float inputs:shaping:cone:softness = 1
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-2.0000000298023224, 0.10000000149011612, 0.72)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_4CBF290FA0F08B3A"
        {
            custom int preserveOriginalDrawCall = 1

            def SphereLight "SphereLight" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:colorTemperature = 2700
                bool inputs:enableColorTemperature = 1
                float inputs:intensity = 351
                float inputs:radius = 0.4
                float inputs:shaping:cone:angle = 91.700005
                float inputs:shaping:cone:softness = 0.1
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (0, 0, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, -1.3000000193715096)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_7826CD56A98D0E50"
        {
            custom int preserveOriginalDrawCall = 1

            def SphereLight "CobraHeadLight" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:colorTemperature = 5000
                bool inputs:enableColorTemperature = 1
                float inputs:exposure = 7.4
                float inputs:intensity = 289.6
                float inputs:radius = 0.09
                float inputs:shaping:cone:angle = 63.4
                float inputs:shaping:cone:softness = 0.2
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (-13.800000205636024, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, -2.8000000417232513, 8.200000122189522)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_BE0372587D1551E1"
        {
            custom int preserveOriginalDrawCall = 1

            def Xform "Xform_mesh_0" (
                prepend references = @../meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 22.47219978962491)
                double3 xformOp:scale = (0.001, 0.001, 0.001)
                double3 xformOp:translate = (2074.8081460815947, -190.96480727351397, 112.47189850721482)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @../meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    def RectLight "RectLight" (
                        prepend apiSchemas = ["ShapingAPI"]
                    )
                    {
                        float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                        float inputs:colorTemperature = 4000
                        bool inputs:enableColorTemperature = 1
                        float inputs:exposure = 14.6
                        float inputs:height = 33.4
                        float inputs:intensity = 31.9
                        float inputs:shaping:cone:angle = 180
                        float inputs:shaping:cone:softness
                        float inputs:shaping:focus
                        color3f inputs:shaping:focusTint
                        asset inputs:shaping:ies:file
                        float inputs:width = 1.6
                        double3 xformOp:rotateXYZ = (0, 0, 90)
                        double3 xformOp:scale = (1, 1, 1)
                        double3 xformOp:translate = (-1.073349267244339e-7, -16.930447958409786, -108.29742302320665)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                    }

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                float inputs:emissive_intensity = 4 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }
            }

            def Xform "Xform_mesh_01" (
                prepend references = @../meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 22.47219978962491)
                double3 xformOp:scale = (0.001, 0.001, 0.001)
                double3 xformOp:translate = (2072.411652019014, -191.9561055951744, 112.4718985072234)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @../meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    def RectLight "RectLight" (
                        prepend apiSchemas = ["ShapingAPI"]
                    )
                    {
                        float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                        float inputs:colorTemperature = 4000
                        bool inputs:enableColorTemperature = 1
                        float inputs:exposure = 14.6
                        float inputs:height = 33.4
                        float inputs:intensity = 31.9
                        float inputs:shaping:cone:angle = 180
                        float inputs:shaping:cone:softness
                        float inputs:shaping:focus
                        color3f inputs:shaping:focusTint
                        asset inputs:shaping:ies:file
                        float inputs:width = 1.6
                        double3 xformOp:rotateXYZ = (0, 0, 90)
                        double3 xformOp:scale = (1, 1, 1)
                        double3 xformOp:translate = (-1.073349267244339e-7, -16.930447958409786, -108.29742302320665)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                    }

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                float inputs:emissive_intensity = 4 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }
            }

            def Xform "Xform_mesh_02" (
                prepend references = @../meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 22.47219978962491)
                double3 xformOp:scale = (0.001, 0.001, 0.001)
                double3 xformOp:translate = (2069.623441303546, -193.10943563921805, 112.47189850723628)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @../meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    def RectLight "RectLight" (
                        prepend apiSchemas = ["ShapingAPI"]
                    )
                    {
                        float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                        float inputs:colorTemperature = 4000
                        bool inputs:enableColorTemperature = 1
                        float inputs:exposure = 14.6
                        float inputs:height = 33.4
                        float inputs:intensity = 31.9
                        float inputs:shaping:cone:angle = 180
                        float inputs:shaping:cone:softness
                        float inputs:shaping:focus
                        color3f inputs:shaping:focusTint
                        asset inputs:shaping:ies:file
                        float inputs:width = 1.6
                        double3 xformOp:rotateXYZ = (0, 0, 90)
                        double3 xformOp:scale = (1, 1, 1)
                        double3 xformOp:translate = (-1.073349267244339e-7, -16.930447958409786, -108.29742302320665)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                    }

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                float inputs:emissive_intensity = 4 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }
            }

            def Xform "Xform_mesh_03" (
                prepend references = @../meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 22.47219978962491)
                double3 xformOp:scale = (0.001, 0.001, 0.001)
                double3 xformOp:translate = (2066.8564567779213, -194.25398557117956, 112.47189850723372)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @../meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    def RectLight "RectLight" (
                        prepend apiSchemas = ["ShapingAPI"]
                    )
                    {
                        float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                        float inputs:colorTemperature = 4000
                        bool inputs:enableColorTemperature = 1
                        float inputs:exposure = 14.6
                        float inputs:height = 33.4
                        float inputs:intensity = 31.9
                        float inputs:shaping:cone:angle = 180
                        float inputs:shaping:cone:softness
                        float inputs:shaping:focus
                        color3f inputs:shaping:focusTint
                        asset inputs:shaping:ies:file
                        float inputs:width = 1.6
                        double3 xformOp:rotateXYZ = (0, 0, 90)
                        double3 xformOp:scale = (1, 1, 1)
                        double3 xformOp:translate = (-1.073349267244339e-7, -16.930447958409786, -108.29742302320665)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                    }

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                float inputs:emissive_intensity = 4 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }
            }
        }

        over "mesh_04DF32F622C92CD9"
        {
            custom int preserveOriginalDrawCall = 1

            def SphereLight "SphereLight_01" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:colorTemperature = 2700
                bool inputs:enableColorTemperature = 1
                float inputs:intensity = 351
                float inputs:radius = 0.4
                float inputs:shaping:cone:angle = 91.700005
                float inputs:shaping:cone:softness = 0.1
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (0, 0, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, -1.0000000149011612)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_04BD7732962A6720"
        {
            custom int preserveOriginalDrawCall = 1

            def SphereLight "DoubleHeadPole" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:colorTemperature = 4000
                bool inputs:enableColorTemperature = 1
                float inputs:intensity = 200
                float inputs:radius = 0.2
                float inputs:shaping:cone:angle = 74.3
                float inputs:shaping:cone:softness = 0.2
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (0, -19.80000029504299, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0.800000011920929, 0, 8.300000123679638)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "DoubleHeadPole_01" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:colorTemperature = 4000
                bool inputs:enableColorTemperature = 1
                float inputs:intensity = 200
                float inputs:radius = 0.2
                float inputs:shaping:cone:angle = 74.3
                float inputs:shaping:cone:softness = 0.2
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (-20.000000298023224, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, -0.7000000104308128, 8.300000123679638)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_3A48DA88DF0E979E"
        {
            custom int preserveOriginalDrawCall = 1

            def SphereLight "CurvedDoublePole" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:colorTemperature = 4500
                bool inputs:enableColorTemperature = 1
                float inputs:exposure = 0
                float inputs:intensity = 283.4
                float inputs:radius = 0.5
                float inputs:shaping:cone:angle = 77.9
                float inputs:shaping:cone:softness = 0.3
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, -3.9000000581145287, 10.000000149011612)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "CurvedDoublePole_01" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:colorTemperature = 4500
                bool inputs:enableColorTemperature = 1
                float inputs:exposure = 0
                float inputs:intensity = 283.4
                float inputs:radius = 0.5
                float inputs:shaping:cone:angle = 77.9
                float inputs:shaping:cone:softness = 0.3
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 3.9, 10.000000149011612)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_ED3F11D38E7B5ABE"
        {
            custom int preserveOriginalDrawCall = 1

            def SphereLight "BannerPoleLight" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:colorTemperature = 5000
                bool inputs:enableColorTemperature = 1
                float inputs:exposure = 8.7
                float inputs:intensity = 200
                float inputs:radius = 0.05
                float inputs:shaping:cone:angle = 79.200005
                float inputs:shaping:cone:softness = 0.3
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, -2.8000000417232513, 8.00000011920929)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_5709FF2F177FFFFC"
        {
            custom int preserveOriginalDrawCall = 1

            def SphereLight "BannerPoleLight" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:colorTemperature = 5000
                bool inputs:enableColorTemperature = 1
                float inputs:exposure = 8
                float inputs:intensity = 200
                float inputs:radius = 0.05
                float inputs:shaping:cone:angle = 65.700005
                float inputs:shaping:cone:softness = 0.3
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, -2.8000000417232513, 8.200000122189522)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_689A36E40801EAAF"
        {
            custom int preserveOriginalDrawCall = 1
            token visibility = "invisible"

            def SphereLight "LittleItalyCornerBuilding" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:exposure = 6.6
                float inputs:intensity = 150
                float inputs:radius = 0.05
                float inputs:shaping:cone:angle = 20.800001
                float inputs:shaping:cone:softness = 0.1
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (182.1524042715397, -2.2737367544323206e-13, 45.79499835691411)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (1.565746958418957, -12.491950658879377, 7.289544987730788)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "LittleItalyCornerBuilding_01" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:exposure = 6.6
                float inputs:intensity = 150
                float inputs:radius = 0.05
                float inputs:shaping:cone:angle = 20.800001
                float inputs:shaping:cone:softness = 0.1
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (182.1524042715397, -2.2737367544323206e-13, 45.79499835691411)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (5.0478423688638685, -8.821639345217285, 7.281215020279112)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "LittleItalyCornerBuilding_02" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:exposure = 6.6
                float inputs:intensity = 150
                float inputs:radius = 0.05
                float inputs:shaping:cone:angle = 20.800001
                float inputs:shaping:cone:softness = 0.1
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (181.25622862660714, 1.7479197352285496, -8.491663221566114)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-2.306440612428011, -16.272251157158408, 7.294808527336315)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "LittleItalyCornerBuilding_03" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:exposure = 6.6
                float inputs:intensity = 150
                float inputs:radius = 0.05
                float inputs:shaping:cone:angle = 20.800001
                float inputs:shaping:cone:softness = 0.1
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (180.05939249434277, 2.1515850757112105, -42.623434688847794)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-1.9020482437699862, -16.161177532119527, 7.286823948520674)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "LittleItalyCornerBuilding_04" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:exposure = 6.6
                float inputs:intensity = 150
                float inputs:radius = 0.05
                float inputs:shaping:cone:angle = 20.800001
                float inputs:shaping:cone:softness = 0.1
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (-180, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-7.4054664759277165, -15.305615148959069, 7.418980834599353)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "LittleItalyCornerBuilding_05" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:exposure = 6.6
                float inputs:intensity = 150
                float inputs:radius = 0.05
                float inputs:shaping:cone:angle = 20.800001
                float inputs:shaping:cone:softness = 0.1
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (-180, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-7.672835205774428, -15.177343334322597, 7.418980834599353)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "LittleItalyCornerBuilding_06" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:exposure = 6.6
                float inputs:intensity = 150
                float inputs:radius = 0.05
                float inputs:shaping:cone:angle = 20.800001
                float inputs:shaping:cone:softness = 0.1
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (-180, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-11.330746006952836, -11.726069855606825, 7.418980834599367)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "LittleItalyCornerBuilding_07" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:exposure = 6.6
                float inputs:intensity = 150
                float inputs:radius = 0.05
                float inputs:shaping:cone:angle = 20.800001
                float inputs:shaping:cone:softness = 0.1
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (-180, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-14.961463087818622, -8.256323050483847, 7.418980834599355)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "LittleItalyCornerBuilding_08" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:exposure = 6.6
                float inputs:intensity = 150
                float inputs:radius = 0.05
                float inputs:shaping:cone:angle = 20.800001
                float inputs:shaping:cone:softness = 0.1
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (-180, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-18.42590037492289, -4.967554930265644, 7.418980834599453)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_045BD125FCC78E75" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = None
            custom int preserveOriginalDrawCall = 1
            token visibility = "inherited"

            def Xform "Xform_mesh_0" (
                prepend references = @../meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, -209.87143030459117)
                double3 xformOp:scale = (0.0025, 0.0025, 0.0025)
                double3 xformOp:translate = (1091.4762684591517, -738.4326928238278, 118.452769506543)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_2" (
                    prepend references = @../meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (1, 0.9499904, 0.73745173) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 40 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    float inputs:exposure = 0
                    float inputs:height = 1032
                    float inputs:intensity = 105.700005
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 79.1
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (5.238689482212067e-10, 1.1641532182693481e-10, -105.3785766454821)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_01" (
                prepend references = @../meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, -241.86529084606985)
                double3 xformOp:scale = (0.0025, 0.0025, 0.0025)
                double3 xformOp:translate = (1098.487746757688, -746.8826790479961, 118.45276950653806)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_2" (
                    prepend references = @../meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (1, 0.9499904, 0.73745173) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 40 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    float inputs:exposure = 0
                    float inputs:height = 1032
                    float inputs:intensity = 105.700005
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 79.1
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (5.238689482212067e-10, 1.1641532182693481e-10, -105.3785766454821)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_11" (
                prepend references = @../meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, -238.2757835313044)
                double3 xformOp:scale = (0.0025, 0.0025, 0.0025)
                double3 xformOp:translate = (1103.6578544484428, -756.2664091973398, 118.45276950654143)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_2" (
                    prepend references = @../meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (1, 0.9499904, 0.73745173) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 40 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    float inputs:exposure = 0
                    float inputs:height = 1032
                    float inputs:intensity = 105.700005
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 79.1
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (5.238689482212067e-10, 1.1641532182693481e-10, -105.3785766454821)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_12" (
                prepend references = @../meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, -234.6995526448116)
                double3 xformOp:scale = (0.0025, 0.0025, 0.0025)
                double3 xformOp:translate = (1109.096786318072, -766.6588226559637, 118.45276950653667)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_2" (
                    prepend references = @../meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (1, 0.9499904, 0.73745173) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 40 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    float inputs:exposure = 0
                    float inputs:height = 1032
                    float inputs:intensity = 105.700005
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 79.1
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (5.238689482212067e-10, 1.1641532182693481e-10, -105.3785766454821)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_14" (
                prepend references = @../meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, -354.20073440927564)
                double3 xformOp:scale = (0.0025, 0.0025, 0.0025)
                double3 xformOp:translate = (1087.5056802386086, -804.7898571448285, 117.61592508205686)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_2" (
                    prepend references = @../meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (1, 0.9499904, 0.73745173) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 40 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    float inputs:exposure = 0
                    float inputs:height = 1032
                    float inputs:intensity = 105.700005
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 79.1
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (5.238689482212067e-10, 1.1641532182693481e-10, -105.3785766454821)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_17" (
                prepend references = @../meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, -232.0221278428417)
                double3 xformOp:scale = (0.0025, 0.0025, 0.0025)
                double3 xformOp:translate = (1062.8676312052173, -790.5613922890465, 117.61592508205685)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_2" (
                    prepend references = @../meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (1, 0.9499904, 0.73745173) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 40 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    float inputs:exposure = 0
                    float inputs:height = 1032
                    float inputs:intensity = 105.700005
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 79.1
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (5.238689482212067e-10, 1.1641532182693481e-10, -105.3785766454821)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_18" (
                prepend references = @../meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, -298.54038071014173)
                double3 xformOp:scale = (0.0025, 0.0025, 0.0025)
                double3 xformOp:translate = (1081.0682212010124, -806.9748682784124, 117.61592508205692)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_2" (
                    prepend references = @../meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (1, 0.9499904, 0.73745173) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 40 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    float inputs:exposure = 0
                    float inputs:height = 1032
                    float inputs:intensity = 105.700005
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 79.1
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (5.238689482212067e-10, 1.1641532182693481e-10, -105.3785766454821)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_19" (
                prepend references = @../meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, -298.54038071014173)
                double3 xformOp:scale = (0.0025, 0.0025, 0.0025)
                double3 xformOp:translate = (1075.7526197891946, -804.083879611437, 117.61592508205692)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_2" (
                    prepend references = @../meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (1, 0.9499904, 0.73745173) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 40 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    float inputs:exposure = 0
                    float inputs:height = 1032
                    float inputs:intensity = 105.700005
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 79.1
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (5.238689482212067e-10, 1.1641532182693481e-10, -105.3785766454821)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_20" (
                prepend references = @../meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, -298.54038071014173)
                double3 xformOp:scale = (0.0025, 0.0025, 0.0025)
                double3 xformOp:translate = (1070.0071677737026, -800.9591087009271, 117.61592508205692)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_2" (
                    prepend references = @../meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (1, 0.9499904, 0.73745173) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 40 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    float inputs:exposure = 0
                    float inputs:height = 1032
                    float inputs:intensity = 105.700005
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 79.1
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (5.238689482212067e-10, 1.1641532182693481e-10, -105.3785766454821)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_21" (
                prepend references = @../meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, -298.54038071014173)
                double3 xformOp:scale = (0.0025, 0.0025, 0.0025)
                double3 xformOp:translate = (1064.7736757004793, -798.1127767245301, 117.61592508205692)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_2" (
                    prepend references = @../meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (1, 0.9499904, 0.73745173) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 40 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    float inputs:exposure = 0
                    float inputs:height = 1032
                    float inputs:intensity = 105.700005
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 79.1
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (5.238689482212067e-10, 1.1641532182693481e-10, -105.3785766454821)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_1" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                prepend references = @../meshes/Highbay-Frame.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, -26.090517307551096)
                double3 xformOp:scale = (0.45, 0.45, 0.45)
                double3 xformOp:translate = (1041.307103727115, -722.1314869498806, 116.83756427220949)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_2" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    prepend references = @../meshes/Highbay-Lens.usd@
                )
                {
                    rel material:binding = None (
                        bindMaterialAs = "strongerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0.22085475846699865)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    def Xform "Xform_mesh_2" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                        prepend references = @../meshes/Highbay-Source.usd@
                    )
                    {
                        rel material:binding = </Looks/LightSource> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                        double3 xformOp:rotateXYZ = (0, 0, 0)
                        double3 xformOp:scale = (0.5, 0.5, 0.1)
                        double3 xformOp:translate = (-3.183231456205249e-12, -7.275957614183426e-12, 0.33963338807291166)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                        over "Looks"
                        {
                            over "AperturePBR_Opacity"
                            {
                                over "Shader"
                                {
                                    color3f inputs:emissive_color_constant = (0.9619982, 0.992278, 0.9041606) (
                                        doc = "The emissive color when no emissive color texture is specified."
                                        hidden = false
                                        renderType = "color"
                                    )
                                    float inputs:emissive_intensity = 5 (
                                        doc = "Intensity of the emission"
                                        hidden = false
                                    )
                                }
                            }
                        }
                    }

                    over "_Joined_Solid_Geometry__12530__001" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </Looks/HighBayLens> (
                            bindMaterialAs = "weakerThanDescendants"
                        )

                        over "_Joined_Solid_Geometry__12530__Geometry_001" (
                            prepend apiSchemas = ["MaterialBindingAPI"]
                        )
                        {
                        }
                    }
                }

                def SphereLight "SphereLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                    color3f inputs:color = (0.95748264, 1, 0.85714287)
                    float inputs:colorTemperature = 5000
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 7.9
                    float inputs:intensity = 67.5
                    float inputs:radius = 0.05
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    double3 xformOp:rotateXYZ = (90, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-9.094947017729282e-13, -8.526512829121202e-13, 0.04838584732260642)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def Xform "Xform_mesh_03" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    prepend references = @../meshes/Rod.usd@
                )
                {
                    rel material:binding = </Looks/MetalRod> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (28.500000424683094, 28.500000424683094, 26.30000039190054)
                    double3 xformOp:translate = (-4.547473508864641e-13, 1.1368683772161603e-12, 2.712877571333138)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_02" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                prepend references = @../meshes/Highbay-Frame.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, -26.090517307551096)
                double3 xformOp:scale = (0.45, 0.45, 0.45)
                double3 xformOp:translate = (1054.7557401356585, -728.717146174866, 116.8375642722095)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_2" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    prepend references = @../meshes/Highbay-Lens.usd@
                )
                {
                    rel material:binding = None (
                        bindMaterialAs = "strongerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0.22085475846699865)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    def Xform "Xform_mesh_2" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                        prepend references = @../meshes/Highbay-Source.usd@
                    )
                    {
                        rel material:binding = </Looks/LightSource> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                        double3 xformOp:rotateXYZ = (0, 0, 0)
                        double3 xformOp:scale = (0.5, 0.5, 0.1)
                        double3 xformOp:translate = (-3.183231456205249e-12, -7.275957614183426e-12, 0.33963338807291166)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                        over "Looks"
                        {
                            over "AperturePBR_Opacity"
                            {
                                over "Shader"
                                {
                                    color3f inputs:emissive_color_constant = (0.9619982, 0.992278, 0.9041606) (
                                        doc = "The emissive color when no emissive color texture is specified."
                                        hidden = false
                                        renderType = "color"
                                    )
                                    float inputs:emissive_intensity = 5 (
                                        doc = "Intensity of the emission"
                                        hidden = false
                                    )
                                }
                            }
                        }
                    }

                    over "_Joined_Solid_Geometry__12530__001" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </Looks/HighBayLens> (
                            bindMaterialAs = "weakerThanDescendants"
                        )

                        over "_Joined_Solid_Geometry__12530__Geometry_001" (
                            prepend apiSchemas = ["MaterialBindingAPI"]
                        )
                        {
                        }
                    }
                }

                def SphereLight "SphereLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                    color3f inputs:color = (0.95748264, 1, 0.85714287)
                    float inputs:colorTemperature = 5000
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 7.9
                    float inputs:intensity = 67.5
                    float inputs:radius = 0.05
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    double3 xformOp:rotateXYZ = (90, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-9.094947017729282e-13, -8.526512829121202e-13, 0.04838584732260642)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def Xform "Xform_mesh_03" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    prepend references = @../meshes/Rod.usd@
                )
                {
                    rel material:binding = </Looks/MetalRod> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (28.500000424683094, 28.500000424683094, 26.30000039190054)
                    double3 xformOp:translate = (-4.547473508864641e-13, 1.1368683772161603e-12, 2.712877571333138)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_03" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                prepend references = @../meshes/Highbay-Frame.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, -26.090517307551096)
                double3 xformOp:scale = (0.45, 0.45, 0.45)
                double3 xformOp:translate = (1069.5629670736978, -735.9680932388239, 116.83756427220943)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_2" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    prepend references = @../meshes/Highbay-Lens.usd@
                )
                {
                    rel material:binding = None (
                        bindMaterialAs = "strongerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0.22085475846699865)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    def Xform "Xform_mesh_2" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                        prepend references = @../meshes/Highbay-Source.usd@
                    )
                    {
                        rel material:binding = </Looks/LightSource> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                        double3 xformOp:rotateXYZ = (0, 0, 0)
                        double3 xformOp:scale = (0.5, 0.5, 0.1)
                        double3 xformOp:translate = (-3.183231456205249e-12, -7.275957614183426e-12, 0.33963338807291166)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                        over "Looks"
                        {
                            over "AperturePBR_Opacity"
                            {
                                over "Shader"
                                {
                                    color3f inputs:emissive_color_constant = (0.9619982, 0.992278, 0.9041606) (
                                        doc = "The emissive color when no emissive color texture is specified."
                                        hidden = false
                                        renderType = "color"
                                    )
                                    float inputs:emissive_intensity = 5 (
                                        doc = "Intensity of the emission"
                                        hidden = false
                                    )
                                }
                            }
                        }
                    }

                    over "_Joined_Solid_Geometry__12530__001" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </Looks/HighBayLens> (
                            bindMaterialAs = "weakerThanDescendants"
                        )

                        over "_Joined_Solid_Geometry__12530__Geometry_001" (
                            prepend apiSchemas = ["MaterialBindingAPI"]
                        )
                        {
                        }
                    }
                }

                def SphereLight "SphereLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                    color3f inputs:color = (0.95748264, 1, 0.85714287)
                    float inputs:colorTemperature = 5000
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 7.9
                    float inputs:intensity = 67.5
                    float inputs:radius = 0.05
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    double3 xformOp:rotateXYZ = (90, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-9.094947017729282e-13, -8.526512829121202e-13, 0.04838584732260642)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def Xform "Xform_mesh_03" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    prepend references = @../meshes/Rod.usd@
                )
                {
                    rel material:binding = </Looks/MetalRod> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (28.500000424683094, 28.500000424683094, 26.30000039190054)
                    double3 xformOp:translate = (-4.547473508864641e-13, 1.1368683772161603e-12, 2.712877571333138)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_04" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                prepend references = @../meshes/Highbay-Frame.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, -26.090517307551096)
                double3 xformOp:scale = (0.45, 0.45, 0.45)
                double3 xformOp:translate = (1083.5078699339458, -742.7967690519872, 116.83756427220943)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_2" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    prepend references = @../meshes/Highbay-Lens.usd@
                )
                {
                    rel material:binding = None (
                        bindMaterialAs = "strongerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0.22085475846699865)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    def Xform "Xform_mesh_2" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                        prepend references = @../meshes/Highbay-Source.usd@
                    )
                    {
                        rel material:binding = </Looks/LightSource> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                        double3 xformOp:rotateXYZ = (0, 0, 0)
                        double3 xformOp:scale = (0.5, 0.5, 0.1)
                        double3 xformOp:translate = (-3.183231456205249e-12, -7.275957614183426e-12, 0.33963338807291166)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                        over "Looks"
                        {
                            over "AperturePBR_Opacity"
                            {
                                over "Shader"
                                {
                                    color3f inputs:emissive_color_constant = (0.9619982, 0.992278, 0.9041606) (
                                        doc = "The emissive color when no emissive color texture is specified."
                                        hidden = false
                                        renderType = "color"
                                    )
                                    float inputs:emissive_intensity = 5 (
                                        doc = "Intensity of the emission"
                                        hidden = false
                                    )
                                }
                            }
                        }
                    }

                    over "_Joined_Solid_Geometry__12530__001" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </Looks/HighBayLens> (
                            bindMaterialAs = "weakerThanDescendants"
                        )

                        over "_Joined_Solid_Geometry__12530__Geometry_001" (
                            prepend apiSchemas = ["MaterialBindingAPI"]
                        )
                        {
                        }
                    }
                }

                def SphereLight "SphereLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                    color3f inputs:color = (0.95748264, 1, 0.85714287)
                    float inputs:colorTemperature = 5000
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 7.9
                    float inputs:intensity = 67.5
                    float inputs:radius = 0.05
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    double3 xformOp:rotateXYZ = (90, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-9.094947017729282e-13, -8.526512829121202e-13, 0.04838584732260642)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def Xform "Xform_mesh_03" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    prepend references = @../meshes/Rod.usd@
                )
                {
                    rel material:binding = </Looks/MetalRod> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (28.500000424683094, 28.500000424683094, 26.30000039190054)
                    double3 xformOp:translate = (-4.547473508864641e-13, 1.1368683772161603e-12, 2.712877571333138)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_05" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                prepend references = @../meshes/Highbay-Frame.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, -26.090517307551096)
                double3 xformOp:scale = (0.45, 0.45, 0.45)
                double3 xformOp:translate = (1045.65885836246, -747.2939736783396, 116.83756427220949)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_2" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    prepend references = @../meshes/Highbay-Lens.usd@
                )
                {
                    rel material:binding = None (
                        bindMaterialAs = "strongerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0.22085475846699865)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    def Xform "Xform_mesh_2" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                        prepend references = @../meshes/Highbay-Source.usd@
                    )
                    {
                        rel material:binding = </Looks/LightSource> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                        double3 xformOp:rotateXYZ = (0, 0, 0)
                        double3 xformOp:scale = (0.5, 0.5, 0.1)
                        double3 xformOp:translate = (-3.183231456205249e-12, -7.275957614183426e-12, 0.33963338807291166)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                        over "Looks"
                        {
                            over "AperturePBR_Opacity"
                            {
                                over "Shader"
                                {
                                    color3f inputs:emissive_color_constant = (0.9619982, 0.992278, 0.9041606) (
                                        doc = "The emissive color when no emissive color texture is specified."
                                        hidden = false
                                        renderType = "color"
                                    )
                                    float inputs:emissive_intensity = 5 (
                                        doc = "Intensity of the emission"
                                        hidden = false
                                    )
                                }
                            }
                        }
                    }

                    over "_Joined_Solid_Geometry__12530__001" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </Looks/HighBayLens> (
                            bindMaterialAs = "weakerThanDescendants"
                        )

                        over "_Joined_Solid_Geometry__12530__Geometry_001" (
                            prepend apiSchemas = ["MaterialBindingAPI"]
                        )
                        {
                        }
                    }
                }

                def SphereLight "SphereLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                    color3f inputs:color = (0.95748264, 1, 0.85714287)
                    float inputs:colorTemperature = 5000
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 7.9
                    float inputs:intensity = 67.5
                    float inputs:radius = 0.05
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    double3 xformOp:rotateXYZ = (90, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-9.094947017729282e-13, -8.526512829121202e-13, 0.04838584732260642)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def Xform "Xform_mesh_03" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    prepend references = @../meshes/Rod.usd@
                )
                {
                    rel material:binding = </Looks/MetalRod> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (28.500000424683094, 28.500000424683094, 26.30000039190054)
                    double3 xformOp:translate = (-4.547473508864641e-13, 1.1368683772161603e-12, 2.712877571333138)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_06" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                prepend references = @../meshes/Highbay-Frame.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, -26.090517307551096)
                double3 xformOp:scale = (0.45, 0.45, 0.45)
                double3 xformOp:translate = (1060.4660853005034, -754.5449207423025, 116.83756427220943)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_2" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    prepend references = @../meshes/Highbay-Lens.usd@
                )
                {
                    rel material:binding = None (
                        bindMaterialAs = "strongerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0.22085475846699865)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    def Xform "Xform_mesh_2" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                        prepend references = @../meshes/Highbay-Source.usd@
                    )
                    {
                        rel material:binding = </Looks/LightSource> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                        double3 xformOp:rotateXYZ = (0, 0, 0)
                        double3 xformOp:scale = (0.5, 0.5, 0.1)
                        double3 xformOp:translate = (-3.183231456205249e-12, -7.275957614183426e-12, 0.33963338807291166)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                        over "Looks"
                        {
                            over "AperturePBR_Opacity"
                            {
                                over "Shader"
                                {
                                    color3f inputs:emissive_color_constant = (0.9619982, 0.992278, 0.9041606) (
                                        doc = "The emissive color when no emissive color texture is specified."
                                        hidden = false
                                        renderType = "color"
                                    )
                                    float inputs:emissive_intensity = 5 (
                                        doc = "Intensity of the emission"
                                        hidden = false
                                    )
                                }
                            }
                        }
                    }

                    over "_Joined_Solid_Geometry__12530__001" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </Looks/HighBayLens> (
                            bindMaterialAs = "weakerThanDescendants"
                        )

                        over "_Joined_Solid_Geometry__12530__Geometry_001" (
                            prepend apiSchemas = ["MaterialBindingAPI"]
                        )
                        {
                        }
                    }
                }

                def SphereLight "SphereLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                    color3f inputs:color = (0.95748264, 1, 0.85714287)
                    float inputs:colorTemperature = 5000
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 7.9
                    float inputs:intensity = 67.5
                    float inputs:radius = 0.05
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    double3 xformOp:rotateXYZ = (90, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-9.094947017729282e-13, -8.526512829121202e-13, 0.04838584732260642)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def Xform "Xform_mesh_03" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    prepend references = @../meshes/Rod.usd@
                )
                {
                    rel material:binding = </Looks/MetalRod> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (28.500000424683094, 28.500000424683094, 26.30000039190054)
                    double3 xformOp:translate = (-4.547473508864641e-13, 1.1368683772161603e-12, 2.712877571333138)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_07" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                prepend references = @../meshes/Highbay-Frame.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, -26.090517307551096)
                double3 xformOp:scale = (0.45, 0.45, 0.45)
                double3 xformOp:translate = (1074.4109881607476, -761.3735965554628, 116.83756427220943)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_2" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    prepend references = @../meshes/Highbay-Lens.usd@
                )
                {
                    rel material:binding = None (
                        bindMaterialAs = "strongerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0.22085475846699865)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    def Xform "Xform_mesh_2" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                        prepend references = @../meshes/Highbay-Source.usd@
                    )
                    {
                        rel material:binding = </Looks/LightSource> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                        double3 xformOp:rotateXYZ = (0, 0, 0)
                        double3 xformOp:scale = (0.5, 0.5, 0.1)
                        double3 xformOp:translate = (-3.183231456205249e-12, -7.275957614183426e-12, 0.33963338807291166)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                        over "Looks"
                        {
                            over "AperturePBR_Opacity"
                            {
                                over "Shader"
                                {
                                    color3f inputs:emissive_color_constant = (0.9619982, 0.992278, 0.9041606) (
                                        doc = "The emissive color when no emissive color texture is specified."
                                        hidden = false
                                        renderType = "color"
                                    )
                                    float inputs:emissive_intensity = 5 (
                                        doc = "Intensity of the emission"
                                        hidden = false
                                    )
                                }
                            }
                        }
                    }

                    over "_Joined_Solid_Geometry__12530__001" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </Looks/HighBayLens> (
                            bindMaterialAs = "weakerThanDescendants"
                        )

                        over "_Joined_Solid_Geometry__12530__Geometry_001" (
                            prepend apiSchemas = ["MaterialBindingAPI"]
                        )
                        {
                        }
                    }
                }

                def SphereLight "SphereLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                    color3f inputs:color = (0.95748264, 1, 0.85714287)
                    float inputs:colorTemperature = 5000
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 7.9
                    float inputs:intensity = 67.5
                    float inputs:radius = 0.05
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    double3 xformOp:rotateXYZ = (90, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-9.094947017729282e-13, -8.526512829121202e-13, 0.04838584732260642)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def Xform "Xform_mesh_03" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    prepend references = @../meshes/Rod.usd@
                )
                {
                    rel material:binding = </Looks/MetalRod> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (28.500000424683094, 28.500000424683094, 26.30000039190054)
                    double3 xformOp:translate = (-4.547473508864641e-13, 1.1368683772161603e-12, 2.712877571333138)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_08" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                prepend references = @../meshes/Highbay-Frame.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, -26.090517307551096)
                double3 xformOp:scale = (0.45, 0.45, 0.45)
                double3 xformOp:translate = (1090.7358405432044, -769.3677092240657, 116.83756427220943)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_2" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    prepend references = @../meshes/Highbay-Lens.usd@
                )
                {
                    rel material:binding = None (
                        bindMaterialAs = "strongerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0.22085475846699865)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    def Xform "Xform_mesh_2" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                        prepend references = @../meshes/Highbay-Source.usd@
                    )
                    {
                        rel material:binding = </Looks/LightSource> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                        double3 xformOp:rotateXYZ = (0, 0, 0)
                        double3 xformOp:scale = (0.5, 0.5, 0.1)
                        double3 xformOp:translate = (-3.183231456205249e-12, -7.275957614183426e-12, 0.33963338807291166)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                        over "Looks"
                        {
                            over "AperturePBR_Opacity"
                            {
                                over "Shader"
                                {
                                    color3f inputs:emissive_color_constant = (0.9619982, 0.992278, 0.9041606) (
                                        doc = "The emissive color when no emissive color texture is specified."
                                        hidden = false
                                        renderType = "color"
                                    )
                                    float inputs:emissive_intensity = 5 (
                                        doc = "Intensity of the emission"
                                        hidden = false
                                    )
                                }
                            }
                        }
                    }

                    over "_Joined_Solid_Geometry__12530__001" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </Looks/HighBayLens> (
                            bindMaterialAs = "weakerThanDescendants"
                        )

                        over "_Joined_Solid_Geometry__12530__Geometry_001" (
                            prepend apiSchemas = ["MaterialBindingAPI"]
                        )
                        {
                        }
                    }
                }

                def SphereLight "SphereLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                    color3f inputs:color = (0.95748264, 1, 0.85714287)
                    float inputs:colorTemperature = 5000
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 7.9
                    float inputs:intensity = 67.5
                    float inputs:radius = 0.05
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    double3 xformOp:rotateXYZ = (90, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-9.094947017729282e-13, -8.526512829121202e-13, 0.04838584732260642)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def Xform "Xform_mesh_03" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    prepend references = @../meshes/Rod.usd@
                )
                {
                    rel material:binding = </Looks/MetalRod> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (28.500000424683094, 28.500000424683094, 26.30000039190054)
                    double3 xformOp:translate = (-4.547473508864641e-13, 1.1368683772161603e-12, 2.712877571333138)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_09" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                prepend references = @../meshes/Highbay-Frame.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, -26.090517307551096)
                double3 xformOp:scale = (0.45, 0.45, 0.45)
                double3 xformOp:translate = (1065.3499419839663, -779.8772438516723, 116.83756427220945)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_2" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    prepend references = @../meshes/Highbay-Lens.usd@
                )
                {
                    rel material:binding = None (
                        bindMaterialAs = "strongerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0.22085475846699865)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    def Xform "Xform_mesh_2" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                        prepend references = @../meshes/Highbay-Source.usd@
                    )
                    {
                        rel material:binding = </Looks/LightSource> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                        double3 xformOp:rotateXYZ = (0, 0, 0)
                        double3 xformOp:scale = (0.5, 0.5, 0.1)
                        double3 xformOp:translate = (-3.183231456205249e-12, -7.275957614183426e-12, 0.33963338807291166)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                        over "Looks"
                        {
                            over "AperturePBR_Opacity"
                            {
                                over "Shader"
                                {
                                    color3f inputs:emissive_color_constant = (0.9619982, 0.992278, 0.9041606) (
                                        doc = "The emissive color when no emissive color texture is specified."
                                        hidden = false
                                        renderType = "color"
                                    )
                                    float inputs:emissive_intensity = 5 (
                                        doc = "Intensity of the emission"
                                        hidden = false
                                    )
                                }
                            }
                        }
                    }

                    over "_Joined_Solid_Geometry__12530__001" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </Looks/HighBayLens> (
                            bindMaterialAs = "weakerThanDescendants"
                        )

                        over "_Joined_Solid_Geometry__12530__Geometry_001" (
                            prepend apiSchemas = ["MaterialBindingAPI"]
                        )
                        {
                        }
                    }
                }

                def SphereLight "SphereLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                    color3f inputs:color = (0.95748264, 1, 0.85714287)
                    float inputs:colorTemperature = 5000
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 7.9
                    float inputs:intensity = 67.5
                    float inputs:radius = 0.05
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    double3 xformOp:rotateXYZ = (90, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-9.094947017729282e-13, -8.526512829121202e-13, 0.04838584732260642)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def Xform "Xform_mesh_03" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    prepend references = @../meshes/Rod.usd@
                )
                {
                    rel material:binding = </Looks/MetalRod> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (28.500000424683094, 28.500000424683094, 26.30000039190054)
                    double3 xformOp:translate = (-4.547473508864641e-13, 1.1368683772161603e-12, 2.712877571333138)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_10" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                prepend references = @../meshes/Highbay-Frame.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, -26.090517307551096)
                double3 xformOp:scale = (0.45, 0.45, 0.45)
                double3 xformOp:translate = (1081.6747943664257, -787.8713565202786, 116.83756427220945)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_2" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    prepend references = @../meshes/Highbay-Lens.usd@
                )
                {
                    rel material:binding = None (
                        bindMaterialAs = "strongerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0.22085475846699865)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    def Xform "Xform_mesh_2" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                        prepend references = @../meshes/Highbay-Source.usd@
                    )
                    {
                        rel material:binding = </Looks/LightSource> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                        double3 xformOp:rotateXYZ = (0, 0, 0)
                        double3 xformOp:scale = (0.5, 0.5, 0.1)
                        double3 xformOp:translate = (-3.183231456205249e-12, -7.275957614183426e-12, 0.33963338807291166)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                        over "Looks"
                        {
                            over "AperturePBR_Opacity"
                            {
                                over "Shader"
                                {
                                    color3f inputs:emissive_color_constant = (0.9619982, 0.992278, 0.9041606) (
                                        doc = "The emissive color when no emissive color texture is specified."
                                        hidden = false
                                        renderType = "color"
                                    )
                                    float inputs:emissive_intensity = 5 (
                                        doc = "Intensity of the emission"
                                        hidden = false
                                    )
                                }
                            }
                        }
                    }

                    over "_Joined_Solid_Geometry__12530__001" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </Looks/HighBayLens> (
                            bindMaterialAs = "weakerThanDescendants"
                        )

                        over "_Joined_Solid_Geometry__12530__Geometry_001" (
                            prepend apiSchemas = ["MaterialBindingAPI"]
                        )
                        {
                        }
                    }
                }

                def SphereLight "SphereLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                    color3f inputs:color = (0.95748264, 1, 0.85714287)
                    float inputs:colorTemperature = 5000
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 7.9
                    float inputs:intensity = 67.5
                    float inputs:radius = 0.05
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    double3 xformOp:rotateXYZ = (90, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-9.094947017729282e-13, -8.526512829121202e-13, 0.04838584732260642)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def Xform "Xform_mesh_03" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    prepend references = @../meshes/Rod.usd@
                )
                {
                    rel material:binding = </Looks/MetalRod> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (28.500000424683094, 28.500000424683094, 26.30000039190054)
                    double3 xformOp:translate = (-4.547473508864641e-13, 1.1368683772161603e-12, 2.712877571333138)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_13" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                prepend references = @../meshes/Highbay-Frame.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, -26.090517307551096)
                double3 xformOp:scale = (0.45, 0.45, 0.45)
                double3 xformOp:translate = (1093.44701258185, -793.636090961268, 116.83756427220943)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_2" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    prepend references = @../meshes/Highbay-Lens.usd@
                )
                {
                    rel material:binding = None (
                        bindMaterialAs = "strongerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0.22085475846699865)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    def Xform "Xform_mesh_2" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                        prepend references = @../meshes/Highbay-Source.usd@
                    )
                    {
                        rel material:binding = </Looks/LightSource> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                        double3 xformOp:rotateXYZ = (0, 0, 0)
                        double3 xformOp:scale = (0.5, 0.5, 0.1)
                        double3 xformOp:translate = (-3.183231456205249e-12, -7.275957614183426e-12, 0.33963338807291166)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                        over "Looks"
                        {
                            over "AperturePBR_Opacity"
                            {
                                over "Shader"
                                {
                                    color3f inputs:emissive_color_constant = (0.9619982, 0.992278, 0.9041606) (
                                        doc = "The emissive color when no emissive color texture is specified."
                                        hidden = false
                                        renderType = "color"
                                    )
                                    float inputs:emissive_intensity = 5 (
                                        doc = "Intensity of the emission"
                                        hidden = false
                                    )
                                }
                            }
                        }
                    }

                    over "_Joined_Solid_Geometry__12530__001" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </Looks/HighBayLens> (
                            bindMaterialAs = "weakerThanDescendants"
                        )

                        over "_Joined_Solid_Geometry__12530__Geometry_001" (
                            prepend apiSchemas = ["MaterialBindingAPI"]
                        )
                        {
                        }
                    }
                }

                def SphereLight "SphereLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                    color3f inputs:color = (0.95748264, 1, 0.85714287)
                    float inputs:colorTemperature = 5000
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 7.9
                    float inputs:intensity = 67.5
                    float inputs:radius = 0.05
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    double3 xformOp:rotateXYZ = (90, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-9.094947017729282e-13, -8.526512829121202e-13, 0.04838584732260642)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def Xform "Xform_mesh_03" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    prepend references = @../meshes/Rod.usd@
                )
                {
                    rel material:binding = </Looks/MetalRod> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (28.500000424683094, 28.500000424683094, 26.30000039190054)
                    double3 xformOp:translate = (-4.547473508864641e-13, 1.1368683772161603e-12, 2.712877571333138)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_15" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                prepend references = @../meshes/Highbay-Frame.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, -26.090517307551096)
                double3 xformOp:scale = (0.45, 0.45, 0.45)
                double3 xformOp:translate = (1102.508058758617, -775.132443665055, 116.83756427220943)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_2" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    prepend references = @../meshes/Highbay-Lens.usd@
                )
                {
                    rel material:binding = None (
                        bindMaterialAs = "strongerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0.22085475846699865)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    def Xform "Xform_mesh_2" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                        prepend references = @../meshes/Highbay-Source.usd@
                    )
                    {
                        rel material:binding = </Looks/LightSource> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                        double3 xformOp:rotateXYZ = (0, 0, 0)
                        double3 xformOp:scale = (0.5, 0.5, 0.1)
                        double3 xformOp:translate = (-3.183231456205249e-12, -7.275957614183426e-12, 0.33963338807291166)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                        over "Looks"
                        {
                            over "AperturePBR_Opacity"
                            {
                                over "Shader"
                                {
                                    color3f inputs:emissive_color_constant = (0.9619982, 0.992278, 0.9041606) (
                                        doc = "The emissive color when no emissive color texture is specified."
                                        hidden = false
                                        renderType = "color"
                                    )
                                    float inputs:emissive_intensity = 5 (
                                        doc = "Intensity of the emission"
                                        hidden = false
                                    )
                                }
                            }
                        }
                    }

                    over "_Joined_Solid_Geometry__12530__001" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </Looks/HighBayLens> (
                            bindMaterialAs = "weakerThanDescendants"
                        )

                        over "_Joined_Solid_Geometry__12530__Geometry_001" (
                            prepend apiSchemas = ["MaterialBindingAPI"]
                        )
                        {
                        }
                    }
                }

                def SphereLight "SphereLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                    color3f inputs:color = (0.95748264, 1, 0.85714287)
                    float inputs:colorTemperature = 5000
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 7.9
                    float inputs:intensity = 67.5
                    float inputs:radius = 0.05
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    double3 xformOp:rotateXYZ = (90, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-9.094947017729282e-13, -8.526512829121202e-13, 0.04838584732260642)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def Xform "Xform_mesh_03" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    prepend references = @../meshes/Rod.usd@
                )
                {
                    rel material:binding = </Looks/MetalRod> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (28.500000424683094, 28.500000424683094, 26.30000039190054)
                    double3 xformOp:translate = (-4.547473508864641e-13, 1.1368683772161603e-12, 2.712877571333138)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_16" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                prepend references = @../meshes/Highbay-Frame.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, -26.090517307551096)
                double3 xformOp:scale = (0.45, 0.45, 0.45)
                double3 xformOp:translate = (1051.0098903382902, -772.8550677337153, 116.83756427220945)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_2" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    prepend references = @../meshes/Highbay-Lens.usd@
                )
                {
                    rel material:binding = None (
                        bindMaterialAs = "strongerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0.22085475846699865)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    def Xform "Xform_mesh_2" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                        prepend references = @../meshes/Highbay-Source.usd@
                    )
                    {
                        rel material:binding = </Looks/LightSource> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                        double3 xformOp:rotateXYZ = (0, 0, 0)
                        double3 xformOp:scale = (0.5, 0.5, 0.1)
                        double3 xformOp:translate = (-3.183231456205249e-12, -7.275957614183426e-12, 0.33963338807291166)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                        over "Looks"
                        {
                            over "AperturePBR_Opacity"
                            {
                                over "Shader"
                                {
                                    color3f inputs:emissive_color_constant = (0.9619982, 0.992278, 0.9041606) (
                                        doc = "The emissive color when no emissive color texture is specified."
                                        hidden = false
                                        renderType = "color"
                                    )
                                    float inputs:emissive_intensity = 5 (
                                        doc = "Intensity of the emission"
                                        hidden = false
                                    )
                                }
                            }
                        }
                    }

                    over "_Joined_Solid_Geometry__12530__001" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </Looks/HighBayLens> (
                            bindMaterialAs = "weakerThanDescendants"
                        )

                        over "_Joined_Solid_Geometry__12530__Geometry_001" (
                            prepend apiSchemas = ["MaterialBindingAPI"]
                        )
                        {
                        }
                    }
                }

                def SphereLight "SphereLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                    color3f inputs:color = (0.95748264, 1, 0.85714287)
                    float inputs:colorTemperature = 5000
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 7.9
                    float inputs:intensity = 67.5
                    float inputs:radius = 0.05
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    double3 xformOp:rotateXYZ = (90, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-9.094947017729282e-13, -8.526512829121202e-13, 0.04838584732260642)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def Xform "Xform_mesh_03" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    prepend references = @../meshes/Rod.usd@
                )
                {
                    rel material:binding = </Looks/MetalRod> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (28.500000424683094, 28.500000424683094, 26.30000039190054)
                    double3 xformOp:translate = (-4.547473508864641e-13, 1.1368683772161603e-12, 2.712877571333138)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }
        }

        over "mesh_8BAC37FB2337DAD0"
        {
            token visibility = "inherited"

            def Xform "Xform_mesh_0" (
                prepend references = @../meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (0.002, 0.002, 0.002)
                double3 xformOp:translate = (-4.183174643183677, -1.8504092755328498, 5.796968246301571)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @../meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.9601484, 1, 0.8030888) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 50 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 1215.8
                    float inputs:intensity = 148
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 115
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.4809758013763636e-14, 0, -116.33826232616593)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            over "mesh"
            {
                token visibility = "invisible"
            }

            def Xform "Xform_mesh_01" (
                prepend references = @../meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (0.002, 0.002, 0.002)
                double3 xformOp:translate = (-4.183174643183624, 1.512473231442714, 5.645275424235391)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @../meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.9601484, 1, 0.8030888) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 50 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 1215.8
                    float inputs:intensity = 148
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 115
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.4809758013763636e-14, 0, -116.33826232616593)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_02" (
                prepend references = @../meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (0.002, 0.002, 0.002)
                double3 xformOp:translate = (-4.183174643183677, 3.9120513727938486, 5.501579988642072)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @../meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.9601484, 1, 0.8030888) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 50 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 1215.8
                    float inputs:intensity = 148
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 115
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.4809758013763636e-14, 0, -116.33826232616593)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_03" (
                prepend references = @../meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (0.002, 0.002, 0.002)
                double3 xformOp:translate = (0.4027909166114439, -1.8504092755328498, 5.796968246301571)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @../meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.9601484, 1, 0.8030888) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 50 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 1215.8
                    float inputs:intensity = 148
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 115
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.4809758013763636e-14, 0, -116.33826232616593)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_04" (
                prepend references = @../meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (0.002, 0.002, 0.002)
                double3 xformOp:translate = (0.4027909166114725, 1.512473231442714, 5.645275424235391)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @../meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.9601484, 1, 0.8030888) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 50 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 1215.8
                    float inputs:intensity = 148
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 115
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.4809758013763636e-14, 0, -116.33826232616593)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_05" (
                prepend references = @../meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (0.002, 0.002, 0.002)
                double3 xformOp:translate = (0.4027909166114439, 3.9120513727938486, 5.501579988642072)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @../meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.9601484, 1, 0.8030888) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 50 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 1215.8
                    float inputs:intensity = 148
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 115
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.4809758013763636e-14, 0, -116.33826232616593)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_06" (
                prepend references = @../meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (0.002, 0.002, 0.002)
                double3 xformOp:translate = (4.461390640323624, -1.8504092755328498, 5.796968246301571)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @../meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.9601484, 1, 0.8030888) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 50 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 1215.8
                    float inputs:intensity = 148
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 115
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.4809758013763636e-14, 0, -116.33826232616593)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_07" (
                prepend references = @../meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (0.002, 0.002, 0.002)
                double3 xformOp:translate = (4.461390640323659, 1.512473231442714, 5.645275424235391)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @../meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.9601484, 1, 0.8030888) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 50 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 1215.8
                    float inputs:intensity = 148
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 115
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.4809758013763636e-14, 0, -116.33826232616593)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_08" (
                prepend references = @../meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (0.002, 0.002, 0.002)
                double3 xformOp:translate = (4.461390640323624, 3.9120513727938486, 5.501579988642072)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @../meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.9601484, 1, 0.8030888) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 50 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 1215.8
                    float inputs:intensity = 148
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 115
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.4809758013763636e-14, 0, -116.33826232616593)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_09" (
                prepend references = @../meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (0.002, 0.002, 0.002)
                double3 xformOp:translate = (0.40279091661143873, -6.393295885135925, 5.388195540969945)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @../meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.9601484, 1, 0.8030888) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 50 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 1215.8
                    float inputs:intensity = 148
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 115
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.4809758013763636e-14, 0, -116.33826232616593)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_10" (
                prepend references = @../meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (0.002, 0.002, 0.002)
                double3 xformOp:translate = (-4.183174643183676, -6.393295885135925, 5.388195540969945)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @../meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.9601484, 1, 0.8030888) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 50 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 1215.8
                    float inputs:intensity = 148
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 115
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.4809758013763636e-14, 0, -116.33826232616593)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_11" (
                prepend references = @../meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (0.002, 0.002, 0.002)
                double3 xformOp:translate = (4.461390640323615, -6.393295885135925, 5.388195540969945)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @../meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.9601484, 1, 0.8030888) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 50 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 1215.8
                    float inputs:intensity = 148
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 115
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.4809758013763636e-14, 0, -116.33826232616593)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_12" (
                prepend references = @../meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 45)
                double3 xformOp:scale = (0.002, 0.002, 0.002)
                double3 xformOp:translate = (-0.18792574514478724, 9.716482193954825, 5.286145246832589)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @../meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.9601484, 1, 0.8030888) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 50 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 1215.8
                    float inputs:intensity = 25
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 115
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.4809758013763636e-14, 0, -116.33826232616593)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_13" (
                prepend references = @../meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 45)
                double3 xformOp:scale = (0.002, 0.002, 0.002)
                double3 xformOp:translate = (-4.344549930721244, 9.28714081973612, 5.3242971453124355)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @../meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.9601484, 1, 0.8030888) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 50 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 1215.8
                    float inputs:intensity = 25
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 115
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.4809758013763636e-14, 0, -116.33826232616593)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_14" (
                prepend references = @../meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 45)
                double3 xformOp:scale = (0.002, 0.002, 0.002)
                double3 xformOp:translate = (3.911807995122173, 9.675348177400068, 5.304140901709991)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @../meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.9601484, 1, 0.8030888) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 50 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 1215.8
                    float inputs:intensity = 25
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 115
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.4809758013763636e-14, 0, -116.33826232616593)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_15" (
                prepend references = @../meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 45)
                double3 xformOp:scale = (0.002, 0.002, 0.002)
                double3 xformOp:translate = (-0.6247607290475936, 13.006930021409888, 5.3242971453124355)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @../meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.9601484, 1, 0.8030888) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 50 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 1215.8
                    float inputs:intensity = 25
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 115
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.4809758013763636e-14, 0, -116.33826232616593)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_16" (
                prepend references = @../meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 45)
                double3 xformOp:scale = (0.002, 0.002, 0.002)
                double3 xformOp:translate = (3.5318634565289257, 13.436271395628603, 5.286145246832589)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @../meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.9601484, 1, 0.8030888) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 50 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 1215.8
                    float inputs:intensity = 25
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 115
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.4809758013763636e-14, 0, -116.33826232616593)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_17" (
                prepend references = @../meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 45)
                double3 xformOp:scale = (0.002, 0.002, 0.002)
                double3 xformOp:translate = (3.1779284995332944, 16.809619249990853, 5.324297145312433)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @../meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.9601484, 1, 0.8030888) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 50 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 1215.8
                    float inputs:intensity = 25
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 115
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.4809758013763636e-14, 0, -116.33826232616593)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_18" (
                prepend references = @../meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 45)
                double3 xformOp:scale = (0.002, 0.002, 0.002)
                double3 xformOp:translate = (1.1555538270231436, 18.83199392250135, 5.32429714531243)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @../meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.9601484, 1, 0.8030888) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 50 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 1215.8
                    float inputs:intensity = 25
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 115
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.4809758013763636e-14, 0, -116.33826232616593)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_19" (
                prepend references = @../meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 45)
                double3 xformOp:scale = (0.002, 0.002, 0.002)
                double3 xformOp:translate = (-2.6471354015578905, 15.029304693920256, 5.324297145312433)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @../meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.9601484, 1, 0.8030888) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 50 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 1215.8
                    float inputs:intensity = 25
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 115
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.4809758013763636e-14, 0, -116.33826232616593)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_20" (
                prepend references = @../meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 45)
                double3 xformOp:scale = (0.002, 0.002, 0.002)
                double3 xformOp:translate = (-6.36692460323164, 11.309515492246405, 5.324297145312433)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @../meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.9601484, 1, 0.8030888) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 50 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 1215.8
                    float inputs:intensity = 25
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 115
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.4809758013763636e-14, 0, -116.33826232616593)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_22" (
                prepend references = @../meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 45)
                double3 xformOp:scale = (0.002, 0.002, 0.002)
                double3 xformOp:translate = (-2.0064960814284354, 19.53489008355621, 5.324297145312433)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @../meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.9601484, 1, 0.8030888) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 50 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 1215.8
                    float inputs:intensity = 25
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 115
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.4809758013763636e-14, 0, -116.33826232616593)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_23" (
                prepend references = @../meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 45)
                double3 xformOp:scale = (0.002, 0.002, 0.002)
                double3 xformOp:translate = (-5.726285283102702, 15.815100881881907, 5.324297145312433)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @../meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.9601484, 1, 0.8030888) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 50 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 1215.8
                    float inputs:intensity = 25
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 115
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.4809758013763636e-14, 0, -116.33826232616593)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_24" (
                prepend references = @../meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 45)
                double3 xformOp:scale = (0.002, 0.002, 0.002)
                double3 xformOp:translate = (-5.983093516605107, 19.769928377384435, 5.324297145312433)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @../meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.9601484, 1, 0.8030888) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 50 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 1215.8
                    float inputs:intensity = 25
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 115
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.4809758013763636e-14, 0, -116.33826232616593)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_21" (
                prepend references = @../meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (0.002, 0.002, 0.002)
                double3 xformOp:translate = (0.40279091661143873, -10.4151643399259, 6.248701749129185)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @../meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.9601484, 1, 0.8030888) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 50 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 1215.8
                    float inputs:intensity = 10
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 115
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.4809758013763636e-14, 0, -116.33826232616593)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_25" (
                prepend references = @../meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (0.002, 0.002, 0.002)
                double3 xformOp:translate = (-4.183174643183676, -10.4151643399259, 6.248701749129185)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @../meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.9601484, 1, 0.8030888) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 50 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 1215.8
                    float inputs:intensity = 10
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 115
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.4809758013763636e-14, 0, -116.33826232616593)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_26" (
                prepend references = @../meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (0.002, 0.002, 0.002)
                double3 xformOp:translate = (4.461390640323615, -10.4151643399259, 6.248701749129185)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @../meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.9601484, 1, 0.8030888) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 50 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 1215.8
                    float inputs:intensity = 10
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 115
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.4809758013763636e-14, 0, -116.33826232616593)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_27" (
                prepend references = @../meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (0.002, 0.002, 0.002)
                double3 xformOp:translate = (0.40279091661143873, -13.430673552489424, 6.401556114068649)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @../meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.9601484, 1, 0.8030888) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 50 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 1215.8
                    float inputs:intensity = 10
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 115
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.4809758013763636e-14, 0, -116.33826232616593)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_28" (
                prepend references = @../meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (0.002, 0.002, 0.002)
                double3 xformOp:translate = (-4.183174643183676, -13.430673552489424, 6.401556114068649)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @../meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.9601484, 1, 0.8030888) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 50 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 1215.8
                    float inputs:intensity = 10
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 115
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.4809758013763636e-14, 0, -116.33826232616593)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_29" (
                prepend references = @../meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (0.002, 0.002, 0.002)
                double3 xformOp:translate = (4.461390640323615, -13.430673552489424, 6.401556114068649)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @../meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.9601484, 1, 0.8030888) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 50 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 1215.8
                    float inputs:intensity = 10
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 115
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.4809758013763636e-14, 0, -116.33826232616593)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_30" (
                prepend references = @../meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (0.002, 0.002, 0.002)
                double3 xformOp:translate = (0.40279091661143873, -16.659799886235877, 6.556101663223498)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @../meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.9601484, 1, 0.8030888) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 50 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 1215.8
                    float inputs:intensity = 10
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 115
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.4809758013763636e-14, 0, -116.33826232616593)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_31" (
                prepend references = @../meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (0.002, 0.002, 0.002)
                double3 xformOp:translate = (-4.183174643183676, -16.659799886235877, 6.556101663223498)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @../meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.9601484, 1, 0.8030888) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 50 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 1215.8
                    float inputs:intensity = 10
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 115
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.4809758013763636e-14, 0, -116.33826232616593)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_32" (
                prepend references = @../meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (0.002, 0.002, 0.002)
                double3 xformOp:translate = (4.461390640323615, -16.659799886235877, 6.556101663223498)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @../meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.9601484, 1, 0.8030888) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 50 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 1215.8
                    float inputs:intensity = 10
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 115
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.4809758013763636e-14, 0, -116.33826232616593)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_33" (
                prepend references = @../meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (0.002, 0.002, 0.002)
                double3 xformOp:translate = (0.40279091661143873, -19.489351816949608, 6.781937382711116)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @../meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.9601484, 1, 0.8030888) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 50 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 1215.8
                    float inputs:intensity = 10
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 115
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.4809758013763636e-14, 0, -116.33826232616593)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_34" (
                prepend references = @../meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (0.002, 0.002, 0.002)
                double3 xformOp:translate = (-4.183174643183676, -19.489351816949608, 6.781937382711116)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @../meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.9601484, 1, 0.8030888) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 50 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 1215.8
                    float inputs:intensity = 10
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 115
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.4809758013763636e-14, 0, -116.33826232616593)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_35" (
                prepend references = @../meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (0.002, 0.002, 0.002)
                double3 xformOp:translate = (4.461390640323615, -19.489351816949608, 6.781937382711116)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @../meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.9601484, 1, 0.8030888) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 50 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 1215.8
                    float inputs:intensity = 10
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 115
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.4809758013763636e-14, 0, -116.33826232616593)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }
        }

        over "mesh_A2721FE40B34519E"
        {
            custom int preserveOriginalDrawCall = 1

            def SphereLight "HighwayPole" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:colorTemperature = 5000
                bool inputs:enableColorTemperature = 1
                float inputs:exposure = 9.1
                float inputs:intensity = 300
                float inputs:radius = 0.025
                float inputs:shaping:cone:angle = 90
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, -6.000000089406967, 12.800000190734863)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_82266CE244131204" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/Looks/mat_F5F58B17A49A6BB1> (
                bindMaterialAs = "weakerThanDescendants"
            )
            custom int preserveOriginalDrawCall = 1
            token visibility = "inherited"

            def Xform "Xform_mesh_0" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                prepend references = @../meshes/WallPack-Base.usd@
            )
            {
                rel material:binding = </Looks/WallMount> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (90, 0, 35)
                double3 xformOp:scale = (0.7000000104308128, 0.7000000104308128, 0.7000000104308128)
                double3 xformOp:translate = (1960.2605513964518, -558.7700049241218, 112.85025155979336)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    prepend references = @../meshes/WallPack-Frame.usd@
                )
                {
                    rel material:binding = None (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 3.183231456205249e-12)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    def Xform "Xform_mesh_1" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                        prepend references = @../meshes/WallPack-Lens.usd@
                    )
                    {
                        rel material:binding = </Looks/LightSource> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                        double3 xformOp:rotateXYZ = (0, 0, 0)
                        double3 xformOp:scale = (1, 1, 1)
                        double3 xformOp:translate = (0, 0, 0)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                        over "_Extrusion__52301_" (
                            prepend apiSchemas = ["MaterialBindingAPI"]
                        )
                        {
                            rel material:binding = None (
                                bindMaterialAs = "weakerThanDescendants"
                            )
                        }
                    }

                    over "_Joined_Solid_Geometry__47937_"
                    {
                        over "_Joined_Solid_Geometry__47937__Geometry" (
                            prepend apiSchemas = ["MaterialBindingAPI"]
                        )
                        {
                            rel material:binding = </Looks/WallMount> (
                                bindMaterialAs = "weakerThanDescendants"
                            )
                        }
                    }
                }

                over "_Blend__50136_" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = None (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    float3 xformOp:rotateXYZ = (0, 0, 0)
                    float3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "_Blend__50136__Geometry" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = None (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }
                }

                def SphereLight "SphereLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                    float inputs:colorTemperature = 4500
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 0
                    float inputs:intensity = 250
                    float inputs:radius = 0.05
                    float inputs:shaping:cone:angle = 79.4
                    float inputs:shaping:cone:softness = 0.8
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    double3 xformOp:rotateXYZ = (-78.70000117272139, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-0.08876583619075973, -0.2954875439123441, 1.083664418036733)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_01" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                prepend references = @../meshes/WallPack-Base.usd@
            )
            {
                rel material:binding = </Looks/WallMount> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (90, 0, 44.56268314389712)
                double3 xformOp:scale = (0.7000000104308128, 0.7000000104308128, 0.7000000104308128)
                double3 xformOp:translate = (1931.8227935532784, -568.0685379143517, 107.41891573739085)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    prepend references = @../meshes/WallPack-Frame.usd@
                )
                {
                    rel material:binding = None (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 3.183231456205249e-12)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    def Xform "Xform_mesh_1" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                        prepend references = @../meshes/WallPack-Lens.usd@
                    )
                    {
                        rel material:binding = </Looks/LightSource> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                        double3 xformOp:rotateXYZ = (0, 0, 0)
                        double3 xformOp:scale = (1, 1, 1)
                        double3 xformOp:translate = (0, 0, 0)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                        over "_Extrusion__52301_" (
                            prepend apiSchemas = ["MaterialBindingAPI"]
                        )
                        {
                            rel material:binding = None (
                                bindMaterialAs = "weakerThanDescendants"
                            )
                        }
                    }

                    over "_Joined_Solid_Geometry__47937_"
                    {
                        over "_Joined_Solid_Geometry__47937__Geometry" (
                            prepend apiSchemas = ["MaterialBindingAPI"]
                        )
                        {
                            rel material:binding = </Looks/WallMount> (
                                bindMaterialAs = "weakerThanDescendants"
                            )
                        }
                    }
                }

                over "_Blend__50136_" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = None (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    float3 xformOp:rotateXYZ = (0, 0, 0)
                    float3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "_Blend__50136__Geometry" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = None (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }
                }

                def SphereLight "SphereLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                    float inputs:colorTemperature = 4500
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 0
                    float inputs:intensity = 250
                    float inputs:radius = 0.05
                    float inputs:shaping:cone:angle = 79.4
                    float inputs:shaping:cone:softness = 0.8
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    double3 xformOp:rotateXYZ = (-78.70000117272139, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-0.08876583619075973, -0.2954875439123441, 1.083664418036733)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }
        }

        over "mesh_8E1B2F6766527504"
        {
            custom int preserveOriginalDrawCall = 1

            def SphereLight "RedPoleLight" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:intensity = 200
                float inputs:radius = 0.25
                float inputs:shaping:cone:angle = 90
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (0, 0, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, -3.300000049173832, 9.200000137090683)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_844592909579A0AC"
        {
            custom int preserveOriginalDrawCall = 1
            token visibility = "inherited"

            def SphereLight "Highway201EastSign" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:colorTemperature = 4000
                bool inputs:enableColorTemperature = 1
                float inputs:exposure = 0
                float inputs:intensity = 750
                float inputs:radius = 0.05
                float inputs:shaping:cone:angle = 53.100002
                float inputs:shaping:cone:softness = 0.4
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                token visibility = "inherited"
                double3 xformOp:rotateXYZ = (0, -117.80000175535679, 7.600000113248825)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (1502.700022391975, 891.2000132799149, 119.20000177621841)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "Highway201EastSign_01" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:colorTemperature = 4000
                bool inputs:enableColorTemperature = 1
                float inputs:exposure = 0
                float inputs:intensity = 750
                float inputs:radius = 0.05
                float inputs:shaping:cone:angle = 53.100002
                float inputs:shaping:cone:softness = 0.4
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                token visibility = "inherited"
                double3 xformOp:rotateXYZ = (0, -117.80000175535679, -4.90000007301569)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (1502.700022391975, 894.6000133305788, 119.20000177621851)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "Highway201EastSign_03" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:colorTemperature = 4000
                bool inputs:enableColorTemperature = 1
                float inputs:exposure = 0
                float inputs:intensity = 750
                float inputs:radius = 0.05
                float inputs:shaping:cone:angle = 53.100002
                float inputs:shaping:cone:softness = 0.4
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                token visibility = "inherited"
                double3 xformOp:rotateXYZ = (10.000000149011612, -117.80000175535679, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (1547.7000223919756, 893.6000133305788, 132.60000197589397)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "Highway201EastSign_04" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:colorTemperature = 4000
                bool inputs:enableColorTemperature = 1
                float inputs:exposure = 0
                float inputs:intensity = 750
                float inputs:radius = 0.05
                float inputs:shaping:cone:angle = 53.100002
                float inputs:shaping:cone:softness = 0.4
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                token visibility = "inherited"
                double3 xformOp:rotateXYZ = (10.000000149011612, -117.80000175535679, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (1548.8000230789185, 889.1000132486224, 132.60000197589395)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "Highway201EastSign_05" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:colorTemperature = 4000
                bool inputs:enableColorTemperature = 1
                float inputs:exposure = 0
                float inputs:intensity = 750
                float inputs:radius = 0.05
                float inputs:shaping:cone:angle = 53.100002
                float inputs:shaping:cone:softness = 0.4
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                token visibility = "inherited"
                double3 xformOp:rotateXYZ = (10.000000149011612, -117.80000175535679, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (1549.9000230953097, 886.0000132024288, 132.60000197589343)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "Highway201EastSign_06" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:colorTemperature = 4000
                bool inputs:enableColorTemperature = 1
                float inputs:exposure = 0
                float inputs:intensity = 750
                float inputs:radius = 0.05
                float inputs:shaping:cone:angle = 53.100002
                float inputs:shaping:cone:softness = 0.4
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                token visibility = "inherited"
                double3 xformOp:rotateXYZ = (10.000000149011612, -117.80000175535679, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (1551.2000231146812, 881.5000131353736, 132.60000197589372)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_290B4F5D3B41DD2A"
        {
            custom int preserveOriginalDrawCall = 1
            token visibility = "inherited"

            def Xform "Xform_mesh_0" (
                prepend references = @../meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 90)
                double3 xformOp:scale = (0.0025, 0.0025, 0.0025)
                double3 xformOp:translate = (1965.0000000000023, 949.9999999999995, 125.10000000000001)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @../meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, -0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.96401, 1, 0.8880309) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 4.5 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    float inputs:height = 109
                    float inputs:intensity = 15
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 1271
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.1641532182693481e-10, 0, -127.2000018954277)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_01" (
                prepend references = @../meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 90)
                double3 xformOp:scale = (0.0025, 0.0025, 0.0025)
                double3 xformOp:translate = (1973.0000000000023, 949.9999999999995, 125.10000000000001)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @../meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, -0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.96401, 1, 0.8880309) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 4.5 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    float inputs:height = 109
                    float inputs:intensity = 15
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 1271
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.1641532182693481e-10, 0, -127.2000018954277)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_02" (
                prepend references = @../meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 90)
                double3 xformOp:scale = (0.0025, 0.0025, 0.0025)
                double3 xformOp:translate = (1965.0000000000023, 957.9999999999997, 125.10000000000001)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @../meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, -0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.96401, 1, 0.8880309) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 4.5 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    float inputs:height = 109
                    float inputs:intensity = 15
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 1271
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.1641532182693481e-10, 0, -127.2000018954277)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_03" (
                prepend references = @../meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 90)
                double3 xformOp:scale = (0.0025, 0.0025, 0.0025)
                double3 xformOp:translate = (1973.0000000000023, 957.9999999999997, 125.10000000000001)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @../meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, -0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.96401, 1, 0.8880309) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 4.5 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    float inputs:height = 109
                    float inputs:intensity = 15
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 1271
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.1641532182693481e-10, 0, -127.2000018954277)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_04" (
                prepend references = @../meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 90)
                double3 xformOp:scale = (0.0025, 0.0025, 0.0025)
                double3 xformOp:translate = (1965.0000000000023, 966.9999999999993, 125.10000000000001)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @../meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, -0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.96401, 1, 0.8880309) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 4.5 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    float inputs:height = 109
                    float inputs:intensity = 15
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 1271
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.1641532182693481e-10, 0, -127.2000018954277)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_05" (
                prepend references = @../meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 90)
                double3 xformOp:scale = (0.0025, 0.0025, 0.0025)
                double3 xformOp:translate = (1973.0000000000023, 966.9999999999993, 125.10000000000001)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @../meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, -0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.96401, 1, 0.8880309) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 4.5 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    float inputs:height = 109
                    float inputs:intensity = 15
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 1271
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.1641532182693481e-10, 0, -127.2000018954277)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_06" (
                prepend references = @../meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, -1.1000000163912773, 90)
                double3 xformOp:scale = (0.0025, 0.0025, 0.0025)
                double3 xformOp:translate = (1965.0000000000023, 976.9999999999993, 125.1)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @../meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, -0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.96401, 1, 0.8880309) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 4.5 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    float inputs:height = 109
                    float inputs:intensity = 15
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 1271
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.1641532182693481e-10, 0, -127.2000018954277)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_07" (
                prepend references = @../meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, -1.1000000163912773, 90)
                double3 xformOp:scale = (0.0025, 0.0025, 0.0025)
                double3 xformOp:translate = (1973.0000000000023, 976.9999999999993, 125.1)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @../meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, -0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.96401, 1, 0.8880309) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 4.5 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    float inputs:height = 109
                    float inputs:intensity = 15
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 1271
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.1641532182693481e-10, 0, -127.2000018954277)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_08" (
                prepend references = @../meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, -1.700000025331974, 90)
                double3 xformOp:scale = (0.0025, 0.0025, 0.0025)
                double3 xformOp:translate = (1965.0000000000023, 985.9999999999991, 125.3)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @../meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, -0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.96401, 1, 0.8880309) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 4.5 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    float inputs:height = 109
                    float inputs:intensity = 15
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 1271
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.1641532182693481e-10, 0, -127.2000018954277)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_09" (
                prepend references = @../meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, -1.700000025331974, 90)
                double3 xformOp:scale = (0.0025, 0.0025, 0.0025)
                double3 xformOp:translate = (1973.0000000000023, 985.9999999999991, 125.3)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @../meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, -0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.96401, 1, 0.8880309) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 4.5 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    float inputs:height = 109
                    float inputs:intensity = 15
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 1271
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.1641532182693481e-10, 0, -127.2000018954277)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }
        }

        over "mesh_9651245CE1698942"
        {
            over "mesh"
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_60CB88F381A81B66"
        {
            token visibility = "inherited"

            over "mesh"
            {
                token visibility = "inherited"
            }
        }

        over "mesh_D64CA34CD69869C0"
        {
            custom int preserveOriginalDrawCall = 1

            def SphereLight "PoliceCarLightBar" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                color3f inputs:color = (0.22007722, 0.35937166, 1)
                float inputs:exposure = 3
                float inputs:intensity = 5000
                float inputs:radius = 0.01
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (90, 0, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-0.05, -0.5, 1.45)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "PoliceCarLightBar_01" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                color3f inputs:color = (1, 1, 1)
                float inputs:exposure = 0
                float inputs:intensity = 5000
                float inputs:radius = 0.01
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (90, 0, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0.03, -0.36, 1.45)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "PoliceCarLightBar_02" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                color3f inputs:color = (0.22007722, 0.35937166, 1)
                float inputs:exposure = 1
                float inputs:intensity = 5000
                float inputs:radius = 0.01
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (90, 0, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0.1, -0.19, 1.45)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "PoliceCarLightBar_03" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                color3f inputs:color = (1, 1, 1)
                float inputs:exposure = 0
                float inputs:intensity = 5000
                float inputs:radius = 0.01
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (90, 0, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0.2, 0, 1.45)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "PoliceCarLightBar_04" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                color3f inputs:color = (1, 0.20077223, 0.20077223)
                float inputs:exposure = 1
                float inputs:intensity = 5000
                float inputs:radius = 0.01
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (90, 0, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0.1, 0.2, 1.45)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "PoliceCarLightBar_05" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                color3f inputs:color = (1, 1, 1)
                float inputs:exposure = 0
                float inputs:intensity = 5000
                float inputs:radius = 0.01
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (90, 0, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0.02, 0.35, 1.45)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "PoliceCarLightBar_06" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                color3f inputs:color = (1, 0, 0)
                float inputs:exposure = 3
                float inputs:intensity = 5000
                float inputs:radius = 0.01
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (90, 0, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-0.05, 0.5, 1.45)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_EA5FA7241B358CA2"
        {
            custom int preserveOriginalDrawCall = 1

            def SphereLight "HelioSpot" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:colorTemperature = 8000
                bool inputs:enableColorTemperature = 1
                float inputs:exposure = 1.9
                float inputs:intensity = 5000
                float inputs:radius = 0.5
                float inputs:shaping:cone:angle = 54.7
                float inputs:shaping:cone:softness = 0.2
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (2.2000000327825546, 0, 0.30000000447034836)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_0BDC98CEF36F99F3"
        {
            custom int preserveOriginalDrawCall = 1

            def SphereLight "HelioSpot" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:colorTemperature = 85000
                bool inputs:enableColorTemperature = 1
                float inputs:exposure = 1.9
                float inputs:intensity = 5000
                float inputs:radius = 0.5
                float inputs:shaping:cone:angle = 63.600002
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (2.3000000342726707, 0, 0.4000000059604645)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_E06199F33FBD64E5"
        {
            custom int preserveOriginalDrawCall = 1
            token visibility = "inherited"

            def SphereLight "PoliceCarLightBar_07" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                color3f inputs:color = (0.22007722, 0.35937166, 1)
                float inputs:exposure = 3
                float inputs:intensity = 5000
                float inputs:radius = 0.01
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (90, 0, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-0.05, -0.5, 1.45)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "PoliceCarLightBar_08" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                color3f inputs:color = (1, 1, 1)
                float inputs:exposure = 0
                float inputs:intensity = 5000
                float inputs:radius = 0.01
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (90, 0, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0.03, -0.36, 1.45)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "PoliceCarLightBar_09" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                color3f inputs:color = (0.22007722, 0.35937166, 1)
                float inputs:exposure = 1
                float inputs:intensity = 5000
                float inputs:radius = 0.01
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (90, 0, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0.1, -0.19, 1.45)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "PoliceCarLightBar_10" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                color3f inputs:color = (1, 1, 1)
                float inputs:exposure = 0
                float inputs:intensity = 500
                float inputs:radius = 0.01
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (90, 0, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0.2, 0, 1.45)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "PoliceCarLightBar_11" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                color3f inputs:color = (1, 0.20077223, 0.20077223)
                float inputs:exposure = 1
                float inputs:intensity = 5000
                float inputs:radius = 0.01
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (90, 0, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0.1, 0.2, 1.45)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "PoliceCarLightBar_12" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                color3f inputs:color = (1, 1, 1)
                float inputs:exposure = 0
                float inputs:intensity = 500
                float inputs:radius = 0.01
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (90, 0, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0.02, 0.35, 1.45)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "PoliceCarLightBar_13" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                color3f inputs:color = (1, 0, 0)
                float inputs:exposure = 3
                float inputs:intensity = 5000
                float inputs:radius = 0.01
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (90, 0, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-0.05, 0.5, 1.45)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_A36CF88E9D54A927"
        {
            custom int preserveOriginalDrawCall = 1

            def Xform "Xform_mesh_02" (
                prepend references = @../meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (-107.60000160336494, 0, -45)
                double3 xformOp:scale = (0.0025, 0.0025, 0.0025)
                double3 xformOp:translate = (1693.9103159761555, 2127.7584643587816, 142.49751765896147)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @../meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, -0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.97442365, 0.992278, 0.72026354) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 40 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    float inputs:colorTemperature = 4500
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 132
                    float inputs:intensity = 65
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 1162
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-5.820766091346741e-11, 0, -139.55130759751773)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_03" (
                prepend references = @../meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (-107.60000160336494, -1.1000000163912773, -45)
                double3 xformOp:scale = (0.0025, 0.0025, 0.0025)
                double3 xformOp:translate = (1699.7718661874333, 2121.706262949212, 142.5628678900451)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @../meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, -0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.97442365, 0.992278, 0.72026354) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 40 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    float inputs:colorTemperature = 4500
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 132
                    float inputs:intensity = 65
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 1162
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-5.820766091346741e-11, 0, -139.55130759751773)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_04" (
                prepend references = @../meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (-107.60000160336494, -1.600000023841858, -45)
                double3 xformOp:scale = (0.0025, 0.0025, 0.0025)
                double3 xformOp:translate = (1706.2761985057953, 2115.0704385308486, 142.69880460114732)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @../meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, -0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.97442365, 0.992278, 0.72026354) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 40 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    float inputs:colorTemperature = 4500
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 132
                    float inputs:intensity = 65
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 1162
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-5.820766091346741e-11, 0, -139.55130759751773)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_05" (
                prepend references = @../meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (-107.60000160336494, -2.1000000312924385, -45)
                double3 xformOp:scale = (0.0025, 0.0025, 0.0025)
                double3 xformOp:translate = (1710.940999718167, 2110.3320752971363, 142.91160626995546)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @../meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, -0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.97442365, 0.992278, 0.72026354) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 40 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    float inputs:colorTemperature = 4500
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 132
                    float inputs:intensity = 65
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 1162
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-5.820766091346741e-11, 0, -139.55130759751773)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_06" (
                prepend references = @../meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (107.6, -0.6000000089406967, -45)
                double3 xformOp:scale = (0.0025, 0.0025, 0.0025)
                double3 xformOp:translate = (1673.5114557877218, 2107.80925924811, 142.56001578196899)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @../meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, -0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.97442365, 0.992278, 0.72026354) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 40 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    float inputs:colorTemperature = 4500
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 132
                    float inputs:intensity = 65
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 1162
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-5.820766091346741e-11, 0, -139.55130759751773)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_07" (
                prepend references = @../meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (107.6, -0.6000000089406967, -45)
                double3 xformOp:scale = (0.0025, 0.0025, 0.0025)
                double3 xformOp:translate = (1679.8753895464, 2101.311468949673, 142.65407482157423)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @../meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, -0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.97442365, 0.992278, 0.72026354) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 40 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    float inputs:colorTemperature = 4500
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 132
                    float inputs:intensity = 65
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 1162
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-5.820766091346741e-11, 0, -139.55130759751773)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_08" (
                prepend references = @../meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (107.6, -0.6000000089406967, -45)
                double3 xformOp:scale = (0.0025, 0.0025, 0.0025)
                double3 xformOp:translate = (1686.3684285237684, 2094.6632138724362, 142.78923861342642)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @../meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, -0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.97442365, 0.992278, 0.72026354) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 40 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    float inputs:colorTemperature = 4500
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 132
                    float inputs:intensity = 65
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 1162
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-5.820766091346741e-11, 0, -139.55130759751773)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_09" (
                prepend references = @../meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (107.6, -0.6000000089406967, -45)
                double3 xformOp:scale = (0.0025, 0.0025, 0.0025)
                double3 xformOp:translate = (1691.0625065238087, 2089.9480084494785, 142.93562876522398)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @../meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, -0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.97442365, 0.992278, 0.72026354) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 40 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    float inputs:colorTemperature = 4500
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 132
                    float inputs:intensity = 65
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 1162
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-5.820766091346741e-11, 0, -139.55130759751773)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }
        }

        over "mesh_04E069A98F1906B1"
        {
            custom int preserveOriginalDrawCall = 1

            def Xform "Xform_04E069A98F1906B1_0" (
                prepend references = @../meshes/CustomCarLotExteriorTop.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_412DDCF546F5D342"
        {
            custom int preserveOriginalDrawCall = 0
            token visibility = "invisible"

            def Xform "Xform_412DDCF546F5D342_0" (
                prepend references = @../meshes/CustomCarLotExteriorBottom.usd@
            )
            {
                token visibility = "inherited"
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def Xform "Xform_mesh_0" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                prepend references = @../meshes/WallPack-Base.usd@
            )
            {
                rel material:binding = </Looks/WallMount> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                token visibility = "inherited"
                double3 xformOp:rotateXYZ = (90, 0, -20)
                double3 xformOp:scale = (0.35, 0.35, 0.35)
                double3 xformOp:translate = (-2.7183275052872813, 1.817287237351951, 4.2041810258038)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @../meshes/WallPack-Frame.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    def Xform "Xform_mesh_1" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                        prepend references = @../meshes/WallPack-Lens.usd@
                    )
                    {
                        rel material:binding = </Looks/AperturePBR_Opacity> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                        double3 xformOp:rotateXYZ = (0, 0, 0)
                        double3 xformOp:scale = (1, 1, 1)
                        double3 xformOp:translate = (0, 0, 0)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                        over "_Extrusion__52301_"
                        {
                            over "_Extrusion__52301__Geometry" (
                                prepend apiSchemas = ["MaterialBindingAPI"]
                            )
                            {
                                rel material:binding = </Looks/WallMountLens> (
                                    bindMaterialAs = "weakerThanDescendants"
                                )
                            }
                        }
                    }
                }

                def SphereLight "SphereLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                    float inputs:colorTemperature = 4700
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 0
                    float inputs:intensity = 250
                    float inputs:radius = 0.25
                    float inputs:shaping:cone:angle = 83.6
                    float inputs:shaping:cone:softness = 0.3
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    double3 xformOp:rotateXYZ = (-99.00000147521496, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (4.1389114358025836e-13, -0.4353745162898619, 0.9914947654218813)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_01" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                prepend references = @../meshes/WallPack-Base.usd@
            )
            {
                rel material:binding = </Looks/WallMount> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                token visibility = "inherited"
                double3 xformOp:rotateXYZ = (90, 0, -20)
                double3 xformOp:scale = (0.35, 0.35, 0.35)
                double3 xformOp:translate = (3.58929557983639, -0.47849981460329005, 4.2041810258038)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @../meshes/WallPack-Frame.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    def Xform "Xform_mesh_1" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                        prepend references = @../meshes/WallPack-Lens.usd@
                    )
                    {
                        rel material:binding = </Looks/AperturePBR_Opacity> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                        double3 xformOp:rotateXYZ = (0, 0, 0)
                        double3 xformOp:scale = (1, 1, 1)
                        double3 xformOp:translate = (0, 0, 0)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                        over "_Extrusion__52301_"
                        {
                            over "_Extrusion__52301__Geometry" (
                                prepend apiSchemas = ["MaterialBindingAPI"]
                            )
                            {
                                rel material:binding = </Looks/WallMountLens> (
                                    bindMaterialAs = "weakerThanDescendants"
                                )
                            }
                        }
                    }
                }

                def SphereLight "SphereLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                    float inputs:colorTemperature = 4700
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 0
                    float inputs:intensity = 250
                    float inputs:radius = 0.25
                    float inputs:shaping:cone:angle = 83.6
                    float inputs:shaping:cone:softness = 0.3
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    double3 xformOp:rotateXYZ = (-99.00000147521496, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (4.1389114358025836e-13, -0.4353745162898619, 0.9914947654218813)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }
        }

        over "mesh_07F79204C5A05EF1"
        {
            custom int preserveOriginalDrawCall = 0
            token visibility = "invisible"

            def Xform "Xform_07F79204C5A05EF1_0" (
                prepend references = @../meshes/CustomCarLotExteriorRollers.usd@
            )
            {
                token visibility = "inherited"
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (6.115194831111479, -2.1883765417057317, -5.329070518200751e-15)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            over "mesh"
            {
                token visibility = "invisible"
            }
        }

        over "mesh_78C5653B22887E1C"
        {
            def Xform "Xform_78C5653B22887E1C_0" (
                prepend references = @../meshes/CustomCarLotCeiling.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_DA0C213FBEEA94D6"
        {
            def Xform "Xform_DA0C213FBEEA94D6_0" (
                prepend references = @../meshes/CustomMesh_MainMenu-MetalBuildingSide.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_AC9D2059A94662C7"
        {
            def Xform "Xform_AC9D2059A94662C7_0" (
                prepend references = @../meshes/CustomMesh_MainMenu-Roof.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_073F76377E6E3782"
        {
            def Xform "Xform_073F76377E6E3782_0" (
                prepend references = @../meshes/CustomMesh_ChainLinkFence.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_4EDC20DD012BAAF9"
        {
            def Xform "Xform_4EDC20DD012BAAF9_0" (
                prepend references = @../meshes/CustomMesh_MainMenu-RustedMetal.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_B326D7527FD81307"
        {
            def Xform "Xform_B326D7527FD81307_0" (
                prepend references = @../meshes/CustomMesh_MainMenu-MetalSiding.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_2EA0E06E67305C67"
        {
            def Xform "Xform_2EA0E06E67305C67_0" (
                prepend references = @../meshes/CustomMesh_MainMenu-WaterTowers.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_B62FD172DB0C0A68"
        {
            def Xform "Xform_B62FD172DB0C0A68_0" (
                prepend references = @../meshes/CustomMesh_MainMenu-El.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_BAE61863E2F94B05"
        {
            def Xform "Xform_BAE61863E2F94B05_0" (
                prepend references = @../meshes/CustomMesh_MainMenu-Iron.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_62CB9D8014C6800D"
        {
            def Xform "Xform_62CB9D8014C6800D_0" (
                prepend references = @../meshes/CustomMesh_MainMenu-WoodenSupports.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_681926CD80CD9909"
        {
            custom int preserveOriginalDrawCall = 1

            def DistantLight "MainMenuSun" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float inputs:angle = 30
                color3f inputs:color = (1, 0.99367976, 0.7876448)
                float inputs:colorTemperature = 5000
                float inputs:diffuse = 1
                bool inputs:enableColorTemperature = 1
                float inputs:exposure = 0
                float inputs:intensity = 0.6
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (141.4000021070242, -25.00000037252903, -169.00000251829624)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_0B191981BE5A3E1A"
        {
            custom int preserveOriginalDrawCall = 0

            def Xform "Xform_mesh_0" (
                prepend references = @./meshes/4FT_Sealed.usd@
            )
            {
                double3 xformOp:rotateXYZ = (180, 2.7247652308807872e-15, 90)
                double3 xformOp:scale = (0.012500000186264515, 0.012500000186264515, 0.012500000186264515)
                double3 xformOp:translate = (2.0000000298023224, 0.12000001043081279, -1.600000023841858)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                over "RectLight"
                {
                    float inputs:colorTemperature = 6000
                    float inputs:exposure = 1.8000001
                }
            }

            def Xform "Xform_mesh_01" (
                prepend references = @./meshes/4FT_Sealed.usd@
            )
            {
                double3 xformOp:rotateXYZ = (180, 2.7247652308807872e-15, 90)
                double3 xformOp:scale = (0.012500000186264515, 0.012500000186264515, 0.012500000186264515)
                double3 xformOp:translate = (2.0000000298023224, 4.720000078976153, -1.600000023841858)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                over "RectLight"
                {
                    float inputs:colorTemperature = 6000
                    float inputs:exposure = 1.8000001
                }
            }

            def Xform "Xform_mesh_02" (
                prepend references = @./meshes/4FT_Sealed.usd@
            )
            {
                double3 xformOp:rotateXYZ = (180, 2.7247652308807872e-15, 90)
                double3 xformOp:scale = (0.012500000186264515, 0.012500000186264515, 0.012500000186264515)
                double3 xformOp:translate = (2.0000000298023224, -3.8800000491738316, -1.600000023841858)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                over "RectLight"
                {
                    float inputs:colorTemperature = 6000
                    float inputs:exposure = 1.8000001
                }
            }

            def Xform "Xform_mesh_03" (
                prepend references = @./meshes/4FT_Sealed.usd@
            )
            {
                double3 xformOp:rotateXYZ = (180, 2.7247652308807872e-15, 90)
                double3 xformOp:scale = (0.012500000186264515, 0.012500000186264515, 0.012500000186264515)
                double3 xformOp:translate = (-2.0000000298023224, 0.12000001043081279, -1.600000023841858)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                over "RectLight"
                {
                    float inputs:colorTemperature = 6000
                    float inputs:exposure = 1.8000001
                }
            }

            def Xform "Xform_mesh_04" (
                prepend references = @./meshes/4FT_Sealed.usd@
            )
            {
                double3 xformOp:rotateXYZ = (180, 2.7247652308807872e-15, 90)
                double3 xformOp:scale = (0.012500000186264515, 0.012500000186264515, 0.012500000186264515)
                double3 xformOp:translate = (-2.0000000298023224, 4.720000078976153, -1.600000023841858)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                over "RectLight"
                {
                    float inputs:colorTemperature = 6000
                    float inputs:exposure = 1.8000001
                }
            }

            def Xform "Xform_mesh_05" (
                prepend references = @./meshes/4FT_Sealed.usd@
            )
            {
                double3 xformOp:rotateXYZ = (180, 2.7247652308807872e-15, 90)
                double3 xformOp:scale = (0.012500000186264515, 0.012500000186264515, 0.012500000186264515)
                double3 xformOp:translate = (-2.0000000298023224, -3.8800000491738316, -1.600000023841858)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                over "RectLight"
                {
                    float inputs:colorTemperature = 6000
                    float inputs:exposure = 1.8000001
                }
            }
        }

        over "mesh_69A3C87E8E9F3D7C"
        {
            custom int preserveOriginalDrawCall = 1

            def Xform "Xform_mesh_0" (
                prepend references = @./meshes/WallMount_Rect.usd@
            )
            {
                double3 xformOp:rotateXYZ = (90, 0, 0)
                double3 xformOp:scale = (0.01, 0.01, 0.01)
                double3 xformOp:translate = (8.200000122189522, -12.10000018030405, 4.200000062584877)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                over "WallPack_Rect_Source"
                {
                    float inputs:colorTemperature = 6000
                }
            }

            def Xform "Xform_mesh_01" (
                prepend references = @./meshes/WallMount_Rect.usd@
            )
            {
                double3 xformOp:rotateXYZ = (90, 0, 0)
                double3 xformOp:scale = (0.01, 0.01, 0.01)
                double3 xformOp:translate = (-2.2000000327825546, -12.10000018030405, 4.200000062584877)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                over "WallPack_Rect_Source"
                {
                    float inputs:colorTemperature = 6000
                }
            }
        }

        over "mesh_6EA7ADEB552E6C97"
        {
            custom int preserveOriginalDrawCall = 1

            def Xform "Xform_mesh_0" (
                prepend references = @./meshes/WallMount_Rect.usd@
            )
            {
                double3 xformOp:rotateXYZ = (90, 0, 0)
                double3 xformOp:scale = (0.01, 0.01, 0.01)
                double3 xformOp:translate = (0, -6.000000089406967, 4.200000062584877)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def Xform "Xform_mesh_01" (
                prepend references = @./meshes/WallMount_Rect.usd@
            )
            {
                double3 xformOp:rotateXYZ = (90, 0, 0)
                double3 xformOp:scale = (0.01, 0.01, 0.01)
                double3 xformOp:translate = (6.200000092387199, -6.000000089406967, 4.200000062584877)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }
    }
}

