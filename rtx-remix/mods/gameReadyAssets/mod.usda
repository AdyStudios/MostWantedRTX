#usda 1.0
(
    metersPerUnit = 1
    subLayers = [
        @./subusd/ignoredrawcalls.usda@,
        @./subusd/lights.usda@,
        @./subusd/materials.usda@
    ]
    upAxis = "y"
)

over "RootNode"
{
    over "meshes"
    {
        over "mesh_8465F8B75622290B"
        {
            custom int preserveOriginalDrawCall = 1

            def SphereLight "CobraLight_2" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:exposure = 0
                float inputs:intensity = 500
                float inputs:radius = 0.3
                float inputs:shaping:cone:angle = 73
                float inputs:shaping:cone:softness = 0.4
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (0, 5.600000083446503, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, -6.000000089406967, 9.700000144541264)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_76F37F9C0347361D"
        {
            custom int preserveOriginalDrawCall = 1

            def RectLight "WrapLight" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                float inputs:colorTemperature = 5000
                bool inputs:enableColorTemperature = 1
                float inputs:exposure = 0
                float inputs:height = 6.9
                float inputs:intensity = 98
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                float inputs:width = 0.7
                double3 xformOp:rotateXYZ = (0, -68.2000010162592, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0.20000000298023224, 0.10000000149011612)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_2C026CD1A1F246EC"
        {
            custom int preserveOriginalDrawCall = 1

            def SphereLight "M3HeadLightRight" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:colorTemperature = 8000
                bool inputs:enableColorTemperature = 1
                float inputs:exposure = 8.400001
                float inputs:intensity = 500
                float inputs:radius = 0.05
                float inputs:shaping:cone:angle = 55.2
                float inputs:shaping:cone:softness = 1.4
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (0, -75.90000113099813, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (2.6, -0.57, 0.5)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "M3HeadLightLeft" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:colorTemperature = 8000
                bool inputs:enableColorTemperature = 1
                float inputs:exposure = 8.400001
                float inputs:intensity = 500
                float inputs:radius = 0.05
                float inputs:shaping:cone:angle = 55.2
                float inputs:shaping:cone:softness = 1.4
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (0, -75.90000113099813, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (2.6, 0.57, 0.5)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_88CE67E29BA2FB7D"
        {
            custom int preserveOriginalDrawCall = 1

            def SphereLight "M3PlateLight" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:colorTemperature = 4500
                bool inputs:enableColorTemperature = 1
                float inputs:exposure = 0.7
                float inputs:intensity = 174.2
                float inputs:radius = 0.01
                float inputs:shaping:cone:angle = 81.8
                float inputs:shaping:cone:softness = 1
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-2.0000000298023224, -0.10000000149011612, 0.72)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "M3PlateLight_01" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:colorTemperature = 4500
                bool inputs:enableColorTemperature = 1
                float inputs:exposure = 0.7
                float inputs:intensity = 174.2
                float inputs:radius = 0.01
                float inputs:shaping:cone:angle = 81.8
                float inputs:shaping:cone:softness = 1
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-2.0000000298023224, 0.10000000149011612, 0.72)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_4CBF290FA0F08B3A"
        {
            custom int preserveOriginalDrawCall = 1

            def SphereLight "SphereLight" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:colorTemperature = 2700
                bool inputs:enableColorTemperature = 1
                float inputs:intensity = 351
                float inputs:radius = 0.4
                float inputs:shaping:cone:angle = 91.700005
                float inputs:shaping:cone:softness = 0.1
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (0, 0, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, -1.3000000193715096)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_7826CD56A98D0E50"
        {
            custom int preserveOriginalDrawCall = 1

            def SphereLight "CobraHeadLight" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:colorTemperature = 5000
                bool inputs:enableColorTemperature = 1
                float inputs:exposure = 7.4
                float inputs:intensity = 289.6
                float inputs:radius = 0.09
                float inputs:shaping:cone:angle = 63.4
                float inputs:shaping:cone:softness = 0.2
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (-13.800000205636024, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, -2.8000000417232513, 8.200000122189522)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_BE0372587D1551E1"
        {
            custom int preserveOriginalDrawCall = 1

            def Xform "Xform_mesh_0" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 22.47219978962491)
                double3 xformOp:scale = (0.001, 0.001, 0.001)
                double3 xformOp:translate = (2074.8081460815947, -190.96480727351397, 112.47189850721482)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    def RectLight "RectLight" (
                        prepend apiSchemas = ["ShapingAPI"]
                    )
                    {
                        float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                        float inputs:colorTemperature = 4000
                        bool inputs:enableColorTemperature = 1
                        float inputs:exposure = 14.6
                        float inputs:height = 33.4
                        float inputs:intensity = 31.9
                        float inputs:shaping:cone:angle = 180
                        float inputs:shaping:cone:softness
                        float inputs:shaping:focus
                        color3f inputs:shaping:focusTint
                        asset inputs:shaping:ies:file
                        float inputs:width = 1.6
                        double3 xformOp:rotateXYZ = (0, 0, 90)
                        double3 xformOp:scale = (1, 1, 1)
                        double3 xformOp:translate = (-1.073349267244339e-7, -16.930447958409786, -108.29742302320665)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                    }

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                float inputs:emissive_intensity = 4 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }
            }

            def Xform "Xform_mesh_01" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 22.47219978962491)
                double3 xformOp:scale = (0.001, 0.001, 0.001)
                double3 xformOp:translate = (2072.411652019014, -191.9561055951744, 112.4718985072234)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    def RectLight "RectLight" (
                        prepend apiSchemas = ["ShapingAPI"]
                    )
                    {
                        float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                        float inputs:colorTemperature = 4000
                        bool inputs:enableColorTemperature = 1
                        float inputs:exposure = 14.6
                        float inputs:height = 33.4
                        float inputs:intensity = 31.9
                        float inputs:shaping:cone:angle = 180
                        float inputs:shaping:cone:softness
                        float inputs:shaping:focus
                        color3f inputs:shaping:focusTint
                        asset inputs:shaping:ies:file
                        float inputs:width = 1.6
                        double3 xformOp:rotateXYZ = (0, 0, 90)
                        double3 xformOp:scale = (1, 1, 1)
                        double3 xformOp:translate = (-1.073349267244339e-7, -16.930447958409786, -108.29742302320665)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                    }

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                float inputs:emissive_intensity = 4 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }
            }

            def Xform "Xform_mesh_02" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 22.47219978962491)
                double3 xformOp:scale = (0.001, 0.001, 0.001)
                double3 xformOp:translate = (2069.623441303546, -193.10943563921805, 112.47189850723628)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    def RectLight "RectLight" (
                        prepend apiSchemas = ["ShapingAPI"]
                    )
                    {
                        float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                        float inputs:colorTemperature = 4000
                        bool inputs:enableColorTemperature = 1
                        float inputs:exposure = 14.6
                        float inputs:height = 33.4
                        float inputs:intensity = 31.9
                        float inputs:shaping:cone:angle = 180
                        float inputs:shaping:cone:softness
                        float inputs:shaping:focus
                        color3f inputs:shaping:focusTint
                        asset inputs:shaping:ies:file
                        float inputs:width = 1.6
                        double3 xformOp:rotateXYZ = (0, 0, 90)
                        double3 xformOp:scale = (1, 1, 1)
                        double3 xformOp:translate = (-1.073349267244339e-7, -16.930447958409786, -108.29742302320665)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                    }

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                float inputs:emissive_intensity = 4 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }
            }

            def Xform "Xform_mesh_03" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 22.47219978962491)
                double3 xformOp:scale = (0.001, 0.001, 0.001)
                double3 xformOp:translate = (2066.8564567779213, -194.25398557117956, 112.47189850723372)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    def RectLight "RectLight" (
                        prepend apiSchemas = ["ShapingAPI"]
                    )
                    {
                        float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                        float inputs:colorTemperature = 4000
                        bool inputs:enableColorTemperature = 1
                        float inputs:exposure = 14.6
                        float inputs:height = 33.4
                        float inputs:intensity = 31.9
                        float inputs:shaping:cone:angle = 180
                        float inputs:shaping:cone:softness
                        float inputs:shaping:focus
                        color3f inputs:shaping:focusTint
                        asset inputs:shaping:ies:file
                        float inputs:width = 1.6
                        double3 xformOp:rotateXYZ = (0, 0, 90)
                        double3 xformOp:scale = (1, 1, 1)
                        double3 xformOp:translate = (-1.073349267244339e-7, -16.930447958409786, -108.29742302320665)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                    }

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                float inputs:emissive_intensity = 4 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }
            }
        }

        over "mesh_04DF32F622C92CD9"
        {
            custom int preserveOriginalDrawCall = 1

            def SphereLight "SphereLight_01" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:colorTemperature = 2700
                bool inputs:enableColorTemperature = 1
                float inputs:intensity = 351
                float inputs:radius = 0.4
                float inputs:shaping:cone:angle = 91.700005
                float inputs:shaping:cone:softness = 0.1
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (0, 0, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, -1.0000000149011612)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_04BD7732962A6720"
        {
            custom int preserveOriginalDrawCall = 1

            def SphereLight "DoubleHeadPole" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:colorTemperature = 4000
                bool inputs:enableColorTemperature = 1
                float inputs:intensity = 200
                float inputs:radius = 0.2
                float inputs:shaping:cone:angle = 74.3
                float inputs:shaping:cone:softness = 0.2
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (0, -19.80000029504299, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0.800000011920929, 0, 8.300000123679638)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "DoubleHeadPole_01" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:colorTemperature = 4000
                bool inputs:enableColorTemperature = 1
                float inputs:intensity = 200
                float inputs:radius = 0.2
                float inputs:shaping:cone:angle = 74.3
                float inputs:shaping:cone:softness = 0.2
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (-20.000000298023224, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, -0.7000000104308128, 8.300000123679638)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_3A48DA88DF0E979E"
        {
            custom int preserveOriginalDrawCall = 1

            def SphereLight "CurvedDoublePole" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:colorTemperature = 4500
                bool inputs:enableColorTemperature = 1
                float inputs:exposure = 0
                float inputs:intensity = 283.4
                float inputs:radius = 0.5
                float inputs:shaping:cone:angle = 77.9
                float inputs:shaping:cone:softness = 0.3
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, -3.9000000581145287, 10.000000149011612)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "CurvedDoublePole_01" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:colorTemperature = 4500
                bool inputs:enableColorTemperature = 1
                float inputs:exposure = 0
                float inputs:intensity = 283.4
                float inputs:radius = 0.5
                float inputs:shaping:cone:angle = 77.9
                float inputs:shaping:cone:softness = 0.3
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 3.9, 10.000000149011612)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_ED3F11D38E7B5ABE"
        {
            custom int preserveOriginalDrawCall = 1

            def SphereLight "BannerPoleLight" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:colorTemperature = 5000
                bool inputs:enableColorTemperature = 1
                float inputs:exposure = 8.7
                float inputs:intensity = 200
                float inputs:radius = 0.05
                float inputs:shaping:cone:angle = 79.200005
                float inputs:shaping:cone:softness = 0.3
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, -2.8000000417232513, 8.00000011920929)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_5709FF2F177FFFFC"
        {
            custom int preserveOriginalDrawCall = 1

            def SphereLight "BannerPoleLight" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:colorTemperature = 5000
                bool inputs:enableColorTemperature = 1
                float inputs:exposure = 8
                float inputs:intensity = 200
                float inputs:radius = 0.05
                float inputs:shaping:cone:angle = 65.700005
                float inputs:shaping:cone:softness = 0.3
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, -2.8000000417232513, 8.200000122189522)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_689A36E40801EAAF"
        {
            custom int preserveOriginalDrawCall = 1
            token visibility = "invisible"

            def SphereLight "LittleItalyCornerBuilding" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:exposure = 6.6
                float inputs:intensity = 150
                float inputs:radius = 0.05
                float inputs:shaping:cone:angle = 20.800001
                float inputs:shaping:cone:softness = 0.1
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (182.1524042715397, -2.2737367544323206e-13, 45.79499835691411)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (1.565746958418957, -12.491950658879377, 7.289544987730788)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "LittleItalyCornerBuilding_01" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:exposure = 6.6
                float inputs:intensity = 150
                float inputs:radius = 0.05
                float inputs:shaping:cone:angle = 20.800001
                float inputs:shaping:cone:softness = 0.1
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (182.1524042715397, -2.2737367544323206e-13, 45.79499835691411)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (5.0478423688638685, -8.821639345217285, 7.281215020279112)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "LittleItalyCornerBuilding_02" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:exposure = 6.6
                float inputs:intensity = 150
                float inputs:radius = 0.05
                float inputs:shaping:cone:angle = 20.800001
                float inputs:shaping:cone:softness = 0.1
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (181.25622862660714, 1.7479197352285496, -8.491663221566114)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-2.306440612428011, -16.272251157158408, 7.294808527336315)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "LittleItalyCornerBuilding_03" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:exposure = 6.6
                float inputs:intensity = 150
                float inputs:radius = 0.05
                float inputs:shaping:cone:angle = 20.800001
                float inputs:shaping:cone:softness = 0.1
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (180.05939249434277, 2.1515850757112105, -42.623434688847794)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-1.9020482437699862, -16.161177532119527, 7.286823948520674)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "LittleItalyCornerBuilding_04" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:exposure = 6.6
                float inputs:intensity = 150
                float inputs:radius = 0.05
                float inputs:shaping:cone:angle = 20.800001
                float inputs:shaping:cone:softness = 0.1
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (-180, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-7.4054664759277165, -15.305615148959069, 7.418980834599353)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "LittleItalyCornerBuilding_05" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:exposure = 6.6
                float inputs:intensity = 150
                float inputs:radius = 0.05
                float inputs:shaping:cone:angle = 20.800001
                float inputs:shaping:cone:softness = 0.1
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (-180, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-7.672835205774428, -15.177343334322597, 7.418980834599353)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "LittleItalyCornerBuilding_06" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:exposure = 6.6
                float inputs:intensity = 150
                float inputs:radius = 0.05
                float inputs:shaping:cone:angle = 20.800001
                float inputs:shaping:cone:softness = 0.1
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (-180, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-11.330746006952836, -11.726069855606825, 7.418980834599367)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "LittleItalyCornerBuilding_07" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:exposure = 6.6
                float inputs:intensity = 150
                float inputs:radius = 0.05
                float inputs:shaping:cone:angle = 20.800001
                float inputs:shaping:cone:softness = 0.1
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (-180, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-14.961463087818622, -8.256323050483847, 7.418980834599355)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "LittleItalyCornerBuilding_08" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:exposure = 6.6
                float inputs:intensity = 150
                float inputs:radius = 0.05
                float inputs:shaping:cone:angle = 20.800001
                float inputs:shaping:cone:softness = 0.1
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (-180, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-18.42590037492289, -4.967554930265644, 7.418980834599453)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_045BD125FCC78E75" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = None
            custom int preserveOriginalDrawCall = 1
            token visibility = "inherited"

            def Xform "Xform_mesh_0" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, -209.87143030459117)
                double3 xformOp:scale = (0.0025, 0.0025, 0.0025)
                double3 xformOp:translate = (1091.4762684591517, -738.4326928238278, 118.452769506543)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_2" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (1, 0.9499904, 0.73745173) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 40 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    float inputs:exposure = 0
                    float inputs:height = 1032
                    float inputs:intensity = 105.700005
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 79.1
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (5.238689482212067e-10, 1.1641532182693481e-10, -105.3785766454821)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_01" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, -241.86529084606985)
                double3 xformOp:scale = (0.0025, 0.0025, 0.0025)
                double3 xformOp:translate = (1098.487746757688, -746.8826790479961, 118.45276950653806)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_2" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (1, 0.9499904, 0.73745173) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 40 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    float inputs:exposure = 0
                    float inputs:height = 1032
                    float inputs:intensity = 105.700005
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 79.1
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (5.238689482212067e-10, 1.1641532182693481e-10, -105.3785766454821)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_11" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, -238.2757835313044)
                double3 xformOp:scale = (0.0025, 0.0025, 0.0025)
                double3 xformOp:translate = (1103.6578544484428, -756.2664091973398, 118.45276950654143)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_2" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (1, 0.9499904, 0.73745173) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 40 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    float inputs:exposure = 0
                    float inputs:height = 1032
                    float inputs:intensity = 105.700005
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 79.1
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (5.238689482212067e-10, 1.1641532182693481e-10, -105.3785766454821)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_12" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, -234.6995526448116)
                double3 xformOp:scale = (0.0025, 0.0025, 0.0025)
                double3 xformOp:translate = (1109.096786318072, -766.6588226559637, 118.45276950653667)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_2" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (1, 0.9499904, 0.73745173) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 40 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    float inputs:exposure = 0
                    float inputs:height = 1032
                    float inputs:intensity = 105.700005
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 79.1
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (5.238689482212067e-10, 1.1641532182693481e-10, -105.3785766454821)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_14" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, -354.20073440927564)
                double3 xformOp:scale = (0.0025, 0.0025, 0.0025)
                double3 xformOp:translate = (1087.5056802386086, -804.7898571448285, 117.61592508205686)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_2" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (1, 0.9499904, 0.73745173) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 40 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    float inputs:exposure = 0
                    float inputs:height = 1032
                    float inputs:intensity = 105.700005
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 79.1
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (5.238689482212067e-10, 1.1641532182693481e-10, -105.3785766454821)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_17" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, -232.0221278428417)
                double3 xformOp:scale = (0.0025, 0.0025, 0.0025)
                double3 xformOp:translate = (1062.8676312052173, -790.5613922890465, 117.61592508205685)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_2" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (1, 0.9499904, 0.73745173) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 40 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    float inputs:exposure = 0
                    float inputs:height = 1032
                    float inputs:intensity = 105.700005
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 79.1
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (5.238689482212067e-10, 1.1641532182693481e-10, -105.3785766454821)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_18" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, -298.54038071014173)
                double3 xformOp:scale = (0.0025, 0.0025, 0.0025)
                double3 xformOp:translate = (1081.0682212010124, -806.9748682784124, 117.61592508205692)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_2" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (1, 0.9499904, 0.73745173) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 40 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    float inputs:exposure = 0
                    float inputs:height = 1032
                    float inputs:intensity = 105.700005
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 79.1
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (5.238689482212067e-10, 1.1641532182693481e-10, -105.3785766454821)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_19" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, -298.54038071014173)
                double3 xformOp:scale = (0.0025, 0.0025, 0.0025)
                double3 xformOp:translate = (1075.7526197891946, -804.083879611437, 117.61592508205692)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_2" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (1, 0.9499904, 0.73745173) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 40 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    float inputs:exposure = 0
                    float inputs:height = 1032
                    float inputs:intensity = 105.700005
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 79.1
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (5.238689482212067e-10, 1.1641532182693481e-10, -105.3785766454821)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_20" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, -298.54038071014173)
                double3 xformOp:scale = (0.0025, 0.0025, 0.0025)
                double3 xformOp:translate = (1070.0071677737026, -800.9591087009271, 117.61592508205692)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_2" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (1, 0.9499904, 0.73745173) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 40 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    float inputs:exposure = 0
                    float inputs:height = 1032
                    float inputs:intensity = 105.700005
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 79.1
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (5.238689482212067e-10, 1.1641532182693481e-10, -105.3785766454821)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_21" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, -298.54038071014173)
                double3 xformOp:scale = (0.0025, 0.0025, 0.0025)
                double3 xformOp:translate = (1064.7736757004793, -798.1127767245301, 117.61592508205692)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_2" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (1, 0.9499904, 0.73745173) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 40 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    float inputs:exposure = 0
                    float inputs:height = 1032
                    float inputs:intensity = 105.700005
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 79.1
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (5.238689482212067e-10, 1.1641532182693481e-10, -105.3785766454821)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_1" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                prepend references = @./meshes/Highbay-Frame.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, -26.090517307551096)
                double3 xformOp:scale = (0.45, 0.45, 0.45)
                double3 xformOp:translate = (1041.307103727115, -722.1314869498806, 116.83756427220949)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_2" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    prepend references = @./meshes/Highbay-Lens.usd@
                )
                {
                    rel material:binding = None (
                        bindMaterialAs = "strongerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0.22085475846699865)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    def Xform "Xform_mesh_2" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                        prepend references = @./meshes/Highbay-Source.usd@
                    )
                    {
                        rel material:binding = </Looks/LightSource> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                        double3 xformOp:rotateXYZ = (0, 0, 0)
                        double3 xformOp:scale = (0.5, 0.5, 0.1)
                        double3 xformOp:translate = (-3.183231456205249e-12, -7.275957614183426e-12, 0.33963338807291166)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                        over "Looks"
                        {
                            over "AperturePBR_Opacity"
                            {
                                over "Shader"
                                {
                                    color3f inputs:emissive_color_constant = (0.9619982, 0.992278, 0.9041606) (
                                        doc = "The emissive color when no emissive color texture is specified."
                                        hidden = false
                                        renderType = "color"
                                    )
                                    float inputs:emissive_intensity = 5 (
                                        doc = "Intensity of the emission"
                                        hidden = false
                                    )
                                }
                            }
                        }
                    }

                    over "_Joined_Solid_Geometry__12530__001" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </Looks/HighBayLens> (
                            bindMaterialAs = "weakerThanDescendants"
                        )

                        over "_Joined_Solid_Geometry__12530__Geometry_001" (
                            prepend apiSchemas = ["MaterialBindingAPI"]
                        )
                        {
                        }
                    }
                }

                def SphereLight "SphereLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                    color3f inputs:color = (0.95748264, 1, 0.85714287)
                    float inputs:colorTemperature = 5000
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 7.9
                    float inputs:intensity = 67.5
                    float inputs:radius = 0.05
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    double3 xformOp:rotateXYZ = (90, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-9.094947017729282e-13, -8.526512829121202e-13, 0.04838584732260642)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def Xform "Xform_mesh_03" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    prepend references = @./meshes/Rod.usd@
                )
                {
                    rel material:binding = </Looks/MetalRod> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (28.500000424683094, 28.500000424683094, 26.30000039190054)
                    double3 xformOp:translate = (-4.547473508864641e-13, 1.1368683772161603e-12, 2.712877571333138)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_02" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                prepend references = @./meshes/Highbay-Frame.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, -26.090517307551096)
                double3 xformOp:scale = (0.45, 0.45, 0.45)
                double3 xformOp:translate = (1054.7557401356585, -728.717146174866, 116.8375642722095)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_2" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    prepend references = @./meshes/Highbay-Lens.usd@
                )
                {
                    rel material:binding = None (
                        bindMaterialAs = "strongerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0.22085475846699865)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    def Xform "Xform_mesh_2" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                        prepend references = @./meshes/Highbay-Source.usd@
                    )
                    {
                        rel material:binding = </Looks/LightSource> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                        double3 xformOp:rotateXYZ = (0, 0, 0)
                        double3 xformOp:scale = (0.5, 0.5, 0.1)
                        double3 xformOp:translate = (-3.183231456205249e-12, -7.275957614183426e-12, 0.33963338807291166)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                        over "Looks"
                        {
                            over "AperturePBR_Opacity"
                            {
                                over "Shader"
                                {
                                    color3f inputs:emissive_color_constant = (0.9619982, 0.992278, 0.9041606) (
                                        doc = "The emissive color when no emissive color texture is specified."
                                        hidden = false
                                        renderType = "color"
                                    )
                                    float inputs:emissive_intensity = 5 (
                                        doc = "Intensity of the emission"
                                        hidden = false
                                    )
                                }
                            }
                        }
                    }

                    over "_Joined_Solid_Geometry__12530__001" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </Looks/HighBayLens> (
                            bindMaterialAs = "weakerThanDescendants"
                        )

                        over "_Joined_Solid_Geometry__12530__Geometry_001" (
                            prepend apiSchemas = ["MaterialBindingAPI"]
                        )
                        {
                        }
                    }
                }

                def SphereLight "SphereLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                    color3f inputs:color = (0.95748264, 1, 0.85714287)
                    float inputs:colorTemperature = 5000
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 7.9
                    float inputs:intensity = 67.5
                    float inputs:radius = 0.05
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    double3 xformOp:rotateXYZ = (90, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-9.094947017729282e-13, -8.526512829121202e-13, 0.04838584732260642)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def Xform "Xform_mesh_03" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    prepend references = @./meshes/Rod.usd@
                )
                {
                    rel material:binding = </Looks/MetalRod> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (28.500000424683094, 28.500000424683094, 26.30000039190054)
                    double3 xformOp:translate = (-4.547473508864641e-13, 1.1368683772161603e-12, 2.712877571333138)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_03" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                prepend references = @./meshes/Highbay-Frame.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, -26.090517307551096)
                double3 xformOp:scale = (0.45, 0.45, 0.45)
                double3 xformOp:translate = (1069.5629670736978, -735.9680932388239, 116.83756427220943)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_2" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    prepend references = @./meshes/Highbay-Lens.usd@
                )
                {
                    rel material:binding = None (
                        bindMaterialAs = "strongerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0.22085475846699865)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    def Xform "Xform_mesh_2" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                        prepend references = @./meshes/Highbay-Source.usd@
                    )
                    {
                        rel material:binding = </Looks/LightSource> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                        double3 xformOp:rotateXYZ = (0, 0, 0)
                        double3 xformOp:scale = (0.5, 0.5, 0.1)
                        double3 xformOp:translate = (-3.183231456205249e-12, -7.275957614183426e-12, 0.33963338807291166)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                        over "Looks"
                        {
                            over "AperturePBR_Opacity"
                            {
                                over "Shader"
                                {
                                    color3f inputs:emissive_color_constant = (0.9619982, 0.992278, 0.9041606) (
                                        doc = "The emissive color when no emissive color texture is specified."
                                        hidden = false
                                        renderType = "color"
                                    )
                                    float inputs:emissive_intensity = 5 (
                                        doc = "Intensity of the emission"
                                        hidden = false
                                    )
                                }
                            }
                        }
                    }

                    over "_Joined_Solid_Geometry__12530__001" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </Looks/HighBayLens> (
                            bindMaterialAs = "weakerThanDescendants"
                        )

                        over "_Joined_Solid_Geometry__12530__Geometry_001" (
                            prepend apiSchemas = ["MaterialBindingAPI"]
                        )
                        {
                        }
                    }
                }

                def SphereLight "SphereLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                    color3f inputs:color = (0.95748264, 1, 0.85714287)
                    float inputs:colorTemperature = 5000
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 7.9
                    float inputs:intensity = 67.5
                    float inputs:radius = 0.05
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    double3 xformOp:rotateXYZ = (90, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-9.094947017729282e-13, -8.526512829121202e-13, 0.04838584732260642)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def Xform "Xform_mesh_03" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    prepend references = @./meshes/Rod.usd@
                )
                {
                    rel material:binding = </Looks/MetalRod> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (28.500000424683094, 28.500000424683094, 26.30000039190054)
                    double3 xformOp:translate = (-4.547473508864641e-13, 1.1368683772161603e-12, 2.712877571333138)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_04" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                prepend references = @./meshes/Highbay-Frame.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, -26.090517307551096)
                double3 xformOp:scale = (0.45, 0.45, 0.45)
                double3 xformOp:translate = (1083.5078699339458, -742.7967690519872, 116.83756427220943)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_2" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    prepend references = @./meshes/Highbay-Lens.usd@
                )
                {
                    rel material:binding = None (
                        bindMaterialAs = "strongerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0.22085475846699865)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    def Xform "Xform_mesh_2" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                        prepend references = @./meshes/Highbay-Source.usd@
                    )
                    {
                        rel material:binding = </Looks/LightSource> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                        double3 xformOp:rotateXYZ = (0, 0, 0)
                        double3 xformOp:scale = (0.5, 0.5, 0.1)
                        double3 xformOp:translate = (-3.183231456205249e-12, -7.275957614183426e-12, 0.33963338807291166)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                        over "Looks"
                        {
                            over "AperturePBR_Opacity"
                            {
                                over "Shader"
                                {
                                    color3f inputs:emissive_color_constant = (0.9619982, 0.992278, 0.9041606) (
                                        doc = "The emissive color when no emissive color texture is specified."
                                        hidden = false
                                        renderType = "color"
                                    )
                                    float inputs:emissive_intensity = 5 (
                                        doc = "Intensity of the emission"
                                        hidden = false
                                    )
                                }
                            }
                        }
                    }

                    over "_Joined_Solid_Geometry__12530__001" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </Looks/HighBayLens> (
                            bindMaterialAs = "weakerThanDescendants"
                        )

                        over "_Joined_Solid_Geometry__12530__Geometry_001" (
                            prepend apiSchemas = ["MaterialBindingAPI"]
                        )
                        {
                        }
                    }
                }

                def SphereLight "SphereLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                    color3f inputs:color = (0.95748264, 1, 0.85714287)
                    float inputs:colorTemperature = 5000
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 7.9
                    float inputs:intensity = 67.5
                    float inputs:radius = 0.05
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    double3 xformOp:rotateXYZ = (90, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-9.094947017729282e-13, -8.526512829121202e-13, 0.04838584732260642)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def Xform "Xform_mesh_03" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    prepend references = @./meshes/Rod.usd@
                )
                {
                    rel material:binding = </Looks/MetalRod> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (28.500000424683094, 28.500000424683094, 26.30000039190054)
                    double3 xformOp:translate = (-4.547473508864641e-13, 1.1368683772161603e-12, 2.712877571333138)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_05" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                prepend references = @./meshes/Highbay-Frame.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, -26.090517307551096)
                double3 xformOp:scale = (0.45, 0.45, 0.45)
                double3 xformOp:translate = (1045.65885836246, -747.2939736783396, 116.83756427220949)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_2" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    prepend references = @./meshes/Highbay-Lens.usd@
                )
                {
                    rel material:binding = None (
                        bindMaterialAs = "strongerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0.22085475846699865)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    def Xform "Xform_mesh_2" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                        prepend references = @./meshes/Highbay-Source.usd@
                    )
                    {
                        rel material:binding = </Looks/LightSource> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                        double3 xformOp:rotateXYZ = (0, 0, 0)
                        double3 xformOp:scale = (0.5, 0.5, 0.1)
                        double3 xformOp:translate = (-3.183231456205249e-12, -7.275957614183426e-12, 0.33963338807291166)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                        over "Looks"
                        {
                            over "AperturePBR_Opacity"
                            {
                                over "Shader"
                                {
                                    color3f inputs:emissive_color_constant = (0.9619982, 0.992278, 0.9041606) (
                                        doc = "The emissive color when no emissive color texture is specified."
                                        hidden = false
                                        renderType = "color"
                                    )
                                    float inputs:emissive_intensity = 5 (
                                        doc = "Intensity of the emission"
                                        hidden = false
                                    )
                                }
                            }
                        }
                    }

                    over "_Joined_Solid_Geometry__12530__001" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </Looks/HighBayLens> (
                            bindMaterialAs = "weakerThanDescendants"
                        )

                        over "_Joined_Solid_Geometry__12530__Geometry_001" (
                            prepend apiSchemas = ["MaterialBindingAPI"]
                        )
                        {
                        }
                    }
                }

                def SphereLight "SphereLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                    color3f inputs:color = (0.95748264, 1, 0.85714287)
                    float inputs:colorTemperature = 5000
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 7.9
                    float inputs:intensity = 67.5
                    float inputs:radius = 0.05
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    double3 xformOp:rotateXYZ = (90, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-9.094947017729282e-13, -8.526512829121202e-13, 0.04838584732260642)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def Xform "Xform_mesh_03" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    prepend references = @./meshes/Rod.usd@
                )
                {
                    rel material:binding = </Looks/MetalRod> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (28.500000424683094, 28.500000424683094, 26.30000039190054)
                    double3 xformOp:translate = (-4.547473508864641e-13, 1.1368683772161603e-12, 2.712877571333138)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_06" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                prepend references = @./meshes/Highbay-Frame.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, -26.090517307551096)
                double3 xformOp:scale = (0.45, 0.45, 0.45)
                double3 xformOp:translate = (1060.4660853005034, -754.5449207423025, 116.83756427220943)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_2" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    prepend references = @./meshes/Highbay-Lens.usd@
                )
                {
                    rel material:binding = None (
                        bindMaterialAs = "strongerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0.22085475846699865)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    def Xform "Xform_mesh_2" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                        prepend references = @./meshes/Highbay-Source.usd@
                    )
                    {
                        rel material:binding = </Looks/LightSource> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                        double3 xformOp:rotateXYZ = (0, 0, 0)
                        double3 xformOp:scale = (0.5, 0.5, 0.1)
                        double3 xformOp:translate = (-3.183231456205249e-12, -7.275957614183426e-12, 0.33963338807291166)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                        over "Looks"
                        {
                            over "AperturePBR_Opacity"
                            {
                                over "Shader"
                                {
                                    color3f inputs:emissive_color_constant = (0.9619982, 0.992278, 0.9041606) (
                                        doc = "The emissive color when no emissive color texture is specified."
                                        hidden = false
                                        renderType = "color"
                                    )
                                    float inputs:emissive_intensity = 5 (
                                        doc = "Intensity of the emission"
                                        hidden = false
                                    )
                                }
                            }
                        }
                    }

                    over "_Joined_Solid_Geometry__12530__001" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </Looks/HighBayLens> (
                            bindMaterialAs = "weakerThanDescendants"
                        )

                        over "_Joined_Solid_Geometry__12530__Geometry_001" (
                            prepend apiSchemas = ["MaterialBindingAPI"]
                        )
                        {
                        }
                    }
                }

                def SphereLight "SphereLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                    color3f inputs:color = (0.95748264, 1, 0.85714287)
                    float inputs:colorTemperature = 5000
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 7.9
                    float inputs:intensity = 67.5
                    float inputs:radius = 0.05
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    double3 xformOp:rotateXYZ = (90, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-9.094947017729282e-13, -8.526512829121202e-13, 0.04838584732260642)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def Xform "Xform_mesh_03" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    prepend references = @./meshes/Rod.usd@
                )
                {
                    rel material:binding = </Looks/MetalRod> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (28.500000424683094, 28.500000424683094, 26.30000039190054)
                    double3 xformOp:translate = (-4.547473508864641e-13, 1.1368683772161603e-12, 2.712877571333138)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_07" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                prepend references = @./meshes/Highbay-Frame.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, -26.090517307551096)
                double3 xformOp:scale = (0.45, 0.45, 0.45)
                double3 xformOp:translate = (1074.4109881607476, -761.3735965554628, 116.83756427220943)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_2" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    prepend references = @./meshes/Highbay-Lens.usd@
                )
                {
                    rel material:binding = None (
                        bindMaterialAs = "strongerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0.22085475846699865)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    def Xform "Xform_mesh_2" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                        prepend references = @./meshes/Highbay-Source.usd@
                    )
                    {
                        rel material:binding = </Looks/LightSource> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                        double3 xformOp:rotateXYZ = (0, 0, 0)
                        double3 xformOp:scale = (0.5, 0.5, 0.1)
                        double3 xformOp:translate = (-3.183231456205249e-12, -7.275957614183426e-12, 0.33963338807291166)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                        over "Looks"
                        {
                            over "AperturePBR_Opacity"
                            {
                                over "Shader"
                                {
                                    color3f inputs:emissive_color_constant = (0.9619982, 0.992278, 0.9041606) (
                                        doc = "The emissive color when no emissive color texture is specified."
                                        hidden = false
                                        renderType = "color"
                                    )
                                    float inputs:emissive_intensity = 5 (
                                        doc = "Intensity of the emission"
                                        hidden = false
                                    )
                                }
                            }
                        }
                    }

                    over "_Joined_Solid_Geometry__12530__001" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </Looks/HighBayLens> (
                            bindMaterialAs = "weakerThanDescendants"
                        )

                        over "_Joined_Solid_Geometry__12530__Geometry_001" (
                            prepend apiSchemas = ["MaterialBindingAPI"]
                        )
                        {
                        }
                    }
                }

                def SphereLight "SphereLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                    color3f inputs:color = (0.95748264, 1, 0.85714287)
                    float inputs:colorTemperature = 5000
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 7.9
                    float inputs:intensity = 67.5
                    float inputs:radius = 0.05
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    double3 xformOp:rotateXYZ = (90, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-9.094947017729282e-13, -8.526512829121202e-13, 0.04838584732260642)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def Xform "Xform_mesh_03" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    prepend references = @./meshes/Rod.usd@
                )
                {
                    rel material:binding = </Looks/MetalRod> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (28.500000424683094, 28.500000424683094, 26.30000039190054)
                    double3 xformOp:translate = (-4.547473508864641e-13, 1.1368683772161603e-12, 2.712877571333138)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_08" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                prepend references = @./meshes/Highbay-Frame.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, -26.090517307551096)
                double3 xformOp:scale = (0.45, 0.45, 0.45)
                double3 xformOp:translate = (1090.7358405432044, -769.3677092240657, 116.83756427220943)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_2" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    prepend references = @./meshes/Highbay-Lens.usd@
                )
                {
                    rel material:binding = None (
                        bindMaterialAs = "strongerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0.22085475846699865)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    def Xform "Xform_mesh_2" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                        prepend references = @./meshes/Highbay-Source.usd@
                    )
                    {
                        rel material:binding = </Looks/LightSource> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                        double3 xformOp:rotateXYZ = (0, 0, 0)
                        double3 xformOp:scale = (0.5, 0.5, 0.1)
                        double3 xformOp:translate = (-3.183231456205249e-12, -7.275957614183426e-12, 0.33963338807291166)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                        over "Looks"
                        {
                            over "AperturePBR_Opacity"
                            {
                                over "Shader"
                                {
                                    color3f inputs:emissive_color_constant = (0.9619982, 0.992278, 0.9041606) (
                                        doc = "The emissive color when no emissive color texture is specified."
                                        hidden = false
                                        renderType = "color"
                                    )
                                    float inputs:emissive_intensity = 5 (
                                        doc = "Intensity of the emission"
                                        hidden = false
                                    )
                                }
                            }
                        }
                    }

                    over "_Joined_Solid_Geometry__12530__001" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </Looks/HighBayLens> (
                            bindMaterialAs = "weakerThanDescendants"
                        )

                        over "_Joined_Solid_Geometry__12530__Geometry_001" (
                            prepend apiSchemas = ["MaterialBindingAPI"]
                        )
                        {
                        }
                    }
                }

                def SphereLight "SphereLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                    color3f inputs:color = (0.95748264, 1, 0.85714287)
                    float inputs:colorTemperature = 5000
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 7.9
                    float inputs:intensity = 67.5
                    float inputs:radius = 0.05
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    double3 xformOp:rotateXYZ = (90, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-9.094947017729282e-13, -8.526512829121202e-13, 0.04838584732260642)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def Xform "Xform_mesh_03" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    prepend references = @./meshes/Rod.usd@
                )
                {
                    rel material:binding = </Looks/MetalRod> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (28.500000424683094, 28.500000424683094, 26.30000039190054)
                    double3 xformOp:translate = (-4.547473508864641e-13, 1.1368683772161603e-12, 2.712877571333138)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_09" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                prepend references = @./meshes/Highbay-Frame.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, -26.090517307551096)
                double3 xformOp:scale = (0.45, 0.45, 0.45)
                double3 xformOp:translate = (1065.3499419839663, -779.8772438516723, 116.83756427220945)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_2" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    prepend references = @./meshes/Highbay-Lens.usd@
                )
                {
                    rel material:binding = None (
                        bindMaterialAs = "strongerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0.22085475846699865)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    def Xform "Xform_mesh_2" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                        prepend references = @./meshes/Highbay-Source.usd@
                    )
                    {
                        rel material:binding = </Looks/LightSource> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                        double3 xformOp:rotateXYZ = (0, 0, 0)
                        double3 xformOp:scale = (0.5, 0.5, 0.1)
                        double3 xformOp:translate = (-3.183231456205249e-12, -7.275957614183426e-12, 0.33963338807291166)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                        over "Looks"
                        {
                            over "AperturePBR_Opacity"
                            {
                                over "Shader"
                                {
                                    color3f inputs:emissive_color_constant = (0.9619982, 0.992278, 0.9041606) (
                                        doc = "The emissive color when no emissive color texture is specified."
                                        hidden = false
                                        renderType = "color"
                                    )
                                    float inputs:emissive_intensity = 5 (
                                        doc = "Intensity of the emission"
                                        hidden = false
                                    )
                                }
                            }
                        }
                    }

                    over "_Joined_Solid_Geometry__12530__001" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </Looks/HighBayLens> (
                            bindMaterialAs = "weakerThanDescendants"
                        )

                        over "_Joined_Solid_Geometry__12530__Geometry_001" (
                            prepend apiSchemas = ["MaterialBindingAPI"]
                        )
                        {
                        }
                    }
                }

                def SphereLight "SphereLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                    color3f inputs:color = (0.95748264, 1, 0.85714287)
                    float inputs:colorTemperature = 5000
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 7.9
                    float inputs:intensity = 67.5
                    float inputs:radius = 0.05
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    double3 xformOp:rotateXYZ = (90, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-9.094947017729282e-13, -8.526512829121202e-13, 0.04838584732260642)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def Xform "Xform_mesh_03" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    prepend references = @./meshes/Rod.usd@
                )
                {
                    rel material:binding = </Looks/MetalRod> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (28.500000424683094, 28.500000424683094, 26.30000039190054)
                    double3 xformOp:translate = (-4.547473508864641e-13, 1.1368683772161603e-12, 2.712877571333138)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_10" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                prepend references = @./meshes/Highbay-Frame.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, -26.090517307551096)
                double3 xformOp:scale = (0.45, 0.45, 0.45)
                double3 xformOp:translate = (1081.6747943664257, -787.8713565202786, 116.83756427220945)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_2" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    prepend references = @./meshes/Highbay-Lens.usd@
                )
                {
                    rel material:binding = None (
                        bindMaterialAs = "strongerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0.22085475846699865)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    def Xform "Xform_mesh_2" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                        prepend references = @./meshes/Highbay-Source.usd@
                    )
                    {
                        rel material:binding = </Looks/LightSource> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                        double3 xformOp:rotateXYZ = (0, 0, 0)
                        double3 xformOp:scale = (0.5, 0.5, 0.1)
                        double3 xformOp:translate = (-3.183231456205249e-12, -7.275957614183426e-12, 0.33963338807291166)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                        over "Looks"
                        {
                            over "AperturePBR_Opacity"
                            {
                                over "Shader"
                                {
                                    color3f inputs:emissive_color_constant = (0.9619982, 0.992278, 0.9041606) (
                                        doc = "The emissive color when no emissive color texture is specified."
                                        hidden = false
                                        renderType = "color"
                                    )
                                    float inputs:emissive_intensity = 5 (
                                        doc = "Intensity of the emission"
                                        hidden = false
                                    )
                                }
                            }
                        }
                    }

                    over "_Joined_Solid_Geometry__12530__001" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </Looks/HighBayLens> (
                            bindMaterialAs = "weakerThanDescendants"
                        )

                        over "_Joined_Solid_Geometry__12530__Geometry_001" (
                            prepend apiSchemas = ["MaterialBindingAPI"]
                        )
                        {
                        }
                    }
                }

                def SphereLight "SphereLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                    color3f inputs:color = (0.95748264, 1, 0.85714287)
                    float inputs:colorTemperature = 5000
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 7.9
                    float inputs:intensity = 67.5
                    float inputs:radius = 0.05
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    double3 xformOp:rotateXYZ = (90, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-9.094947017729282e-13, -8.526512829121202e-13, 0.04838584732260642)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def Xform "Xform_mesh_03" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    prepend references = @./meshes/Rod.usd@
                )
                {
                    rel material:binding = </Looks/MetalRod> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (28.500000424683094, 28.500000424683094, 26.30000039190054)
                    double3 xformOp:translate = (-4.547473508864641e-13, 1.1368683772161603e-12, 2.712877571333138)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_13" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                prepend references = @./meshes/Highbay-Frame.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, -26.090517307551096)
                double3 xformOp:scale = (0.45, 0.45, 0.45)
                double3 xformOp:translate = (1093.44701258185, -793.636090961268, 116.83756427220943)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_2" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    prepend references = @./meshes/Highbay-Lens.usd@
                )
                {
                    rel material:binding = None (
                        bindMaterialAs = "strongerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0.22085475846699865)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    def Xform "Xform_mesh_2" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                        prepend references = @./meshes/Highbay-Source.usd@
                    )
                    {
                        rel material:binding = </Looks/LightSource> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                        double3 xformOp:rotateXYZ = (0, 0, 0)
                        double3 xformOp:scale = (0.5, 0.5, 0.1)
                        double3 xformOp:translate = (-3.183231456205249e-12, -7.275957614183426e-12, 0.33963338807291166)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                        over "Looks"
                        {
                            over "AperturePBR_Opacity"
                            {
                                over "Shader"
                                {
                                    color3f inputs:emissive_color_constant = (0.9619982, 0.992278, 0.9041606) (
                                        doc = "The emissive color when no emissive color texture is specified."
                                        hidden = false
                                        renderType = "color"
                                    )
                                    float inputs:emissive_intensity = 5 (
                                        doc = "Intensity of the emission"
                                        hidden = false
                                    )
                                }
                            }
                        }
                    }

                    over "_Joined_Solid_Geometry__12530__001" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </Looks/HighBayLens> (
                            bindMaterialAs = "weakerThanDescendants"
                        )

                        over "_Joined_Solid_Geometry__12530__Geometry_001" (
                            prepend apiSchemas = ["MaterialBindingAPI"]
                        )
                        {
                        }
                    }
                }

                def SphereLight "SphereLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                    color3f inputs:color = (0.95748264, 1, 0.85714287)
                    float inputs:colorTemperature = 5000
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 7.9
                    float inputs:intensity = 67.5
                    float inputs:radius = 0.05
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    double3 xformOp:rotateXYZ = (90, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-9.094947017729282e-13, -8.526512829121202e-13, 0.04838584732260642)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def Xform "Xform_mesh_03" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    prepend references = @./meshes/Rod.usd@
                )
                {
                    rel material:binding = </Looks/MetalRod> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (28.500000424683094, 28.500000424683094, 26.30000039190054)
                    double3 xformOp:translate = (-4.547473508864641e-13, 1.1368683772161603e-12, 2.712877571333138)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_15" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                prepend references = @./meshes/Highbay-Frame.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, -26.090517307551096)
                double3 xformOp:scale = (0.45, 0.45, 0.45)
                double3 xformOp:translate = (1102.508058758617, -775.132443665055, 116.83756427220943)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_2" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    prepend references = @./meshes/Highbay-Lens.usd@
                )
                {
                    rel material:binding = None (
                        bindMaterialAs = "strongerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0.22085475846699865)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    def Xform "Xform_mesh_2" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                        prepend references = @./meshes/Highbay-Source.usd@
                    )
                    {
                        rel material:binding = </Looks/LightSource> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                        double3 xformOp:rotateXYZ = (0, 0, 0)
                        double3 xformOp:scale = (0.5, 0.5, 0.1)
                        double3 xformOp:translate = (-3.183231456205249e-12, -7.275957614183426e-12, 0.33963338807291166)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                        over "Looks"
                        {
                            over "AperturePBR_Opacity"
                            {
                                over "Shader"
                                {
                                    color3f inputs:emissive_color_constant = (0.9619982, 0.992278, 0.9041606) (
                                        doc = "The emissive color when no emissive color texture is specified."
                                        hidden = false
                                        renderType = "color"
                                    )
                                    float inputs:emissive_intensity = 5 (
                                        doc = "Intensity of the emission"
                                        hidden = false
                                    )
                                }
                            }
                        }
                    }

                    over "_Joined_Solid_Geometry__12530__001" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </Looks/HighBayLens> (
                            bindMaterialAs = "weakerThanDescendants"
                        )

                        over "_Joined_Solid_Geometry__12530__Geometry_001" (
                            prepend apiSchemas = ["MaterialBindingAPI"]
                        )
                        {
                        }
                    }
                }

                def SphereLight "SphereLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                    color3f inputs:color = (0.95748264, 1, 0.85714287)
                    float inputs:colorTemperature = 5000
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 7.9
                    float inputs:intensity = 67.5
                    float inputs:radius = 0.05
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    double3 xformOp:rotateXYZ = (90, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-9.094947017729282e-13, -8.526512829121202e-13, 0.04838584732260642)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def Xform "Xform_mesh_03" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    prepend references = @./meshes/Rod.usd@
                )
                {
                    rel material:binding = </Looks/MetalRod> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (28.500000424683094, 28.500000424683094, 26.30000039190054)
                    double3 xformOp:translate = (-4.547473508864641e-13, 1.1368683772161603e-12, 2.712877571333138)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_16" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                prepend references = @./meshes/Highbay-Frame.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, -26.090517307551096)
                double3 xformOp:scale = (0.45, 0.45, 0.45)
                double3 xformOp:translate = (1051.0098903382902, -772.8550677337153, 116.83756427220945)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_2" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    prepend references = @./meshes/Highbay-Lens.usd@
                )
                {
                    rel material:binding = None (
                        bindMaterialAs = "strongerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0.22085475846699865)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    def Xform "Xform_mesh_2" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                        prepend references = @./meshes/Highbay-Source.usd@
                    )
                    {
                        rel material:binding = </Looks/LightSource> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                        double3 xformOp:rotateXYZ = (0, 0, 0)
                        double3 xformOp:scale = (0.5, 0.5, 0.1)
                        double3 xformOp:translate = (-3.183231456205249e-12, -7.275957614183426e-12, 0.33963338807291166)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                        over "Looks"
                        {
                            over "AperturePBR_Opacity"
                            {
                                over "Shader"
                                {
                                    color3f inputs:emissive_color_constant = (0.9619982, 0.992278, 0.9041606) (
                                        doc = "The emissive color when no emissive color texture is specified."
                                        hidden = false
                                        renderType = "color"
                                    )
                                    float inputs:emissive_intensity = 5 (
                                        doc = "Intensity of the emission"
                                        hidden = false
                                    )
                                }
                            }
                        }
                    }

                    over "_Joined_Solid_Geometry__12530__001" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </Looks/HighBayLens> (
                            bindMaterialAs = "weakerThanDescendants"
                        )

                        over "_Joined_Solid_Geometry__12530__Geometry_001" (
                            prepend apiSchemas = ["MaterialBindingAPI"]
                        )
                        {
                        }
                    }
                }

                def SphereLight "SphereLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                    color3f inputs:color = (0.95748264, 1, 0.85714287)
                    float inputs:colorTemperature = 5000
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 7.9
                    float inputs:intensity = 67.5
                    float inputs:radius = 0.05
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    double3 xformOp:rotateXYZ = (90, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-9.094947017729282e-13, -8.526512829121202e-13, 0.04838584732260642)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def Xform "Xform_mesh_03" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    prepend references = @./meshes/Rod.usd@
                )
                {
                    rel material:binding = </Looks/MetalRod> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (28.500000424683094, 28.500000424683094, 26.30000039190054)
                    double3 xformOp:translate = (-4.547473508864641e-13, 1.1368683772161603e-12, 2.712877571333138)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }
        }

        over "mesh_8BAC37FB2337DAD0"
        {
            token visibility = "inherited"

            def Xform "Xform_mesh_0" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (0.002, 0.002, 0.002)
                double3 xformOp:translate = (-4.183174643183677, -1.8504092755328498, 5.796968246301571)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.9601484, 1, 0.8030888) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 50 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 1215.8
                    float inputs:intensity = 148
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 115
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.4809758013763636e-14, 0, -116.33826232616593)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            over "mesh"
            {
                token visibility = "invisible"
            }

            def Xform "Xform_mesh_01" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (0.002, 0.002, 0.002)
                double3 xformOp:translate = (-4.183174643183624, 1.512473231442714, 5.645275424235391)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.9601484, 1, 0.8030888) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 50 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 1215.8
                    float inputs:intensity = 148
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 115
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.4809758013763636e-14, 0, -116.33826232616593)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_02" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (0.002, 0.002, 0.002)
                double3 xformOp:translate = (-4.183174643183677, 3.9120513727938486, 5.501579988642072)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.9601484, 1, 0.8030888) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 50 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 1215.8
                    float inputs:intensity = 148
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 115
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.4809758013763636e-14, 0, -116.33826232616593)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_03" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (0.002, 0.002, 0.002)
                double3 xformOp:translate = (0.4027909166114439, -1.8504092755328498, 5.796968246301571)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.9601484, 1, 0.8030888) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 50 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 1215.8
                    float inputs:intensity = 148
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 115
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.4809758013763636e-14, 0, -116.33826232616593)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_04" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (0.002, 0.002, 0.002)
                double3 xformOp:translate = (0.4027909166114725, 1.512473231442714, 5.645275424235391)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.9601484, 1, 0.8030888) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 50 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 1215.8
                    float inputs:intensity = 148
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 115
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.4809758013763636e-14, 0, -116.33826232616593)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_05" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (0.002, 0.002, 0.002)
                double3 xformOp:translate = (0.4027909166114439, 3.9120513727938486, 5.501579988642072)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.9601484, 1, 0.8030888) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 50 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 1215.8
                    float inputs:intensity = 148
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 115
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.4809758013763636e-14, 0, -116.33826232616593)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_06" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (0.002, 0.002, 0.002)
                double3 xformOp:translate = (4.461390640323624, -1.8504092755328498, 5.796968246301571)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.9601484, 1, 0.8030888) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 50 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 1215.8
                    float inputs:intensity = 148
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 115
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.4809758013763636e-14, 0, -116.33826232616593)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_07" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (0.002, 0.002, 0.002)
                double3 xformOp:translate = (4.461390640323659, 1.512473231442714, 5.645275424235391)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.9601484, 1, 0.8030888) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 50 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 1215.8
                    float inputs:intensity = 148
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 115
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.4809758013763636e-14, 0, -116.33826232616593)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_08" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (0.002, 0.002, 0.002)
                double3 xformOp:translate = (4.461390640323624, 3.9120513727938486, 5.501579988642072)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.9601484, 1, 0.8030888) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 50 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 1215.8
                    float inputs:intensity = 148
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 115
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.4809758013763636e-14, 0, -116.33826232616593)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_09" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (0.002, 0.002, 0.002)
                double3 xformOp:translate = (0.40279091661143873, -6.393295885135925, 5.388195540969945)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.9601484, 1, 0.8030888) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 50 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 1215.8
                    float inputs:intensity = 148
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 115
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.4809758013763636e-14, 0, -116.33826232616593)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_10" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (0.002, 0.002, 0.002)
                double3 xformOp:translate = (-4.183174643183676, -6.393295885135925, 5.388195540969945)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.9601484, 1, 0.8030888) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 50 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 1215.8
                    float inputs:intensity = 148
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 115
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.4809758013763636e-14, 0, -116.33826232616593)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_11" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (0.002, 0.002, 0.002)
                double3 xformOp:translate = (4.461390640323615, -6.393295885135925, 5.388195540969945)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.9601484, 1, 0.8030888) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 50 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 1215.8
                    float inputs:intensity = 148
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 115
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.4809758013763636e-14, 0, -116.33826232616593)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_12" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 45)
                double3 xformOp:scale = (0.002, 0.002, 0.002)
                double3 xformOp:translate = (-0.18792574514478724, 9.716482193954825, 5.286145246832589)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.9601484, 1, 0.8030888) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 50 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 1215.8
                    float inputs:intensity = 25
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 115
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.4809758013763636e-14, 0, -116.33826232616593)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_13" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 45)
                double3 xformOp:scale = (0.002, 0.002, 0.002)
                double3 xformOp:translate = (-4.344549930721244, 9.28714081973612, 5.3242971453124355)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.9601484, 1, 0.8030888) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 50 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 1215.8
                    float inputs:intensity = 25
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 115
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.4809758013763636e-14, 0, -116.33826232616593)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_14" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 45)
                double3 xformOp:scale = (0.002, 0.002, 0.002)
                double3 xformOp:translate = (3.911807995122173, 9.675348177400068, 5.304140901709991)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.9601484, 1, 0.8030888) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 50 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 1215.8
                    float inputs:intensity = 25
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 115
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.4809758013763636e-14, 0, -116.33826232616593)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_15" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 45)
                double3 xformOp:scale = (0.002, 0.002, 0.002)
                double3 xformOp:translate = (-0.6247607290475936, 13.006930021409888, 5.3242971453124355)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.9601484, 1, 0.8030888) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 50 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 1215.8
                    float inputs:intensity = 25
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 115
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.4809758013763636e-14, 0, -116.33826232616593)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_16" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 45)
                double3 xformOp:scale = (0.002, 0.002, 0.002)
                double3 xformOp:translate = (3.5318634565289257, 13.436271395628603, 5.286145246832589)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.9601484, 1, 0.8030888) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 50 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 1215.8
                    float inputs:intensity = 25
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 115
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.4809758013763636e-14, 0, -116.33826232616593)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_17" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 45)
                double3 xformOp:scale = (0.002, 0.002, 0.002)
                double3 xformOp:translate = (3.1779284995332944, 16.809619249990853, 5.324297145312433)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.9601484, 1, 0.8030888) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 50 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 1215.8
                    float inputs:intensity = 25
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 115
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.4809758013763636e-14, 0, -116.33826232616593)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_18" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 45)
                double3 xformOp:scale = (0.002, 0.002, 0.002)
                double3 xformOp:translate = (1.1555538270231436, 18.83199392250135, 5.32429714531243)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.9601484, 1, 0.8030888) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 50 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 1215.8
                    float inputs:intensity = 25
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 115
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.4809758013763636e-14, 0, -116.33826232616593)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_19" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 45)
                double3 xformOp:scale = (0.002, 0.002, 0.002)
                double3 xformOp:translate = (-2.6471354015578905, 15.029304693920256, 5.324297145312433)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.9601484, 1, 0.8030888) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 50 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 1215.8
                    float inputs:intensity = 25
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 115
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.4809758013763636e-14, 0, -116.33826232616593)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_20" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 45)
                double3 xformOp:scale = (0.002, 0.002, 0.002)
                double3 xformOp:translate = (-6.36692460323164, 11.309515492246405, 5.324297145312433)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.9601484, 1, 0.8030888) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 50 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 1215.8
                    float inputs:intensity = 25
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 115
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.4809758013763636e-14, 0, -116.33826232616593)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_22" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 45)
                double3 xformOp:scale = (0.002, 0.002, 0.002)
                double3 xformOp:translate = (-2.0064960814284354, 19.53489008355621, 5.324297145312433)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.9601484, 1, 0.8030888) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 50 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 1215.8
                    float inputs:intensity = 25
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 115
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.4809758013763636e-14, 0, -116.33826232616593)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_23" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 45)
                double3 xformOp:scale = (0.002, 0.002, 0.002)
                double3 xformOp:translate = (-5.726285283102702, 15.815100881881907, 5.324297145312433)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.9601484, 1, 0.8030888) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 50 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 1215.8
                    float inputs:intensity = 25
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 115
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.4809758013763636e-14, 0, -116.33826232616593)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_24" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 45)
                double3 xformOp:scale = (0.002, 0.002, 0.002)
                double3 xformOp:translate = (-5.983093516605107, 19.769928377384435, 5.324297145312433)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.9601484, 1, 0.8030888) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 50 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 1215.8
                    float inputs:intensity = 25
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 115
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.4809758013763636e-14, 0, -116.33826232616593)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_21" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (0.002, 0.002, 0.002)
                double3 xformOp:translate = (0.40279091661143873, -10.4151643399259, 6.248701749129185)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.9601484, 1, 0.8030888) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 50 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 1215.8
                    float inputs:intensity = 10
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 115
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.4809758013763636e-14, 0, -116.33826232616593)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_25" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (0.002, 0.002, 0.002)
                double3 xformOp:translate = (-4.183174643183676, -10.4151643399259, 6.248701749129185)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.9601484, 1, 0.8030888) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 50 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 1215.8
                    float inputs:intensity = 10
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 115
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.4809758013763636e-14, 0, -116.33826232616593)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_26" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (0.002, 0.002, 0.002)
                double3 xformOp:translate = (4.461390640323615, -10.4151643399259, 6.248701749129185)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.9601484, 1, 0.8030888) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 50 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 1215.8
                    float inputs:intensity = 10
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 115
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.4809758013763636e-14, 0, -116.33826232616593)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_27" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (0.002, 0.002, 0.002)
                double3 xformOp:translate = (0.40279091661143873, -13.430673552489424, 6.401556114068649)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.9601484, 1, 0.8030888) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 50 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 1215.8
                    float inputs:intensity = 10
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 115
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.4809758013763636e-14, 0, -116.33826232616593)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_28" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (0.002, 0.002, 0.002)
                double3 xformOp:translate = (-4.183174643183676, -13.430673552489424, 6.401556114068649)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.9601484, 1, 0.8030888) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 50 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 1215.8
                    float inputs:intensity = 10
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 115
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.4809758013763636e-14, 0, -116.33826232616593)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_29" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (0.002, 0.002, 0.002)
                double3 xformOp:translate = (4.461390640323615, -13.430673552489424, 6.401556114068649)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.9601484, 1, 0.8030888) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 50 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 1215.8
                    float inputs:intensity = 10
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 115
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.4809758013763636e-14, 0, -116.33826232616593)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_30" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (0.002, 0.002, 0.002)
                double3 xformOp:translate = (0.40279091661143873, -16.659799886235877, 6.556101663223498)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.9601484, 1, 0.8030888) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 50 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 1215.8
                    float inputs:intensity = 10
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 115
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.4809758013763636e-14, 0, -116.33826232616593)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_31" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (0.002, 0.002, 0.002)
                double3 xformOp:translate = (-4.183174643183676, -16.659799886235877, 6.556101663223498)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.9601484, 1, 0.8030888) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 50 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 1215.8
                    float inputs:intensity = 10
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 115
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.4809758013763636e-14, 0, -116.33826232616593)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_32" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (0.002, 0.002, 0.002)
                double3 xformOp:translate = (4.461390640323615, -16.659799886235877, 6.556101663223498)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.9601484, 1, 0.8030888) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 50 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 1215.8
                    float inputs:intensity = 10
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 115
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.4809758013763636e-14, 0, -116.33826232616593)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_33" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (0.002, 0.002, 0.002)
                double3 xformOp:translate = (0.40279091661143873, -19.489351816949608, 6.781937382711116)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.9601484, 1, 0.8030888) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 50 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 1215.8
                    float inputs:intensity = 10
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 115
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.4809758013763636e-14, 0, -116.33826232616593)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_34" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (0.002, 0.002, 0.002)
                double3 xformOp:translate = (-4.183174643183676, -19.489351816949608, 6.781937382711116)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.9601484, 1, 0.8030888) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 50 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 1215.8
                    float inputs:intensity = 10
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 115
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.4809758013763636e-14, 0, -116.33826232616593)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_35" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (0.002, 0.002, 0.002)
                double3 xformOp:translate = (4.461390640323615, -19.489351816949608, 6.781937382711116)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.9601484, 1, 0.8030888) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 50 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 1215.8
                    float inputs:intensity = 10
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 115
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.4809758013763636e-14, 0, -116.33826232616593)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }
        }

        over "mesh_A2721FE40B34519E"
        {
            custom int preserveOriginalDrawCall = 1

            def SphereLight "HighwayPole" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:colorTemperature = 5000
                bool inputs:enableColorTemperature = 1
                float inputs:exposure = 9.1
                float inputs:intensity = 300
                float inputs:radius = 0.025
                float inputs:shaping:cone:angle = 90
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, -6.000000089406967, 12.800000190734863)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_82266CE244131204" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/Looks/mat_F5F58B17A49A6BB1> (
                bindMaterialAs = "weakerThanDescendants"
            )
            custom int preserveOriginalDrawCall = 1
            token visibility = "inherited"

            def Xform "Xform_mesh_0" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                prepend references = @./meshes/WallPack-Base.usd@
            )
            {
                rel material:binding = </Looks/WallMount> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (90, 0, 35)
                double3 xformOp:scale = (0.7000000104308128, 0.7000000104308128, 0.7000000104308128)
                double3 xformOp:translate = (1960.2605513964518, -558.7700049241218, 112.85025155979336)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    prepend references = @./meshes/WallPack-Frame.usd@
                )
                {
                    rel material:binding = None (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 3.183231456205249e-12)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    def Xform "Xform_mesh_1" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                        prepend references = @./meshes/WallPack-Lens.usd@
                    )
                    {
                        rel material:binding = </Looks/LightSource> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                        double3 xformOp:rotateXYZ = (0, 0, 0)
                        double3 xformOp:scale = (1, 1, 1)
                        double3 xformOp:translate = (0, 0, 0)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                        over "_Extrusion__52301_" (
                            prepend apiSchemas = ["MaterialBindingAPI"]
                        )
                        {
                            rel material:binding = None (
                                bindMaterialAs = "weakerThanDescendants"
                            )
                        }
                    }

                    over "_Joined_Solid_Geometry__47937_"
                    {
                        over "_Joined_Solid_Geometry__47937__Geometry" (
                            prepend apiSchemas = ["MaterialBindingAPI"]
                        )
                        {
                            rel material:binding = </Looks/WallMount> (
                                bindMaterialAs = "weakerThanDescendants"
                            )
                        }
                    }
                }

                over "_Blend__50136_" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = None (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    float3 xformOp:rotateXYZ = (0, 0, 0)
                    float3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "_Blend__50136__Geometry" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = None (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }
                }

                def SphereLight "SphereLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                    float inputs:colorTemperature = 4500
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 0
                    float inputs:intensity = 250
                    float inputs:radius = 0.05
                    float inputs:shaping:cone:angle = 79.4
                    float inputs:shaping:cone:softness = 0.8
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    double3 xformOp:rotateXYZ = (-78.70000117272139, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-0.08876583619075973, -0.2954875439123441, 1.083664418036733)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_01" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                prepend references = @./meshes/WallPack-Base.usd@
            )
            {
                rel material:binding = </Looks/WallMount> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (90, 0, 44.56268314389712)
                double3 xformOp:scale = (0.7000000104308128, 0.7000000104308128, 0.7000000104308128)
                double3 xformOp:translate = (1931.8227935532784, -568.0685379143517, 107.41891573739085)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    prepend references = @./meshes/WallPack-Frame.usd@
                )
                {
                    rel material:binding = None (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 3.183231456205249e-12)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    def Xform "Xform_mesh_1" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                        prepend references = @./meshes/WallPack-Lens.usd@
                    )
                    {
                        rel material:binding = </Looks/LightSource> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                        double3 xformOp:rotateXYZ = (0, 0, 0)
                        double3 xformOp:scale = (1, 1, 1)
                        double3 xformOp:translate = (0, 0, 0)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                        over "_Extrusion__52301_" (
                            prepend apiSchemas = ["MaterialBindingAPI"]
                        )
                        {
                            rel material:binding = None (
                                bindMaterialAs = "weakerThanDescendants"
                            )
                        }
                    }

                    over "_Joined_Solid_Geometry__47937_"
                    {
                        over "_Joined_Solid_Geometry__47937__Geometry" (
                            prepend apiSchemas = ["MaterialBindingAPI"]
                        )
                        {
                            rel material:binding = </Looks/WallMount> (
                                bindMaterialAs = "weakerThanDescendants"
                            )
                        }
                    }
                }

                over "_Blend__50136_" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = None (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    float3 xformOp:rotateXYZ = (0, 0, 0)
                    float3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "_Blend__50136__Geometry" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = None (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }
                }

                def SphereLight "SphereLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                    float inputs:colorTemperature = 4500
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 0
                    float inputs:intensity = 250
                    float inputs:radius = 0.05
                    float inputs:shaping:cone:angle = 79.4
                    float inputs:shaping:cone:softness = 0.8
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    double3 xformOp:rotateXYZ = (-78.70000117272139, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-0.08876583619075973, -0.2954875439123441, 1.083664418036733)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }
        }

        over "mesh_8E1B2F6766527504"
        {
            custom int preserveOriginalDrawCall = 1

            def SphereLight "RedPoleLight" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:intensity = 200
                float inputs:radius = 0.25
                float inputs:shaping:cone:angle = 90
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (0, 0, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, -3.300000049173832, 9.200000137090683)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_844592909579A0AC"
        {
            custom int preserveOriginalDrawCall = 1
            token visibility = "inherited"

            def SphereLight "Highway201EastSign" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:colorTemperature = 4000
                bool inputs:enableColorTemperature = 1
                float inputs:exposure = 0
                float inputs:intensity = 750
                float inputs:radius = 0.05
                float inputs:shaping:cone:angle = 53.100002
                float inputs:shaping:cone:softness = 0.4
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                token visibility = "inherited"
                double3 xformOp:rotateXYZ = (0, -117.80000175535679, 7.600000113248825)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (1502.700022391975, 891.2000132799149, 119.20000177621841)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "Highway201EastSign_01" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:colorTemperature = 4000
                bool inputs:enableColorTemperature = 1
                float inputs:exposure = 0
                float inputs:intensity = 750
                float inputs:radius = 0.05
                float inputs:shaping:cone:angle = 53.100002
                float inputs:shaping:cone:softness = 0.4
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                token visibility = "inherited"
                double3 xformOp:rotateXYZ = (0, -117.80000175535679, -4.90000007301569)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (1502.700022391975, 894.6000133305788, 119.20000177621851)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "Highway201EastSign_03" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:colorTemperature = 4000
                bool inputs:enableColorTemperature = 1
                float inputs:exposure = 0
                float inputs:intensity = 750
                float inputs:radius = 0.05
                float inputs:shaping:cone:angle = 53.100002
                float inputs:shaping:cone:softness = 0.4
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                token visibility = "inherited"
                double3 xformOp:rotateXYZ = (10.000000149011612, -117.80000175535679, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (1547.7000223919756, 893.6000133305788, 132.60000197589397)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "Highway201EastSign_04" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:colorTemperature = 4000
                bool inputs:enableColorTemperature = 1
                float inputs:exposure = 0
                float inputs:intensity = 750
                float inputs:radius = 0.05
                float inputs:shaping:cone:angle = 53.100002
                float inputs:shaping:cone:softness = 0.4
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                token visibility = "inherited"
                double3 xformOp:rotateXYZ = (10.000000149011612, -117.80000175535679, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (1548.8000230789185, 889.1000132486224, 132.60000197589395)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "Highway201EastSign_05" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:colorTemperature = 4000
                bool inputs:enableColorTemperature = 1
                float inputs:exposure = 0
                float inputs:intensity = 750
                float inputs:radius = 0.05
                float inputs:shaping:cone:angle = 53.100002
                float inputs:shaping:cone:softness = 0.4
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                token visibility = "inherited"
                double3 xformOp:rotateXYZ = (10.000000149011612, -117.80000175535679, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (1549.9000230953097, 886.0000132024288, 132.60000197589343)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "Highway201EastSign_06" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:colorTemperature = 4000
                bool inputs:enableColorTemperature = 1
                float inputs:exposure = 0
                float inputs:intensity = 750
                float inputs:radius = 0.05
                float inputs:shaping:cone:angle = 53.100002
                float inputs:shaping:cone:softness = 0.4
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                token visibility = "inherited"
                double3 xformOp:rotateXYZ = (10.000000149011612, -117.80000175535679, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (1551.2000231146812, 881.5000131353736, 132.60000197589372)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_290B4F5D3B41DD2A"
        {
            custom int preserveOriginalDrawCall = 1
            token visibility = "inherited"

            def Xform "Xform_mesh_0" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 90)
                double3 xformOp:scale = (0.0025, 0.0025, 0.0025)
                double3 xformOp:translate = (1965.0000000000023, 949.9999999999995, 125.10000000000001)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, -0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.96401, 1, 0.8880309) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 4.5 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    float inputs:height = 109
                    float inputs:intensity = 15
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 1271
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.1641532182693481e-10, 0, -127.2000018954277)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_01" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 90)
                double3 xformOp:scale = (0.0025, 0.0025, 0.0025)
                double3 xformOp:translate = (1973.0000000000023, 949.9999999999995, 125.10000000000001)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, -0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.96401, 1, 0.8880309) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 4.5 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    float inputs:height = 109
                    float inputs:intensity = 15
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 1271
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.1641532182693481e-10, 0, -127.2000018954277)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_02" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 90)
                double3 xformOp:scale = (0.0025, 0.0025, 0.0025)
                double3 xformOp:translate = (1965.0000000000023, 957.9999999999997, 125.10000000000001)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, -0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.96401, 1, 0.8880309) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 4.5 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    float inputs:height = 109
                    float inputs:intensity = 15
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 1271
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.1641532182693481e-10, 0, -127.2000018954277)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_03" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 90)
                double3 xformOp:scale = (0.0025, 0.0025, 0.0025)
                double3 xformOp:translate = (1973.0000000000023, 957.9999999999997, 125.10000000000001)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, -0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.96401, 1, 0.8880309) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 4.5 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    float inputs:height = 109
                    float inputs:intensity = 15
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 1271
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.1641532182693481e-10, 0, -127.2000018954277)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_04" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 90)
                double3 xformOp:scale = (0.0025, 0.0025, 0.0025)
                double3 xformOp:translate = (1965.0000000000023, 966.9999999999993, 125.10000000000001)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, -0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.96401, 1, 0.8880309) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 4.5 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    float inputs:height = 109
                    float inputs:intensity = 15
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 1271
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.1641532182693481e-10, 0, -127.2000018954277)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_05" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 90)
                double3 xformOp:scale = (0.0025, 0.0025, 0.0025)
                double3 xformOp:translate = (1973.0000000000023, 966.9999999999993, 125.10000000000001)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, -0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.96401, 1, 0.8880309) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 4.5 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    float inputs:height = 109
                    float inputs:intensity = 15
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 1271
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.1641532182693481e-10, 0, -127.2000018954277)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_06" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, -1.1000000163912773, 90)
                double3 xformOp:scale = (0.0025, 0.0025, 0.0025)
                double3 xformOp:translate = (1965.0000000000023, 976.9999999999993, 125.1)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, -0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.96401, 1, 0.8880309) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 4.5 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    float inputs:height = 109
                    float inputs:intensity = 15
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 1271
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.1641532182693481e-10, 0, -127.2000018954277)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_07" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, -1.1000000163912773, 90)
                double3 xformOp:scale = (0.0025, 0.0025, 0.0025)
                double3 xformOp:translate = (1973.0000000000023, 976.9999999999993, 125.1)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, -0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.96401, 1, 0.8880309) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 4.5 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    float inputs:height = 109
                    float inputs:intensity = 15
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 1271
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.1641532182693481e-10, 0, -127.2000018954277)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_08" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, -1.700000025331974, 90)
                double3 xformOp:scale = (0.0025, 0.0025, 0.0025)
                double3 xformOp:translate = (1965.0000000000023, 985.9999999999991, 125.3)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, -0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.96401, 1, 0.8880309) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 4.5 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    float inputs:height = 109
                    float inputs:intensity = 15
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 1271
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.1641532182693481e-10, 0, -127.2000018954277)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_09" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, -1.700000025331974, 90)
                double3 xformOp:scale = (0.0025, 0.0025, 0.0025)
                double3 xformOp:translate = (1973.0000000000023, 985.9999999999991, 125.3)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, -0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.96401, 1, 0.8880309) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 4.5 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    float inputs:height = 109
                    float inputs:intensity = 15
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 1271
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.1641532182693481e-10, 0, -127.2000018954277)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }
        }

        over "mesh_9651245CE1698942"
        {
            over "mesh"
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_60CB88F381A81B66"
        {
            token visibility = "inherited"

            over "mesh"
            {
                token visibility = "inherited"
            }
        }

        over "mesh_D64CA34CD69869C0"
        {
            custom int preserveOriginalDrawCall = 1

            def SphereLight "PoliceCarLightBar" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                color3f inputs:color = (0.22007722, 0.35937166, 1)
                float inputs:exposure = 3
                float inputs:intensity = 5000
                float inputs:radius = 0.01
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (90, 0, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-0.05, -0.5, 1.45)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "PoliceCarLightBar_01" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                color3f inputs:color = (1, 1, 1)
                float inputs:exposure = 0
                float inputs:intensity = 5000
                float inputs:radius = 0.01
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (90, 0, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0.03, -0.36, 1.45)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "PoliceCarLightBar_02" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                color3f inputs:color = (0.22007722, 0.35937166, 1)
                float inputs:exposure = 1
                float inputs:intensity = 5000
                float inputs:radius = 0.01
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (90, 0, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0.1, -0.19, 1.45)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "PoliceCarLightBar_03" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                color3f inputs:color = (1, 1, 1)
                float inputs:exposure = 0
                float inputs:intensity = 5000
                float inputs:radius = 0.01
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (90, 0, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0.2, 0, 1.45)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "PoliceCarLightBar_04" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                color3f inputs:color = (1, 0.20077223, 0.20077223)
                float inputs:exposure = 1
                float inputs:intensity = 5000
                float inputs:radius = 0.01
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (90, 0, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0.1, 0.2, 1.45)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "PoliceCarLightBar_05" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                color3f inputs:color = (1, 1, 1)
                float inputs:exposure = 0
                float inputs:intensity = 5000
                float inputs:radius = 0.01
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (90, 0, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0.02, 0.35, 1.45)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "PoliceCarLightBar_06" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                color3f inputs:color = (1, 0, 0)
                float inputs:exposure = 3
                float inputs:intensity = 5000
                float inputs:radius = 0.01
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (90, 0, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-0.05, 0.5, 1.45)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_EA5FA7241B358CA2"
        {
            custom int preserveOriginalDrawCall = 1

            def SphereLight "HelioSpot" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:colorTemperature = 8000
                bool inputs:enableColorTemperature = 1
                float inputs:exposure = 1.9
                float inputs:intensity = 5000
                float inputs:radius = 0.5
                float inputs:shaping:cone:angle = 54.7
                float inputs:shaping:cone:softness = 0.2
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (2.2000000327825546, 0, 0.30000000447034836)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_0BDC98CEF36F99F3"
        {
            custom int preserveOriginalDrawCall = 1

            def SphereLight "HelioSpot" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:colorTemperature = 85000
                bool inputs:enableColorTemperature = 1
                float inputs:exposure = 1.9
                float inputs:intensity = 5000
                float inputs:radius = 0.5
                float inputs:shaping:cone:angle = 63.600002
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (2.3000000342726707, 0, 0.4000000059604645)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_E06199F33FBD64E5"
        {
            custom int preserveOriginalDrawCall = 1
            token visibility = "inherited"

            def SphereLight "PoliceCarLightBar_07" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                color3f inputs:color = (0.22007722, 0.35937166, 1)
                float inputs:exposure = 3
                float inputs:intensity = 5000
                float inputs:radius = 0.01
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (90, 0, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-0.05, -0.5, 1.45)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "PoliceCarLightBar_08" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                color3f inputs:color = (1, 1, 1)
                float inputs:exposure = 0
                float inputs:intensity = 5000
                float inputs:radius = 0.01
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (90, 0, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0.03, -0.36, 1.45)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "PoliceCarLightBar_09" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                color3f inputs:color = (0.22007722, 0.35937166, 1)
                float inputs:exposure = 1
                float inputs:intensity = 5000
                float inputs:radius = 0.01
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (90, 0, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0.1, -0.19, 1.45)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "PoliceCarLightBar_10" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                color3f inputs:color = (1, 1, 1)
                float inputs:exposure = 0
                float inputs:intensity = 500
                float inputs:radius = 0.01
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (90, 0, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0.2, 0, 1.45)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "PoliceCarLightBar_11" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                color3f inputs:color = (1, 0.20077223, 0.20077223)
                float inputs:exposure = 1
                float inputs:intensity = 5000
                float inputs:radius = 0.01
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (90, 0, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0.1, 0.2, 1.45)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "PoliceCarLightBar_12" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                color3f inputs:color = (1, 1, 1)
                float inputs:exposure = 0
                float inputs:intensity = 500
                float inputs:radius = 0.01
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (90, 0, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0.02, 0.35, 1.45)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "PoliceCarLightBar_13" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                color3f inputs:color = (1, 0, 0)
                float inputs:exposure = 3
                float inputs:intensity = 5000
                float inputs:radius = 0.01
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (90, 0, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-0.05, 0.5, 1.45)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_A36CF88E9D54A927"
        {
            custom int preserveOriginalDrawCall = 1

            def Xform "Xform_mesh_02" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (-107.60000160336494, 0, -45)
                double3 xformOp:scale = (0.0025, 0.0025, 0.0025)
                double3 xformOp:translate = (1693.9103159761555, 2127.7584643587816, 142.49751765896147)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, -0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.97442365, 0.992278, 0.72026354) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 40 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    float inputs:colorTemperature = 4500
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 132
                    float inputs:intensity = 65
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 1162
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-5.820766091346741e-11, 0, -139.55130759751773)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_03" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (-107.60000160336494, -1.1000000163912773, -45)
                double3 xformOp:scale = (0.0025, 0.0025, 0.0025)
                double3 xformOp:translate = (1699.7718661874333, 2121.706262949212, 142.5628678900451)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, -0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.97442365, 0.992278, 0.72026354) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 40 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    float inputs:colorTemperature = 4500
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 132
                    float inputs:intensity = 65
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 1162
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-5.820766091346741e-11, 0, -139.55130759751773)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_04" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (-107.60000160336494, -1.600000023841858, -45)
                double3 xformOp:scale = (0.0025, 0.0025, 0.0025)
                double3 xformOp:translate = (1706.2761985057953, 2115.0704385308486, 142.69880460114732)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, -0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.97442365, 0.992278, 0.72026354) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 40 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    float inputs:colorTemperature = 4500
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 132
                    float inputs:intensity = 65
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 1162
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-5.820766091346741e-11, 0, -139.55130759751773)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_05" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (-107.60000160336494, -2.1000000312924385, -45)
                double3 xformOp:scale = (0.0025, 0.0025, 0.0025)
                double3 xformOp:translate = (1710.940999718167, 2110.3320752971363, 142.91160626995546)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, -0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.97442365, 0.992278, 0.72026354) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 40 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    float inputs:colorTemperature = 4500
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 132
                    float inputs:intensity = 65
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 1162
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-5.820766091346741e-11, 0, -139.55130759751773)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_06" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (107.6, -0.6000000089406967, -45)
                double3 xformOp:scale = (0.0025, 0.0025, 0.0025)
                double3 xformOp:translate = (1673.5114557877218, 2107.80925924811, 142.56001578196899)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, -0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.97442365, 0.992278, 0.72026354) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 40 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    float inputs:colorTemperature = 4500
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 132
                    float inputs:intensity = 65
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 1162
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-5.820766091346741e-11, 0, -139.55130759751773)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_07" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (107.6, -0.6000000089406967, -45)
                double3 xformOp:scale = (0.0025, 0.0025, 0.0025)
                double3 xformOp:translate = (1679.8753895464, 2101.311468949673, 142.65407482157423)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, -0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.97442365, 0.992278, 0.72026354) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 40 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    float inputs:colorTemperature = 4500
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 132
                    float inputs:intensity = 65
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 1162
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-5.820766091346741e-11, 0, -139.55130759751773)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_08" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (107.6, -0.6000000089406967, -45)
                double3 xformOp:scale = (0.0025, 0.0025, 0.0025)
                double3 xformOp:translate = (1686.3684285237684, 2094.6632138724362, 142.78923861342642)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, -0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.97442365, 0.992278, 0.72026354) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 40 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    float inputs:colorTemperature = 4500
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 132
                    float inputs:intensity = 65
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 1162
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-5.820766091346741e-11, 0, -139.55130759751773)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_09" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (107.6, -0.6000000089406967, -45)
                double3 xformOp:scale = (0.0025, 0.0025, 0.0025)
                double3 xformOp:translate = (1691.0625065238087, 2089.9480084494785, 142.93562876522398)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, -0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.97442365, 0.992278, 0.72026354) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 40 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    float inputs:colorTemperature = 4500
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 132
                    float inputs:intensity = 65
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 1162
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-5.820766091346741e-11, 0, -139.55130759751773)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }
        }

        over "mesh_04E069A98F1906B1"
        {
            custom int preserveOriginalDrawCall = 1

            def Xform "Xform_04E069A98F1906B1_0" (
                prepend references = @./meshes/CustomCarLotExteriorTop.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_412DDCF546F5D342"
        {
            custom int preserveOriginalDrawCall = 0
            token visibility = "invisible"

            def Xform "Xform_412DDCF546F5D342_0" (
                prepend references = @./meshes/CustomCarLotExteriorBottom.usd@
            )
            {
                token visibility = "inherited"
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def Xform "Xform_mesh_0" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                prepend references = @./meshes/WallPack-Base.usd@
            )
            {
                rel material:binding = </Looks/WallMount> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                token visibility = "inherited"
                double3 xformOp:rotateXYZ = (90, 0, -20)
                double3 xformOp:scale = (0.35, 0.35, 0.35)
                double3 xformOp:translate = (-2.7183275052872813, 1.817287237351951, 4.2041810258038)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/WallPack-Frame.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    def Xform "Xform_mesh_1" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                        prepend references = @./meshes/WallPack-Lens.usd@
                    )
                    {
                        rel material:binding = </Looks/AperturePBR_Opacity> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                        double3 xformOp:rotateXYZ = (0, 0, 0)
                        double3 xformOp:scale = (1, 1, 1)
                        double3 xformOp:translate = (0, 0, 0)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                        over "_Extrusion__52301_"
                        {
                            over "_Extrusion__52301__Geometry" (
                                prepend apiSchemas = ["MaterialBindingAPI"]
                            )
                            {
                                rel material:binding = </Looks/WallMountLens> (
                                    bindMaterialAs = "weakerThanDescendants"
                                )
                            }
                        }
                    }
                }

                def SphereLight "SphereLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                    float inputs:colorTemperature = 4700
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 0
                    float inputs:intensity = 250
                    float inputs:radius = 0.25
                    float inputs:shaping:cone:angle = 83.6
                    float inputs:shaping:cone:softness = 0.3
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    double3 xformOp:rotateXYZ = (-99.00000147521496, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (4.1389114358025836e-13, -0.4353745162898619, 0.9914947654218813)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_01" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                prepend references = @./meshes/WallPack-Base.usd@
            )
            {
                rel material:binding = </Looks/WallMount> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                token visibility = "inherited"
                double3 xformOp:rotateXYZ = (90, 0, -20)
                double3 xformOp:scale = (0.35, 0.35, 0.35)
                double3 xformOp:translate = (3.58929557983639, -0.47849981460329005, 4.2041810258038)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/WallPack-Frame.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    def Xform "Xform_mesh_1" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                        prepend references = @./meshes/WallPack-Lens.usd@
                    )
                    {
                        rel material:binding = </Looks/AperturePBR_Opacity> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                        double3 xformOp:rotateXYZ = (0, 0, 0)
                        double3 xformOp:scale = (1, 1, 1)
                        double3 xformOp:translate = (0, 0, 0)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                        over "_Extrusion__52301_"
                        {
                            over "_Extrusion__52301__Geometry" (
                                prepend apiSchemas = ["MaterialBindingAPI"]
                            )
                            {
                                rel material:binding = </Looks/WallMountLens> (
                                    bindMaterialAs = "weakerThanDescendants"
                                )
                            }
                        }
                    }
                }

                def SphereLight "SphereLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                    float inputs:colorTemperature = 4700
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 0
                    float inputs:intensity = 250
                    float inputs:radius = 0.25
                    float inputs:shaping:cone:angle = 83.6
                    float inputs:shaping:cone:softness = 0.3
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    double3 xformOp:rotateXYZ = (-99.00000147521496, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (4.1389114358025836e-13, -0.4353745162898619, 0.9914947654218813)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }
        }

        over "mesh_07F79204C5A05EF1"
        {
            custom int preserveOriginalDrawCall = 0
            token visibility = "invisible"

            def Xform "Xform_07F79204C5A05EF1_0" (
                prepend references = @./meshes/CustomCarLotExteriorRollers.usd@
            )
            {
                token visibility = "inherited"
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (6.115194831111479, -2.1883765417057317, -5.329070518200751e-15)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            over "mesh"
            {
                token visibility = "invisible"
            }
        }

        over "mesh_0B191981BE5A3E1A"
        {
            custom int preserveOriginalDrawCall = 0
            token visibility = "invisible"

            def Xform "Xform_mesh_0" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, -90)
                double3 xformOp:scale = (0.00125, 0.00125, 0.00125)
                double3 xformOp:translate = (-2.0000000298023224, -3.200000047683716, -1.600000023841858)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, -0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.9677549, 1, 0.76447874) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 20 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    float inputs:colorTemperature = 3500
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 112
                    float inputs:intensity = 300
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 1229.4
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-7.275957614183426e-12, 1.5916157281026244e-12, -106.0762975034229)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            over "mesh"
            {
                token visibility = "invisible"
            }

            def Xform "Xform_mesh_01" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, -90)
                double3 xformOp:scale = (0.00125, 0.00125, 0.00125)
                double3 xformOp:translate = (-2.0000000298023224, 0, -1.600000023841858)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, -0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.9677549, 1, 0.76447874) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 20 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    float inputs:colorTemperature = 3500
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 112
                    float inputs:intensity = 300
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 1229.4
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-7.275957614183426e-12, 1.5916157281026244e-12, -106.0762975034229)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_02" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, -90)
                double3 xformOp:scale = (0.00125, 0.00125, 0.00125)
                double3 xformOp:translate = (-2.0000000298023224, 3.400000050663948, -1.600000023841858)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, -0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.9677549, 1, 0.76447874) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 20 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    float inputs:colorTemperature = 3500
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 112
                    float inputs:intensity = 300
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 1229.4
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-7.275957614183426e-12, 1.5916157281026244e-12, -106.0762975034229)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_03" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, -90)
                double3 xformOp:scale = (0.00125, 0.00125, 0.00125)
                double3 xformOp:translate = (2, -3.200000047683716, -1.600000023841858)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, -0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.9677549, 1, 0.76447874) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 20 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    float inputs:colorTemperature = 3500
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 112
                    float inputs:intensity = 300
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 1229.4
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-7.275957614183426e-12, 1.5916157281026244e-12, -106.0762975034229)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_04" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, -90)
                double3 xformOp:scale = (0.00125, 0.00125, 0.00125)
                double3 xformOp:translate = (2, 0, -1.600000023841858)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, -0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.9677549, 1, 0.76447874) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 20 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    float inputs:colorTemperature = 3500
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 112
                    float inputs:intensity = 300
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 1229.4
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-7.275957614183426e-12, 1.5916157281026244e-12, -106.0762975034229)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_05" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, -90)
                double3 xformOp:scale = (0.00125, 0.00125, 0.00125)
                double3 xformOp:translate = (2, 3.400000050663948, -1.600000023841858)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, -0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.9677549, 1, 0.76447874) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 20 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    float inputs:colorTemperature = 3500
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 112
                    float inputs:intensity = 300
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 1229.4
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-7.275957614183426e-12, 1.5916157281026244e-12, -106.0762975034229)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }
        }

        over "mesh_69A3C87E8E9F3D7C"
        {
            custom int preserveOriginalDrawCall = 1

            def Xform "Xform_mesh_05" (
                prepend references = @./meshes/TubeLight-Base.usd@
            )
            {
                double3 xformOp:rotateXYZ = (-180, 0, 0)
                double3 xformOp:scale = (0.6000000238418579, 0.6000000238418579, 0.6000000238418579)
                double3 xformOp:translate = (-2.5300002339482335, -11.7700001847744, 3.6300000745058063)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    prepend references = @./meshes/TubeLight-Bulb.usd@
                )
                {
                    rel material:binding = </Looks/LightBulb> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (0, 90, 0)
                    double3 xformOp:scale = (0.05, 0.05, 1.97)
                    double3 xformOp:translate = (0, 0, 0.20000000298023224)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_06" (
                prepend references = @./meshes/TubeLight-Base.usd@
            )
            {
                double3 xformOp:rotateXYZ = (-180, 0, 0)
                double3 xformOp:scale = (0.6000000238418579, 0.6000000238418579, 0.6000000238418579)
                double3 xformOp:translate = (8.109999766051766, -11.7700001847744, 3.6300000745058063)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    prepend references = @./meshes/TubeLight-Bulb.usd@
                )
                {
                    rel material:binding = </Looks/LightBulb> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (0, 90, 0)
                    double3 xformOp:scale = (0.05, 0.05, 1.97)
                    double3 xformOp:translate = (0, 0, 0.20000000298023224)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }
        }

        over "mesh_78C5653B22887E1C"
        {
            def Xform "Xform_78C5653B22887E1C_0" (
                prepend references = @./meshes/CustomCarLotCeiling.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_DA0C213FBEEA94D6"
        {
            def Xform "Xform_DA0C213FBEEA94D6_0" (
                prepend references = @./meshes/CustomMesh_MainMenu-MetalBuildingSide.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_AC9D2059A94662C7"
        {
            def Xform "Xform_AC9D2059A94662C7_0" (
                prepend references = @./meshes/CustomMesh_MainMenu-Roof.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_073F76377E6E3782"
        {
            def Xform "Xform_073F76377E6E3782_0" (
                prepend references = @./meshes/CustomMesh_ChainLinkFence.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_4EDC20DD012BAAF9"
        {
            def Xform "Xform_4EDC20DD012BAAF9_0" (
                prepend references = @./meshes/CustomMesh_MainMenu-RustedMetal.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_B326D7527FD81307"
        {
            def Xform "Xform_B326D7527FD81307_0" (
                prepend references = @./meshes/CustomMesh_MainMenu-MetalSiding.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_2EA0E06E67305C67"
        {
            def Xform "Xform_2EA0E06E67305C67_0" (
                prepend references = @./meshes/CustomMesh_MainMenu-WaterTowers.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_B62FD172DB0C0A68"
        {
            def Xform "Xform_B62FD172DB0C0A68_0" (
                prepend references = @./meshes/CustomMesh_MainMenu-El.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_BAE61863E2F94B05"
        {
            def Xform "Xform_BAE61863E2F94B05_0" (
                prepend references = @./meshes/CustomMesh_MainMenu-Iron.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_62CB9D8014C6800D"
        {
            def Xform "Xform_62CB9D8014C6800D_0" (
                prepend references = @./meshes/CustomMesh_MainMenu-WoodenSupports.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_681926CD80CD9909"
        {
            custom int preserveOriginalDrawCall = 1

            def DistantLight "MainMenuSun" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float inputs:angle = 30
                color3f inputs:color = (1, 0.99367976, 0.7876448)
                float inputs:colorTemperature = 5000
                float inputs:diffuse = 1
                bool inputs:enableColorTemperature = 1
                float inputs:exposure = 0
                float inputs:intensity = 0.6
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (141.4000021070242, -25.00000037252903, -169.00000251829624)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }
    }

    over "Looks"
    {
        over "mat_80D8CF1DA28D3404"
        {
            over "Shader"
            {
                uniform bool enable_opacity = 1
                float inputs:alpha_test_reference_value = 0 (
                    customData = {
                        float default = 0
                    }
                    displayGroup = "Material Flags"
                    displayName = "Alpha Test Reference Value"
                    doc = "The value to use for alpha testing against."
                    hidden = false
                )
                float inputs:anisotropy_constant = 0 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = -1
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Anisotropy Amount"
                    doc = "0 for isotropic, extents of -1 to 1 for anisotropy"
                    hidden = false
                )
                bool inputs:blend_enabled = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Material Flags"
                    displayName = "Blend Enabled"
                    doc = "Indicates if alpha state blending should be enabled."
                    hidden = false
                )
                int inputs:blend_type = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Material Flags"
                    displayName = "Blend Type"
                    doc = "The alpha state blend type to use."
                    hidden = false
                    renderType = "BlendType"
                    sdrMetadata = {
                        string __SDR__enum_value = "Alpha"
                        string options = "Alpha:0|AlphaEmissive:1|ReverseAlphaEmissive:2|Color:3|ColorEmissive:4|ReverseColorEmissive:5|Emissive:6|Multiplicative:7|DoubleMultiplicative:8"
                    }
                )
                asset inputs:diffuse_texture = @./subusd/textures/organic/80D8CF1DA28D3404-Base.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                    renderType = "texture_2d"
                )
                bool inputs:enable_thin_film = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Diffuse"
                    displayName = "Enable thin film"
                    doc = "Adds a thin film coating to the material"
                    hidden = false
                )
                bool inputs:ignore_material = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Material Flags"
                    displayName = "Ignore Material"
                    doc = "Runtime will not render any objects using an ignored material.  RTX Remix will render with a pink and black checkerboard."
                    hidden = false
                )
                bool inputs:inverted_blend = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Material Flags"
                    displayName = "Inverted Blend"
                    doc = "Indicates if an inverted blend type should be used."
                    hidden = false
                )
                asset inputs:normalmap_texture = @./subusd/textures/organic/80D8CF1DA28D3404-Normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                float inputs:opacity_constant = 1 (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Diffuse"
                    displayName = "Opacity Amount"
                    doc = "Used when no albedo texture is specified. 0 for completely transparent, 1 for completly opaque."
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./subusd/textures/organic/80D8CF1DA28D3404-Roughness.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                bool inputs:thin_film_thickness_from_albedo_alpha = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Diffuse"
                    displayName = "Thin film thickness from albedo alpha"
                    doc = "Uses the alpha channel from albedo as source for the thin film thickness. Alpha value is scaled by 1500 and represents thickness in nanometers. Opacity becomes fully opaque in this case."
                    hidden = false
                )
                bool inputs:use_legacy_alpha_state = 1 (
                    customData = {
                        bool default = 1
                    }
                    displayGroup = "Material Flags"
                    displayName = "Use Legacy Alpha State"
                    doc = "Indicates if the alpha state should be derived from legacy information (the drawcall), or specified in the MDL."
                    hidden = false
                )
            }
        }

        over "mat_CA5778A1AF5220C4"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./subusd/textures/Arch/Brick/CA5778A1AF5220C4-Base.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @./subusd/textures/Arch/Brick/CA5778A1AF5220C4-Normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:reflectionroughness_texture = @./subusd/textures/Arch/Brick/CA5778A1AF5220C4-Roughness.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_F8D68EA08994EB7D"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./subusd/textures/Garages/MainMenu/MainMenuPavement_BaseColor.dds@
                float inputs:displace_in = 0.05
                asset inputs:height_texture = @./subusd/textures/Garages/MainMenu/MainMenuPavement_Displacement.dds@ (
                    colorSpace = "raw"
                )
                asset inputs:normalmap_texture = @./subusd/textures/Garages/MainMenu/MainMenuPavement_Normal.dds@
                asset inputs:reflectionroughness_texture = @./subusd/textures/Garages/MainMenu/MainMenuPavement_Roughness.dds@
            }
        }

        over "mat_0AD8EBB518E9E037"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./subusd/textures/Garages/CareerGarage/CRIB1_FLOOR_BaseColor.dds@ (
                    colorSpace = "auto"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @./subusd/textures/Garages/CareerGarage/CRIB1_FLOOR_Normal.dds@ (
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:reflectionroughness_texture = @./subusd/textures/Garages/CareerGarage/CRIB1_FLOOR_Roughness.dds@ (
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_3379D0F80ED88C6E"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./subusd/textures/WheelTread_BaseColor.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @./subusd/textures/WheelTread_Normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:reflectionroughness_texture = @./subusd/textures/WheelTread_Roughness.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_0D051DA3FC607A51"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./subusd/textures/Garages/CareerGarage/CRIB1_ROOFTILES_BaseColor.dds@
                float inputs:displace_in = 0.05
                asset inputs:height_texture = @./subusd/textures/Garages/CareerGarage/CRIB1_ROOFTILES_Displacement.ddss@ (
                    colorSpace = "raw"
                )
                asset inputs:metallic_texture = @./subusd/textures/Garages/CareerGarage/CRIB1_ROOFTILES_Metallic.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @./subusd/textures/Garages/CareerGarage/CRIB1_ROOFTILES_Normal.dds@
                asset inputs:reflectionroughness_texture = @./subusd/textures/Garages/CareerGarage/CRIB1_ROOFTILES_Roughness.dds@
            }
        }

        over "mat_128E54E966376D45"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./subusd/textures/Garages/CareerGarage/GIRDER_BaseColor.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:metallic_texture = @./subusd/textures/Garages/CareerGarage/GIRDER_Metallic.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @./subusd/textures/Garages/CareerGarage/GIRDER_Normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:reflectionroughness_texture = @./subusd/textures/Garages/CareerGarage/GIRDER_Roughness.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_8E276D978581FF0C"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./subusd/textures/Garages/CareerGarage/GIRDER_BaseColor.dds@
                float inputs:displace_in = 0.05
                asset inputs:height_texture = @./subusd/textures/Garages/CareerGarage/GIRDER_Displacement.dds@ (
                    colorSpace = "raw"
                )
                asset inputs:metallic_texture = @./subusd/textures/Garages/CareerGarage/GIRDER_Metallic.dds@
                asset inputs:normalmap_texture = @./subusd/textures/Garages/CareerGarage/GIRDER_Normal.dds@
                asset inputs:reflectionroughness_texture = @./subusd/textures/Garages/CareerGarage/GIRDER_Roughness.dds@
            }
        }

        over "mat_F4EF012F20DA0C21"
        {
            over "Shader"
            {
                float inputs:anisotropy_constant = 0 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = -1
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Anisotropy Amount"
                    doc = "0 for isotropic, extents of -1 to 1 for anisotropy"
                    hidden = false
                )
                asset inputs:diffuse_texture = @./subusd/textures/Roads/TRNS_ALL_LA_PAVEMENTA_YL_01_BaseColor.dds@
                asset inputs:metallic_texture = @./subusd/textures/Roads/TRNS_ALL_LA_PAVEMENTA_YL_01_Metallic.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @./subusd/textures/Roads/TRNS_ALL_LA_PAVEMENTA_YL_01_Normal.dds@
                float inputs:reflection_roughness_constant = 1 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./subusd/textures/Roads/TRNS_ALL_LA_PAVEMENTA_YL_01_Roughness.dds@ (
                    colorSpace = "auto"
                )
            }
        }

        over "mat_9E36571AD0B38A84"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./subusd/textures/Roads/TRNS_ALL_LB_PAVEMENTA_NL_01_BaseColor.dds@
                asset inputs:normalmap_texture = @./subusd/textures/Roads/TRNS_ALL_LB_PAVEMENTA_NL_01_Normal.dds@
                asset inputs:reflectionroughness_texture = @./subusd/textures/Roads/TRNS_ALL_LB_PAVEMENTA_NL_01_Roughness.dds@
            }
        }

        over "mat_CCDA8565D4A48BF2"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./subusd/textures/Roads/TRNS_ALL_LB_PAVEMENTA_WD_01_BaseColor.dds@
                asset inputs:normalmap_texture = @./subusd/textures/Roads/TRNS_ALL_LB_PAVEMENTA_WD_01_Normal.dds@
                asset inputs:reflectionroughness_texture = @./subusd/textures/Roads/TRNS_ALL_LB_PAVEMENTA_WD_01_Roughness.dds@
            }
        }

        over "mat_643ECFA459358F7E"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./subusd/textures/Roads/TRNS_ALL_LA_PAVEMENTA_WL_01_BaseColor.dds@
                asset inputs:normalmap_texture = @./subusd/textures/Roads/TRNS_ALL_LA_PAVEMENTA_WL_01_Normal.dds@
                asset inputs:reflectionroughness_texture = @./subusd/textures/Roads/TRNS_ALL_LA_PAVEMENTA_WL_01_Roughness.dds@
            }
        }

        over "mat_BDDFF5C57A586024"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./subusd/textures/Roads/TRNS_ALL_LZ_PAVEMENTA_WD_01_BaseColor.dds@
                asset inputs:normalmap_texture = @./subusd/textures/Roads/TRNS_ALL_LZ_PAVEMENTA_WD_01_Normal.dds@
                asset inputs:reflectionroughness_texture = @./subusd/textures/Roads/TRNS_ALL_LZ_PAVEMENTA_WD_01_Roughness.dds@
            }
        }

        over "mat_94B56C55E727194E"
        {
            over "Shader"
            {
            }
        }

        over "mat_0FE566B27E2F6A5C"
        {
            over "Shader"
            {
            }
        }

        over "mat_53F696533DAA7D11"
        {
            over "Shader"
            {
            }
        }
    }
}

def Scope "Looks"
{
    def Material "AperturePBR_Translucent"
    {
        token outputs:mdl:displacement.connect = </Looks/AperturePBR_Translucent/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/AperturePBR_Translucent/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/AperturePBR_Translucent/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../captures/materials/AperturePBR_Translucent.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Translucent"
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "mat_AperturePBR_Translucent"
    {
        token outputs:mdl:displacement.connect = </Looks/mat_AperturePBR_Translucent/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/mat_AperturePBR_Translucent/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/mat_AperturePBR_Translucent/Shader.outputs:out>

        def Shader "Shader" (
            kind = "Material"
        )
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./mats/AperturePBR_Translucent.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Translucent"
            float inputs:ior_constant = 1.3 (
                customData = {
                    float default = 1.3
                    dictionary range = {
                        float max = 3
                        float min = 1
                    }
                }
                displayGroup = "Specular"
                displayName = "Index of Refraction"
                doc = "Index of Refraction of the material"
                hidden = false
            )
            bool inputs:thin_walled = 1 (
                customData = {
                    bool default = 0
                }
                displayGroup = "Specular"
                displayName = "Thin-walled"
                doc = "Whether the material is thin-walled"
                hidden = false
            )
            token outputs:out
        }
    }

    def Material "MetalRod"
    {
        token outputs:mdl:displacement.connect = </Looks/MetalRod/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/MetalRod/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/MetalRod/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./mats/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            float inputs:metallic_constant = 1 (
                customData = {
                    float default = 0
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Specular"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
                hidden = false
            )
            float inputs:reflection_roughness_constant = 1 (
                customData = {
                    float default = 0.5
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Specular"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
                hidden = false
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "HighBayLens"
    {
        token outputs:mdl:displacement.connect = </Looks/HighBayLens/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/HighBayLens/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/HighBayLens/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./mats/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            float inputs:metallic_constant = 0.35999998 (
                customData = {
                    float default = 0
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Specular"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
                hidden = false
            )
            float inputs:reflection_roughness_constant = 0.099999994 (
                customData = {
                    float default = 0.5
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Specular"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
                hidden = false
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "LightSource"
    {
        token outputs:mdl:displacement.connect = </Looks/LightSource/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/LightSource/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/LightSource/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./mats/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:emissive_color_constant = (1, 0.99999, 0.99999) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emissive color when no emissive color texture is specified."
                hidden = false
                renderType = "color"
            )
            float inputs:emissive_intensity = 40 (
                customData = {
                    float default = 40
                    dictionary range = {
                        float max = 65504
                        float min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
                hidden = false
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    bool default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emission"
                doc = "Enables the emission of light from the material"
                hidden = false
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "WallMountFrame"
    {
        token outputs:mdl:displacement.connect = </Looks/WallMountFrame/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/WallMountFrame/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/WallMountFrame/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./mats/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            float inputs:emissive_intensity = 40 (
                customData = {
                    float default = 40
                    dictionary range = {
                        float max = 65504
                        float min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
                hidden = false
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    bool default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emission"
                doc = "Enables the emission of light from the material"
                hidden = false
            )
            float inputs:reflection_roughness_constant = 1 (
                customData = {
                    float default = 0.5
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Specular"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
                hidden = false
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "WallMount"
    {
        token outputs:mdl:displacement.connect = </Looks/WallMount/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/WallMount/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/WallMount/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./mats/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "AperturePBR_Opacity"
    {
        token outputs:mdl:displacement.connect = </Looks/AperturePBR_Opacity/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/AperturePBR_Opacity/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/AperturePBR_Opacity/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./mats/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "WallMountLens"
    {
        token outputs:mdl:displacement.connect = </Looks/WallMountLens/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/WallMountLens/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/WallMountLens/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./mats/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:emissive_color_constant = (1, 0.99999, 0.99999) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emissive color when no emissive color texture is specified."
                hidden = false
                renderType = "color"
            )
            float inputs:emissive_intensity = 15 (
                customData = {
                    float default = 40
                    dictionary range = {
                        float max = 65504
                        float min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
                hidden = false
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    bool default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emission"
                doc = "Enables the emission of light from the material"
                hidden = false
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "AperturePBR_Opacity_01"
    {
        token outputs:mdl:displacement.connect = </Looks/AperturePBR_Opacity_01/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/AperturePBR_Opacity_01/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/AperturePBR_Opacity_01/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./mats/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "LightBulb"
    {
        token outputs:mdl:displacement.connect = </Looks/LightBulb/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/LightBulb/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/LightBulb/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./mats/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:emissive_color_constant = (1, 0.99999, 0.99999) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emissive color when no emissive color texture is specified."
                hidden = false
                renderType = "color"
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    bool default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emission"
                doc = "Enables the emission of light from the material"
                hidden = false
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }
}

