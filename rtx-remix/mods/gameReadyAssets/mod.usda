#usda 1.0
(
    metersPerUnit = 1
    subLayers = [
        @./lights.usda@,
        @./materials.usda@
    ]
    upAxis = "y"
)

over "RootNode"
{
    over "Looks"
    {
        over "mat_A5CA5B76300E4744" (
            delete references = [
                @../../captures/materials/mat_A5CA5B76300E4744.usd@</Looks/mat_A5CA5B76300E4744>,
                @./mats/AperturePBR_Translucent.usda@,
                @./mats/AperturePBR_Translucent.usda@</Looks/AperturePBR_Translucent>
            ]
            prepend references = @./mats/AperturePBR_Translucent.usda@</Looks/mat_AperturePBR_Translucent>
        )
        {
            over "Shader"
            {
                float inputs:ior_constant = 1.02 (
                    customData = {
                        float default = 1.3
                        dictionary range = {
                            float max = 3
                            float min = 1
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Index of Refraction"
                    doc = "Index of Refraction of the material"
                    hidden = false
                )
                bool inputs:thin_walled = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Specular"
                    displayName = "Thin-walled"
                    doc = "Whether the material is thin-walled"
                    hidden = false
                )
            }
        }

        over "mat_946581F26DE1FC1D"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./textures/cars/Car.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                    renderType = "texture_2d"
                )
                float inputs:metallic_constant = 0.42999998 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Amount"
                    doc = "Metallic Material"
                    hidden = false
                )
                float inputs:reflection_roughness_constant = 0.14 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
            }
        }

        over "mat_F8D68EA08994EB7D"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./textures/Roads/Asphalt027C_2K_Color.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @./textures/Roads/Asphalt027C_2K_NormalDX.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:reflectionroughness_texture = @./textures/Roads/Asphalt027C_2K_Roughness.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_32F197D70992268B"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./textures/Arch/Brick/Bricks082C_2K_Color.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @./textures/Arch/Brick/Bricks082C_2K_NormalDX.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:reflectionroughness_texture = @./textures/Arch/Brick/Bricks082C_2K_Roughness.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_5F240D1FFA80D8D6"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./textures/Roads/5F240D1FFA80D8D6-Base.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @./textures/Roads/5F240D1FFA80D8D6-Normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:reflectionroughness_texture = @./textures/Roads/5F240D1FFA80D8D6-Roughness.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_CA43FA356CFC34AB"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./textures/Roads/CA43FA356CFC34AB-Base.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @./textures/Roads/CA43FA356CFC34AB-Normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:reflectionroughness_texture = @./textures/Roads/CA43FA356CFC34AB-Roughness.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_53F696533DAA7D11"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./textures/Roads/53F696533DAA7D11-Base.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @./textures/Roads/53F696533DAA7D11-Normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:reflectionroughness_texture = @./textures/Roads/53F696533DAA7D11-Roughness.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_B4CDF945B5DEDD89"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./textures/Roads/B4CDF945B5DEDD89-Base.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @./textures/Roads/B4CDF945B5DEDD89-Normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:reflectionroughness_texture = @./textures/Roads/B4CDF945B5DEDD89-Roughness.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_FEAF6081F1F38186"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./textures/Roads/FEAF6081F1F38186-Base.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @./textures/Roads/FEAF6081F1F38186-Normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:reflectionroughness_texture = @./textures/Roads/FEAF6081F1F38186-Roughness.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_B04DA3E0AA589EE7"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./textures/Roads/B04DA3E0AA589EE7-Base.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @./textures/Roads/B04DA3E0AA589EE7-Normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:reflectionroughness_texture = @./textures/Roads/B04DA3E0AA589EE7-Roughness.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_9CAA9581D6A8158F"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./textures/Roads/9CAA9581D6A8158F-Base.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @./textures/Roads/9CAA9581D6A8158F-Normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:reflectionroughness_texture = @./textures/Roads/9CAA9581D6A8158F-Roughness.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_0CB0DF23BAA47263"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./textures/Roads/0CB0DF23BAA47263-Base.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @./textures/Roads/0CB0DF23BAA47263-Normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:reflectionroughness_texture = @./textures/Roads/0CB0DF23BAA47263-Roughness.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_98B7D7BC75D93F2D"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./textures/Roads/98B7D7BC75D93F2D-Base.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @./textures/Roads/98B7D7BC75D93F2D-Normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:reflectionroughness_texture = @./textures/Roads/98B7D7BC75D93F2D-Roughness.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_A171B8AA94D7E22F"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./textures/Roads/A171B8AA94D7E22F-Base.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @./textures/Roads/A171B8AA94D7E22F-Normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:reflectionroughness_texture = @./textures/Roads/A171B8AA94D7E22F-Roughness.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_0FE566B27E2F6A5C"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./textures/Roads/0FE566B27E2F6A5C-Base.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @./textures/Roads/0FE566B27E2F6A5C-Normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:reflectionroughness_texture = @./textures/Roads/0FE566B27E2F6A5C-Roughness.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_B2EB7D7C1189F029"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./textures/Roads/B2EB7D7C1189F029-Base.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @./textures/Roads/B2EB7D7C1189F029-Normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:reflectionroughness_texture = @./textures/Roads/B2EB7D7C1189F029-Roughness.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_54E1A64192EA9E86"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./textures/Roads/54E1A64192EA9E86-Base.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:emissive_mask_texture = @./textures/Roads/54E1A64192EA9E86-Normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:reflectionroughness_texture = @./textures/Roads/54E1A64192EA9E86-Roughness.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_068976C637BD4ECA"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./textures/Arch/Buildings/068976C637BD4ECA-Base.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @./textures/Arch/Buildings/068976C637BD4ECA-Normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:reflectionroughness_texture = @./textures/Arch/Buildings/068976C637BD4ECA-Roughness.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_7A1A6EE64B3A12EF"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./textures/cars/7A1A6EE64B3A12EF-Base.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                    renderType = "texture_2d"
                )
                float inputs:emissive_intensity = 2 (
                    customData = {
                        float default = 40
                        dictionary range = {
                            float max = 65504
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./textures/cars/7A1A6EE64B3A12EF-Emissive.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                    renderType = "texture_2d"
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./textures/cars/7A1A6EE64B3A12EF-Normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_93F3D8D873C6A2A1"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./textures/Props/93F3D8D873C6A2A1-Base.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                    renderType = "texture_2d"
                )
                float inputs:emissive_intensity = 3 (
                    customData = {
                        float default = 40
                        dictionary range = {
                            float max = 65504
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./textures/Props/93F3D8D873C6A2A1-Emissive.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                    renderType = "texture_2d"
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./textures/Props/93F3D8D873C6A2A1-Normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }
    }

    over "meshes"
    {
        over "mesh_985F5B5AE83C004A"
        {
            custom int preserveOriginalDrawCall = 0
        }

        over "mesh_53D2104021DEFEAD"
        {
            custom int preserveOriginalDrawCall = 0
        }

        over "mesh_2971ABB8C8A6D2C9"
        {
            custom int preserveOriginalDrawCall = 0
        }

        over "mesh_79709AABDD4FFB50"
        {
            custom int preserveOriginalDrawCall = 0
        }

        over "mesh_AFDB69D4EE12BEE9"
        {
            custom int preserveOriginalDrawCall = 0
        }

        over "mesh_D416A38290F090FB"
        {
            custom int preserveOriginalDrawCall = 0
        }

        over "mesh_8A900BE49C10E702"
        {
            custom int preserveOriginalDrawCall = 0
        }

        over "mesh_1801C09764A6F8D9"
        {
            custom int preserveOriginalDrawCall = 0
        }

        over "mesh_6D954D3D14AB7B86"
        {
            custom int preserveOriginalDrawCall = 0
        }

        over "mesh_29577439437E3E6E"
        {
            custom int preserveOriginalDrawCall = 0
        }

        over "mesh_7839C6EF8AFF5511"
        {
            custom int preserveOriginalDrawCall = 0
        }

        over "mesh_8465F8B75622290B"
        {
            custom int preserveOriginalDrawCall = 1

            def SphereLight "CobraLight_2" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:exposure = 0
                float inputs:intensity = 500
                float inputs:radius = 0.3
                float inputs:shaping:cone:angle = 73
                float inputs:shaping:cone:softness = 0.4
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (0, 5.600000083446503, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, -6.000000089406967, 9.700000144541264)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_76F37F9C0347361D"
        {
            def RectLight "WrapLight" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                float inputs:colorTemperature = 5000
                bool inputs:enableColorTemperature = 1
                float inputs:exposure = 0
                float inputs:height = 6.9
                float inputs:intensity = 98
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                float inputs:width = 0.7
                double3 xformOp:rotateXYZ = (0, -68.2000010162592, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0.20000000298023224, 0.10000000149011612)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_2C026CD1A1F246EC"
        {
            custom int preserveOriginalDrawCall = 1

            def SphereLight "M3HeadLightRight" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:colorTemperature = 7500
                bool inputs:enableColorTemperature = 1
                float inputs:exposure = 10.900001
                float inputs:intensity = 500
                float inputs:radius = 0.05
                float inputs:shaping:cone:angle = 47.4
                float inputs:shaping:cone:softness = 0.2
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (0, -53, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (2.6, -0.57, 0.5)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "M3HeadLightLeft" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:colorTemperature = 7500
                bool inputs:enableColorTemperature = 1
                float inputs:exposure = 10.900001
                float inputs:intensity = 500
                float inputs:radius = 0.05
                float inputs:shaping:cone:angle = 47.4
                float inputs:shaping:cone:softness = 0.2
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (0, -45, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (2.6, 0.57, 0.5)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_88CE67E29BA2FB7D"
        {
            custom int preserveOriginalDrawCall = 1

            def SphereLight "M3PlateLight" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:colorTemperature = 4500
                bool inputs:enableColorTemperature = 1
                float inputs:exposure = 0.7
                float inputs:intensity = 174.2
                float inputs:radius = 0.01
                float inputs:shaping:cone:angle = 81.8
                float inputs:shaping:cone:softness = 1
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-2.0000000298023224, -0.10000000149011612, 0.72)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "M3PlateLight_01" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:colorTemperature = 4500
                bool inputs:enableColorTemperature = 1
                float inputs:exposure = 0.7
                float inputs:intensity = 174.2
                float inputs:radius = 0.01
                float inputs:shaping:cone:angle = 81.8
                float inputs:shaping:cone:softness = 1
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-2.0000000298023224, 0.10000000149011612, 0.72)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_4CBF290FA0F08B3A"
        {
            custom int preserveOriginalDrawCall = 1

            def SphereLight "SphereLight" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:colorTemperature = 2700
                bool inputs:enableColorTemperature = 1
                float inputs:intensity = 351
                float inputs:radius = 0.4
                float inputs:shaping:cone:angle = 91.700005
                float inputs:shaping:cone:softness = 0.1
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (0, 0, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, -1.3000000193715096)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_7826CD56A98D0E50"
        {
            custom int preserveOriginalDrawCall = 1

            def SphereLight "CobraHeadLight" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:colorTemperature = 5000
                bool inputs:enableColorTemperature = 1
                float inputs:exposure = 7.4
                float inputs:intensity = 289.6
                float inputs:radius = 0.09
                float inputs:shaping:cone:angle = 63.4
                float inputs:shaping:cone:softness = 0.2
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (-13.800000205636024, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, -2.8000000417232513, 8.200000122189522)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_BE0372587D1551E1"
        {
            custom int preserveOriginalDrawCall = 1

            def Xform "Xform_mesh_0" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 22.47219978962491)
                double3 xformOp:scale = (0.001, 0.001, 0.001)
                double3 xformOp:translate = (2074.8081460815947, -190.96480727351397, 112.47189850721482)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    def RectLight "RectLight" (
                        prepend apiSchemas = ["ShapingAPI"]
                    )
                    {
                        float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                        float inputs:colorTemperature = 4000
                        bool inputs:enableColorTemperature = 1
                        float inputs:exposure = 14.6
                        float inputs:height = 33.4
                        float inputs:intensity = 31.9
                        float inputs:shaping:cone:angle = 180
                        float inputs:shaping:cone:softness
                        float inputs:shaping:focus
                        color3f inputs:shaping:focusTint
                        asset inputs:shaping:ies:file
                        float inputs:width = 1.6
                        double3 xformOp:rotateXYZ = (0, 0, 90)
                        double3 xformOp:scale = (1, 1, 1)
                        double3 xformOp:translate = (-1.073349267244339e-7, -16.930447958409786, -108.29742302320665)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                    }

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                float inputs:emissive_intensity = 4 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }
            }

            def Xform "Xform_mesh_01" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 22.47219978962491)
                double3 xformOp:scale = (0.001, 0.001, 0.001)
                double3 xformOp:translate = (2072.411652019014, -191.9561055951744, 112.4718985072234)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    def RectLight "RectLight" (
                        prepend apiSchemas = ["ShapingAPI"]
                    )
                    {
                        float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                        float inputs:colorTemperature = 4000
                        bool inputs:enableColorTemperature = 1
                        float inputs:exposure = 14.6
                        float inputs:height = 33.4
                        float inputs:intensity = 31.9
                        float inputs:shaping:cone:angle = 180
                        float inputs:shaping:cone:softness
                        float inputs:shaping:focus
                        color3f inputs:shaping:focusTint
                        asset inputs:shaping:ies:file
                        float inputs:width = 1.6
                        double3 xformOp:rotateXYZ = (0, 0, 90)
                        double3 xformOp:scale = (1, 1, 1)
                        double3 xformOp:translate = (-1.073349267244339e-7, -16.930447958409786, -108.29742302320665)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                    }

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                float inputs:emissive_intensity = 4 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }
            }

            def Xform "Xform_mesh_02" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 22.47219978962491)
                double3 xformOp:scale = (0.001, 0.001, 0.001)
                double3 xformOp:translate = (2069.623441303546, -193.10943563921805, 112.47189850723628)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    def RectLight "RectLight" (
                        prepend apiSchemas = ["ShapingAPI"]
                    )
                    {
                        float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                        float inputs:colorTemperature = 4000
                        bool inputs:enableColorTemperature = 1
                        float inputs:exposure = 14.6
                        float inputs:height = 33.4
                        float inputs:intensity = 31.9
                        float inputs:shaping:cone:angle = 180
                        float inputs:shaping:cone:softness
                        float inputs:shaping:focus
                        color3f inputs:shaping:focusTint
                        asset inputs:shaping:ies:file
                        float inputs:width = 1.6
                        double3 xformOp:rotateXYZ = (0, 0, 90)
                        double3 xformOp:scale = (1, 1, 1)
                        double3 xformOp:translate = (-1.073349267244339e-7, -16.930447958409786, -108.29742302320665)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                    }

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                float inputs:emissive_intensity = 4 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }
            }

            def Xform "Xform_mesh_03" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 22.47219978962491)
                double3 xformOp:scale = (0.001, 0.001, 0.001)
                double3 xformOp:translate = (2066.8564567779213, -194.25398557117956, 112.47189850723372)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    def RectLight "RectLight" (
                        prepend apiSchemas = ["ShapingAPI"]
                    )
                    {
                        float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                        float inputs:colorTemperature = 4000
                        bool inputs:enableColorTemperature = 1
                        float inputs:exposure = 14.6
                        float inputs:height = 33.4
                        float inputs:intensity = 31.9
                        float inputs:shaping:cone:angle = 180
                        float inputs:shaping:cone:softness
                        float inputs:shaping:focus
                        color3f inputs:shaping:focusTint
                        asset inputs:shaping:ies:file
                        float inputs:width = 1.6
                        double3 xformOp:rotateXYZ = (0, 0, 90)
                        double3 xformOp:scale = (1, 1, 1)
                        double3 xformOp:translate = (-1.073349267244339e-7, -16.930447958409786, -108.29742302320665)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                    }

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                float inputs:emissive_intensity = 4 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }
            }
        }

        over "mesh_0D58AFC9C914F4C8"
        {
            custom int preserveOriginalDrawCall = 1

            def RectLight "SurfaceMntStrip" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                float inputs:colorTemperature = 4500
                bool inputs:enableColorTemperature = 1
                float inputs:exposure = 0
                float inputs:height = 1
                float inputs:intensity = 44.4
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                float inputs:width = 8.900001
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, -0.30000000447034836)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_04DF32F622C92CD9"
        {
            custom int preserveOriginalDrawCall = 1

            def SphereLight "SphereLight_01" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:colorTemperature = 2700
                bool inputs:enableColorTemperature = 1
                float inputs:intensity = 351
                float inputs:radius = 0.4
                float inputs:shaping:cone:angle = 91.700005
                float inputs:shaping:cone:softness = 0.1
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (0, 0, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, -1.0000000149011612)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_04BD7732962A6720"
        {
            custom int preserveOriginalDrawCall = 1

            def SphereLight "DoubleHeadPole" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:colorTemperature = 4000
                bool inputs:enableColorTemperature = 1
                float inputs:intensity = 200
                float inputs:radius = 0.2
                float inputs:shaping:cone:angle = 74.3
                float inputs:shaping:cone:softness = 0.2
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (0, -19.80000029504299, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0.800000011920929, 0, 8.300000123679638)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "DoubleHeadPole_01" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:colorTemperature = 4000
                bool inputs:enableColorTemperature = 1
                float inputs:intensity = 200
                float inputs:radius = 0.2
                float inputs:shaping:cone:angle = 74.3
                float inputs:shaping:cone:softness = 0.2
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (-20.000000298023224, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, -0.7000000104308128, 8.300000123679638)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_3A48DA88DF0E979E"
        {
            custom int preserveOriginalDrawCall = 1

            def SphereLight "CurvedDoublePole" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:colorTemperature = 4500
                bool inputs:enableColorTemperature = 1
                float inputs:exposure = 0
                float inputs:intensity = 283.4
                float inputs:radius = 0.5
                float inputs:shaping:cone:angle = 77.9
                float inputs:shaping:cone:softness = 0.3
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, -3.9000000581145287, 10.000000149011612)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "CurvedDoublePole_01" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:colorTemperature = 4500
                bool inputs:enableColorTemperature = 1
                float inputs:exposure = 0
                float inputs:intensity = 283.4
                float inputs:radius = 0.5
                float inputs:shaping:cone:angle = 77.9
                float inputs:shaping:cone:softness = 0.3
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 3.9, 10.000000149011612)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }
    }
}

def Scope "Looks"
{
    def Material "AperturePBR_Translucent"
    {
        token outputs:mdl:displacement.connect = </Looks/AperturePBR_Translucent/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/AperturePBR_Translucent/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/AperturePBR_Translucent/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../captures/materials/AperturePBR_Translucent.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Translucent"
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "mat_AperturePBR_Translucent"
    {
        token outputs:mdl:displacement.connect = </Looks/mat_AperturePBR_Translucent/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/mat_AperturePBR_Translucent/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/mat_AperturePBR_Translucent/Shader.outputs:out>

        def Shader "Shader" (
            kind = "Material"
        )
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./mats/AperturePBR_Translucent.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Translucent"
            float inputs:ior_constant = 1.3 (
                customData = {
                    float default = 1.3
                    dictionary range = {
                        float max = 3
                        float min = 1
                    }
                }
                displayGroup = "Specular"
                displayName = "Index of Refraction"
                doc = "Index of Refraction of the material"
                hidden = false
            )
            bool inputs:thin_walled = 1 (
                customData = {
                    bool default = 0
                }
                displayGroup = "Specular"
                displayName = "Thin-walled"
                doc = "Whether the material is thin-walled"
                hidden = false
            )
            token outputs:out
        }
    }
}

def "Viewport_Waypoints"
{
}

