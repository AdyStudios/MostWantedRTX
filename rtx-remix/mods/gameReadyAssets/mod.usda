#usda 1.0
(
    metersPerUnit = 1
    subLayers = [
        @./lights.usda@,
        @./materials.usda@
    ]
    upAxis = "y"
)

over "RootNode"
{
    over "Looks"
    {
        over "mat_A5CA5B76300E4744" (
            delete references = [
                @../../captures/materials/mat_A5CA5B76300E4744.usd@</Looks/mat_A5CA5B76300E4744>,
                @./mats/AperturePBR_Translucent.usda@,
                @./mats/AperturePBR_Translucent.usda@</Looks/AperturePBR_Translucent>
            ]
            prepend references = @./mats/AperturePBR_Translucent.usda@</Looks/mat_AperturePBR_Translucent>
        )
        {
            over "Shader"
            {
                float inputs:ior_constant = 1.02 (
                    customData = {
                        float default = 1.3
                        dictionary range = {
                            float max = 3
                            float min = 1
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Index of Refraction"
                    doc = "Index of Refraction of the material"
                    hidden = false
                )
                bool inputs:thin_walled = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Specular"
                    displayName = "Thin-walled"
                    doc = "Whether the material is thin-walled"
                    hidden = false
                )
            }
        }

        over "mat_946581F26DE1FC1D"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./textures/cars/Car.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                    renderType = "texture_2d"
                )
                float inputs:metallic_constant = 0.42999998 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Amount"
                    doc = "Metallic Material"
                    hidden = false
                )
                float inputs:reflection_roughness_constant = 0.14 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
            }
        }

        over "mat_5F240D1FFA80D8D6"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./textures/Roads/5F240D1FFA80D8D6-Base.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @./textures/Roads/5F240D1FFA80D8D6-Normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:reflectionroughness_texture = @./textures/Roads/5F240D1FFA80D8D6-Roughness.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_CA43FA356CFC34AB"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./textures/Roads/CA43FA356CFC34AB-Base.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @./textures/Roads/CA43FA356CFC34AB-Normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:reflectionroughness_texture = @./textures/Roads/CA43FA356CFC34AB-Roughness.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_53F696533DAA7D11"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./textures/Roads/53F696533DAA7D11-Base.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @./textures/Roads/53F696533DAA7D11-Normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:reflectionroughness_texture = @./textures/Roads/53F696533DAA7D11-Roughness.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_B4CDF945B5DEDD89"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./textures/Roads/B4CDF945B5DEDD89-Base.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @./textures/Roads/B4CDF945B5DEDD89-Normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:reflectionroughness_texture = @./textures/Roads/B4CDF945B5DEDD89-Roughness.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_FEAF6081F1F38186"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./textures/Roads/FEAF6081F1F38186-Base.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @./textures/Roads/FEAF6081F1F38186-Normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:reflectionroughness_texture = @./textures/Roads/FEAF6081F1F38186-Roughness.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_9CAA9581D6A8158F"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./textures/Roads/9CAA9581D6A8158F-Base.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @./textures/Roads/9CAA9581D6A8158F-Normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:reflectionroughness_texture = @./textures/Roads/9CAA9581D6A8158F-Roughness.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_0CB0DF23BAA47263"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./textures/Roads/0CB0DF23BAA47263-Base.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @./textures/Roads/0CB0DF23BAA47263-Normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:reflectionroughness_texture = @./textures/Roads/0CB0DF23BAA47263-Roughness.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_98B7D7BC75D93F2D"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./textures/Roads/98B7D7BC75D93F2D-Base.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @./textures/Roads/98B7D7BC75D93F2D-Normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:reflectionroughness_texture = @./textures/Roads/98B7D7BC75D93F2D-Roughness.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_A171B8AA94D7E22F"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./textures/Roads/A171B8AA94D7E22F-Base.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @./textures/Roads/A171B8AA94D7E22F-Normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:reflectionroughness_texture = @./textures/Roads/A171B8AA94D7E22F-Roughness.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_0FE566B27E2F6A5C"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./textures/Roads/0FE566B27E2F6A5C-Base.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @./textures/Roads/0FE566B27E2F6A5C-Normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:reflectionroughness_texture = @./textures/Roads/0FE566B27E2F6A5C-Roughness.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_B2EB7D7C1189F029"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./textures/Roads/B2EB7D7C1189F029-Base.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @./textures/Roads/B2EB7D7C1189F029-Normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:reflectionroughness_texture = @./textures/Roads/B2EB7D7C1189F029-Roughness.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_54E1A64192EA9E86"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./textures/Roads/54E1A64192EA9E86-Base.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:emissive_mask_texture = @./textures/Roads/54E1A64192EA9E86-Normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:reflectionroughness_texture = @./textures/Roads/54E1A64192EA9E86-Roughness.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_068976C637BD4ECA"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./textures/Arch/Buildings/068976C637BD4ECA-Base.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @./textures/Arch/Buildings/068976C637BD4ECA-Normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:reflectionroughness_texture = @./textures/Arch/Buildings/068976C637BD4ECA-Roughness.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_7A1A6EE64B3A12EF"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./textures/cars/7A1A6EE64B3A12EF-Base.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                    renderType = "texture_2d"
                )
                float inputs:emissive_intensity = 2 (
                    customData = {
                        float default = 40
                        dictionary range = {
                            float max = 65504
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./textures/cars/7A1A6EE64B3A12EF-Emissive.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                    renderType = "texture_2d"
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./textures/cars/7A1A6EE64B3A12EF-Normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_93F3D8D873C6A2A1"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./textures/Props/93F3D8D873C6A2A1-Base.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                    renderType = "texture_2d"
                )
                float inputs:emissive_intensity = 3 (
                    customData = {
                        float default = 40
                        dictionary range = {
                            float max = 65504
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./textures/Props/93F3D8D873C6A2A1-Emissive.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                    renderType = "texture_2d"
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./textures/Props/93F3D8D873C6A2A1-Normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_F4EF012F20DA0C21"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./textures/Roads/F4EF012F20DA0C21-Base.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @./textures/Roads/F4EF012F20DA0C21-Normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:reflectionroughness_texture = @./textures/Roads/F4EF012F20DA0C21-Roughness.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_BDDFF5C57A586024"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./textures/Roads/BDDFF5C57A586024-Base.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @./textures/Roads/BDDFF5C57A586024-Normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:reflectionroughness_texture = @./textures/Roads/BDDFF5C57A586024-Roughness.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_F7697D0F720FEDB7"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./textures/Roads/F7697D0F720FEDB7-Base.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @./textures/Roads/F7697D0F720FEDB7-Normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:reflectionroughness_texture = @./textures/Roads/F7697D0F720FEDB7-Roughness.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_CCDA8565D4A48BF2"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./textures/Roads/CCDA8565D4A48BF2-Base.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @./textures/Roads/CCDA8565D4A48BF2-Normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:reflectionroughness_texture = @./textures/Roads/CCDA8565D4A48BF2-Roughness.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_223556E5276D496D"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./textures/Roads/223556E5276D496D-Base.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @./textures/Roads/223556E5276D496D-Normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:reflectionroughness_texture = @./textures/Roads/223556E5276D496D-Roughness.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_EE9AF05ED99D7819"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./textures/Roads/EE9AF05ED99D7819-Base.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @./textures/Roads/EE9AF05ED99D7819-Normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:reflectionroughness_texture = @./textures/Roads/EE9AF05ED99D7819-Roughness.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_643ECFA459358F7E"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./textures/Roads/643ECFA459358F7E-Base.dds@
                asset inputs:normalmap_texture = @./textures/Roads/643ECFA459358F7E-Normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:reflectionroughness_texture = @./textures/Roads/643ECFA459358F7E-Roughness.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_9E36571AD0B38A84"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./textures/Roads/9E36571AD0B38A84-Base.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @./textures/Roads/9E36571AD0B38A84-Normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:reflectionroughness_texture = @./textures/Roads/9E36571AD0B38A84-Roughness.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_A4F85795B37233AB"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./textures/Arch/Concrete/A4F85795B37233AB-Base.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:emissive_mask_texture = @./textures/Arch/Concrete/A4F85795B37233AB-Normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:reflectionroughness_texture = @./textures/Arch/Concrete/A4F85795B37233AB-Roughness.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_F8D68EA08994EB7D"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./textures/Garages/MainMenu/F8D68EA08994EB7D-Base.dds@
                asset inputs:normalmap_texture = @./textures/Garages/MainMenu/F8D68EA08994EB7D-Normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:reflectionroughness_texture = @./textures/Garages/MainMenu/F8D68EA08994EB7D-Roughness.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_1402AFC5DBE807F2"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./textures/Garages/MainMenu/1402AFC5DBE807F2-Base.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @./textures/Garages/MainMenu/1402AFC5DBE807F2-Normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:reflectionroughness_texture = @./textures/Garages/MainMenu/1402AFC5DBE807F2-Roughness.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_32F197D70992268B"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./textures/Garages/MainMenu/32F197D70992268B-Base.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @./textures/Garages/MainMenu/32F197D70992268B-Normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:reflectionroughness_texture = @./textures/Garages/MainMenu/32F197D70992268B-Roughness.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_F42B9478801AEC3E"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./textures/Garages/MainMenu/F42B9478801AEC3E-Base.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @./textures/Garages/MainMenu/F42B9478801AEC3E-Normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:reflectionroughness_texture = @./textures/Garages/MainMenu/F42B9478801AEC3E-Roughness.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_3B05F51EB5DE2608"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./textures/Garages/MainMenu/3B05F51EB5DE2608-Base.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @./textures/Garages/MainMenu/3B05F51EB5DE2608-Normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:reflectionroughness_texture = @./textures/Garages/MainMenu/3B05F51EB5DE2608-Roughness.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_C88E07EBC00A7B43"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./textures/Garages/MainMenu/C88E07EBC00A7B43-Base.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @./textures/Garages/MainMenu/C88E07EBC00A7B43-Normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:reflectionroughness_texture = @./textures/Garages/MainMenu/C88E07EBC00A7B43-Roughness.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_AA73A7CEB04E7026"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./textures/Garages/MainMenu/AA73A7CEB04E7026-Base.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:metallic_texture = @./textures/Garages/MainMenu/AA73A7CEB04E7026-Metallic.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @./textures/Garages/MainMenu/AA73A7CEB04E7026-Normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:reflectionroughness_texture = @./textures/Garages/MainMenu/AA73A7CEB04E7026-Roughness.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_221EC6219618B526"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./textures/Garages/MainMenu/221EC6219618B526-Base.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @./textures/Garages/MainMenu/221EC6219618B526-Normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:reflectionroughness_texture = @./textures/Garages/MainMenu/221EC6219618B526-Roughness.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_5A308B18724DC2BE"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./textures/Garages/MainMenu/5A308B18724DC2BE-Base.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                    renderType = "texture_2d"
                )
                float inputs:emissive_intensity = 65.504 (
                    customData = {
                        float default = 40
                        dictionary range = {
                            float max = 65504
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./textures/Garages/MainMenu/5A308B18724DC2BE-Emissive.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                    renderType = "texture_2d"
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
                asset inputs:metallic_texture = @./textures/Garages/MainMenu/5A308B18724DC2BE-Metallic.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @./textures/Garages/MainMenu/5A308B18724DC2BE-Normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:reflectionroughness_texture = @./textures/Garages/MainMenu/5A308B18724DC2BE-Roughness.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_0AD8EBB518E9E037"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./textures/Garages/CareerGarage/0AD8EBB518E9E037-Base.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @./textures/Garages/CareerGarage/0AD8EBB518E9E037-Normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:reflectionroughness_texture = @./textures/Garages/CareerGarage/0AD8EBB518E9E037-Roughness.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_4AF979DDC292CB81"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./textures/Garages/CareerGarage/4AF979DDC292CB81-Base.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @./textures/Garages/CareerGarage/4AF979DDC292CB81-Normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:reflectionroughness_texture = @./textures/Garages/CareerGarage/4AF979DDC292CB81-Roughness.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_8E276D978581FF0C"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./textures/Garages/CareerGarage/8E276D978581FF0C-Base.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:metallic_texture = @./textures/Garages/CareerGarage/8E276D978581FF0C-Metallic.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @./textures/Garages/CareerGarage/8E276D978581FF0C-Normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:reflectionroughness_texture = @./textures/Garages/CareerGarage/8E276D978581FF0C-Roughness.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_5059712BFCE033AE"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./textures/Garages/CareerGarage/5059712BFCE033AE-Base.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @./textures/Garages/CareerGarage/5059712BFCE033AE-Normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:reflectionroughness_texture = @./textures/Garages/CareerGarage/5059712BFCE033AE-Roughness.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_0D051DA3FC607A51"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./textures/Garages/CareerGarage/0D051DA3FC607A51-Base.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @./textures/Garages/CareerGarage/0D051DA3FC607A51-Normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:reflectionroughness_texture = @./textures/Garages/CareerGarage/0D051DA3FC607A51-Roughness.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_1317A331E033F67A"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./textures/Garages/CareerGarage/1317A331E033F67A-Base.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:metallic_texture = @./textures/Garages/CareerGarage/1317A331E033F67A-Metallic.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @./textures/Garages/CareerGarage/1317A331E033F67A-Normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:reflectionroughness_texture = @./textures/Garages/CareerGarage/1317A331E033F67A-Roughness.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_BDD482FA3E04A83F"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./textures/Garages/CareerGarage/BDD482FA3E04A83F-Base.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @./textures/Garages/CareerGarage/BDD482FA3E04A83F-Normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:reflectionroughness_texture = @./textures/Garages/CareerGarage/BDD482FA3E04A83F-Roughness.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_6F200AD2F9600722"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./textures/Garages/CareerGarage/6F200AD2F9600722-Base.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:metallic_texture = @./textures/Garages/CareerGarage/6F200AD2F9600722-Metallic.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @./textures/Garages/CareerGarage/6F200AD2F9600722-Normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:reflectionroughness_texture = @./textures/Garages/CareerGarage/6F200AD2F9600722-Roughness.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_05A17CFBD18CB383"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./textures/Garages/CareerGarage/05A17CFBD18CB383-Base.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:metallic_texture = @./textures/Garages/CareerGarage/05A17CFBD18CB383-Metallic.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @./textures/Garages/CareerGarage/05A17CFBD18CB383-Normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:reflectionroughness_texture = @./textures/Garages/CareerGarage/05A17CFBD18CB383-Roughness.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_D4EFF57684297A61"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./textures/Garages/CarLot/D4EFF57684297A61-Base.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @./textures/Garages/CarLot/D4EFF57684297A61-Normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:reflectionroughness_texture = @./textures/Garages/CarLot/D4EFF57684297A61-Roughness.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_9D6912176337A3E6"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./textures/Garages/CarLot/9D6912176337A3E6-Base.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @./textures/Garages/CarLot/9D6912176337A3E6-Normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:reflectionroughness_texture = @./textures/Garages/CarLot/9D6912176337A3E6-Roughness.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_5DE3DB4EEA7D11FD"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./textures/Garages/CarLot/5DE3DB4EEA7D11FD-Base.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:metallic_texture = @./textures/Garages/CarLot/5DE3DB4EEA7D11FD-Metallic.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @./textures/Garages/CarLot/5DE3DB4EEA7D11FD-Normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:reflectionroughness_texture = @./textures/Garages/CarLot/5DE3DB4EEA7D11FD-Roughness.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_15936F8E97381114"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./textures/Garages/CarLot/15936F8E97381114-Base.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:emissive_mask_texture = @@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:metallic_texture = @./textures/Garages/CarLot/15936F8E97381114-Metallic.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Metallic Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @./textures/Garages/CarLot/15936F8E97381114-Normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:reflectionroughness_texture = @./textures/Garages/CarLot/15936F8E97381114-Roughness.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_F4826197BE1E1634"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./textures/Roads/F4826197BE1E1634-Base.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @./textures/Roads/F4826197BE1E1634-Normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:reflectionroughness_texture = @./textures/Roads/F4826197BE1E1634-Roughness.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_F2243617A0D8B7FF"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./textures/Terrain/F2243617A0D8B7FF-Base.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @./textures/Terrain/F2243617A0D8B7FF-Normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:reflectionroughness_texture = @./textures/Terrain/F2243617A0D8B7FF-Roughness.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_7FD99EF5CD859CA7"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./textures/Arch/Concrete/7FD99EF5CD859CA7-Base.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                    renderType = "texture_2d"
                )
                float inputs:emissive_intensity = 5 (
                    customData = {
                        float default = 40
                        dictionary range = {
                            float max = 65504
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./textures/Arch/Concrete/7FD99EF5CD859CA7-Emissive.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                    renderType = "texture_2d"
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./textures/Arch/Concrete/7FD99EF5CD859CA7-Normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:reflectionroughness_texture = @./textures/Arch/Concrete/7FD99EF5CD859CA7-Roughness.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_7D72FDA8E5A0A4B1"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./textures/Props/7D72FDA8E5A0A4B1-Base.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:emissive_mask_texture = @./textures/Props/7D72FDA8E5A0A4B1-Emissive.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                    renderType = "texture_2d"
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./textures/Props/7D72FDA8E5A0A4B1-Normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:reflectionroughness_texture = @./textures/Props/7D72FDA8E5A0A4B1-Roughness.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_5D80E04B258335F6"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./textures/Props/5D80E04B258335F6-Base.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                    renderType = "texture_2d"
                )
                float inputs:emissive_intensity = 2 (
                    customData = {
                        float default = 40
                        dictionary range = {
                            float max = 65504
                            float min = 0
                        }
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                    hidden = false
                )
                asset inputs:emissive_mask_texture = @./textures/Props/5D80E04B258335F6-Emissive.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Mask Map"
                    doc = "The texture masking the emissive color"
                    hidden = false
                    renderType = "texture_2d"
                )
                bool inputs:enable_emission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emissive"
                    displayName = "Enable Emission"
                    doc = "Enables the emission of light from the material"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./textures/Props/5D80E04B258335F6-Normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:reflectionroughness_texture = @./textures/Props/5D80E04B258335F6-Roughness.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_73DE52A00FD2A569"
        {
            over "Shader"
            {
            }
        }

        over "mat_C1D3E93FEA911EBE"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./textures/Arch/Wood/C1D3E93FEA911EBE-Base.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @./textures/Arch/Wood/C1D3E93FEA911EBE-Normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:reflectionroughness_texture = @./textures/Arch/Wood/C1D3E93FEA911EBE-Roughness.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_3A064BD694BFD90E"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./textures/Roads/3A064BD694BFD90E-Base.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @./textures/Roads/3A064BD694BFD90E-Normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:reflectionroughness_texture = @./textures/Roads/3A064BD694BFD90E-Roughness.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }

        over "mat_EA54F476CED728E4"
        {
            over "Shader"
            {
                asset inputs:diffuse_texture = @./textures/Roads/EA54F476CED728E4-Base.dds@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Diffuse"
                    displayName = "Albedo Map"
                    doc = "The texture specifying the albedo value and the optional opacity value to use in the alpha channel"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @./textures/Roads/EA54F476CED728E4-Normal.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:reflectionroughness_texture = @./textures/Roads/EA54F476CED728E4-Roughness.dds@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness Map"
                    hidden = false
                    renderType = "texture_2d"
                )
            }
        }
    }

    over "meshes"
    {
        over "mesh_985F5B5AE83C004A"
        {
            custom int preserveOriginalDrawCall = 0
        }

        over "mesh_53D2104021DEFEAD"
        {
            custom int preserveOriginalDrawCall = 0
        }

        over "mesh_2971ABB8C8A6D2C9"
        {
            custom int preserveOriginalDrawCall = 0
        }

        over "mesh_79709AABDD4FFB50"
        {
            custom int preserveOriginalDrawCall = 0
        }

        over "mesh_AFDB69D4EE12BEE9"
        {
            custom int preserveOriginalDrawCall = 0
        }

        over "mesh_D416A38290F090FB"
        {
            custom int preserveOriginalDrawCall = 0
        }

        over "mesh_8A900BE49C10E702"
        {
            custom int preserveOriginalDrawCall = 0
        }

        over "mesh_1801C09764A6F8D9"
        {
            custom int preserveOriginalDrawCall = 0
        }

        over "mesh_6D954D3D14AB7B86"
        {
            custom int preserveOriginalDrawCall = 0
        }

        over "mesh_29577439437E3E6E"
        {
            custom int preserveOriginalDrawCall = 0
        }

        over "mesh_7839C6EF8AFF5511"
        {
            custom int preserveOriginalDrawCall = 0
        }

        over "mesh_8465F8B75622290B"
        {
            custom int preserveOriginalDrawCall = 1

            def SphereLight "CobraLight_2" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:exposure = 0
                float inputs:intensity = 500
                float inputs:radius = 0.3
                float inputs:shaping:cone:angle = 73
                float inputs:shaping:cone:softness = 0.4
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (0, 5.600000083446503, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, -6.000000089406967, 9.700000144541264)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_76F37F9C0347361D"
        {
            custom int preserveOriginalDrawCall = 1

            def RectLight "WrapLight" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                float inputs:colorTemperature = 5000
                bool inputs:enableColorTemperature = 1
                float inputs:exposure = 0
                float inputs:height = 6.9
                float inputs:intensity = 98
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                float inputs:width = 0.7
                double3 xformOp:rotateXYZ = (0, -68.2000010162592, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0.20000000298023224, 0.10000000149011612)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_2C026CD1A1F246EC"
        {
            custom int preserveOriginalDrawCall = 1

            def SphereLight "M3HeadLightRight" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:colorTemperature = 7500
                bool inputs:enableColorTemperature = 1
                float inputs:exposure = 10.900001
                float inputs:intensity = 500
                float inputs:radius = 0.05
                float inputs:shaping:cone:angle = 47.4
                float inputs:shaping:cone:softness = 0.2
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (0, -53, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (2.6, -0.57, 0.5)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "M3HeadLightLeft" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:colorTemperature = 7500
                bool inputs:enableColorTemperature = 1
                float inputs:exposure = 10.900001
                float inputs:intensity = 500
                float inputs:radius = 0.05
                float inputs:shaping:cone:angle = 47.4
                float inputs:shaping:cone:softness = 0.2
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (0, -45, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (2.6, 0.57, 0.5)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_88CE67E29BA2FB7D"
        {
            custom int preserveOriginalDrawCall = 1

            def SphereLight "M3PlateLight" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:colorTemperature = 4500
                bool inputs:enableColorTemperature = 1
                float inputs:exposure = 0.7
                float inputs:intensity = 174.2
                float inputs:radius = 0.01
                float inputs:shaping:cone:angle = 81.8
                float inputs:shaping:cone:softness = 1
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-2.0000000298023224, -0.10000000149011612, 0.72)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "M3PlateLight_01" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:colorTemperature = 4500
                bool inputs:enableColorTemperature = 1
                float inputs:exposure = 0.7
                float inputs:intensity = 174.2
                float inputs:radius = 0.01
                float inputs:shaping:cone:angle = 81.8
                float inputs:shaping:cone:softness = 1
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-2.0000000298023224, 0.10000000149011612, 0.72)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_4CBF290FA0F08B3A"
        {
            custom int preserveOriginalDrawCall = 1

            def SphereLight "SphereLight" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:colorTemperature = 2700
                bool inputs:enableColorTemperature = 1
                float inputs:intensity = 351
                float inputs:radius = 0.4
                float inputs:shaping:cone:angle = 91.700005
                float inputs:shaping:cone:softness = 0.1
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (0, 0, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, -1.3000000193715096)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_7826CD56A98D0E50"
        {
            custom int preserveOriginalDrawCall = 1

            def SphereLight "CobraHeadLight" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:colorTemperature = 5000
                bool inputs:enableColorTemperature = 1
                float inputs:exposure = 7.4
                float inputs:intensity = 289.6
                float inputs:radius = 0.09
                float inputs:shaping:cone:angle = 63.4
                float inputs:shaping:cone:softness = 0.2
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (-13.800000205636024, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, -2.8000000417232513, 8.200000122189522)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_BE0372587D1551E1"
        {
            custom int preserveOriginalDrawCall = 1

            def Xform "Xform_mesh_0" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 22.47219978962491)
                double3 xformOp:scale = (0.001, 0.001, 0.001)
                double3 xformOp:translate = (2074.8081460815947, -190.96480727351397, 112.47189850721482)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    def RectLight "RectLight" (
                        prepend apiSchemas = ["ShapingAPI"]
                    )
                    {
                        float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                        float inputs:colorTemperature = 4000
                        bool inputs:enableColorTemperature = 1
                        float inputs:exposure = 14.6
                        float inputs:height = 33.4
                        float inputs:intensity = 31.9
                        float inputs:shaping:cone:angle = 180
                        float inputs:shaping:cone:softness
                        float inputs:shaping:focus
                        color3f inputs:shaping:focusTint
                        asset inputs:shaping:ies:file
                        float inputs:width = 1.6
                        double3 xformOp:rotateXYZ = (0, 0, 90)
                        double3 xformOp:scale = (1, 1, 1)
                        double3 xformOp:translate = (-1.073349267244339e-7, -16.930447958409786, -108.29742302320665)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                    }

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                float inputs:emissive_intensity = 4 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }
            }

            def Xform "Xform_mesh_01" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 22.47219978962491)
                double3 xformOp:scale = (0.001, 0.001, 0.001)
                double3 xformOp:translate = (2072.411652019014, -191.9561055951744, 112.4718985072234)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    def RectLight "RectLight" (
                        prepend apiSchemas = ["ShapingAPI"]
                    )
                    {
                        float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                        float inputs:colorTemperature = 4000
                        bool inputs:enableColorTemperature = 1
                        float inputs:exposure = 14.6
                        float inputs:height = 33.4
                        float inputs:intensity = 31.9
                        float inputs:shaping:cone:angle = 180
                        float inputs:shaping:cone:softness
                        float inputs:shaping:focus
                        color3f inputs:shaping:focusTint
                        asset inputs:shaping:ies:file
                        float inputs:width = 1.6
                        double3 xformOp:rotateXYZ = (0, 0, 90)
                        double3 xformOp:scale = (1, 1, 1)
                        double3 xformOp:translate = (-1.073349267244339e-7, -16.930447958409786, -108.29742302320665)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                    }

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                float inputs:emissive_intensity = 4 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }
            }

            def Xform "Xform_mesh_02" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 22.47219978962491)
                double3 xformOp:scale = (0.001, 0.001, 0.001)
                double3 xformOp:translate = (2069.623441303546, -193.10943563921805, 112.47189850723628)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    def RectLight "RectLight" (
                        prepend apiSchemas = ["ShapingAPI"]
                    )
                    {
                        float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                        float inputs:colorTemperature = 4000
                        bool inputs:enableColorTemperature = 1
                        float inputs:exposure = 14.6
                        float inputs:height = 33.4
                        float inputs:intensity = 31.9
                        float inputs:shaping:cone:angle = 180
                        float inputs:shaping:cone:softness
                        float inputs:shaping:focus
                        color3f inputs:shaping:focusTint
                        asset inputs:shaping:ies:file
                        float inputs:width = 1.6
                        double3 xformOp:rotateXYZ = (0, 0, 90)
                        double3 xformOp:scale = (1, 1, 1)
                        double3 xformOp:translate = (-1.073349267244339e-7, -16.930447958409786, -108.29742302320665)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                    }

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                float inputs:emissive_intensity = 4 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }
            }

            def Xform "Xform_mesh_03" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 22.47219978962491)
                double3 xformOp:scale = (0.001, 0.001, 0.001)
                double3 xformOp:translate = (2066.8564567779213, -194.25398557117956, 112.47189850723372)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    def RectLight "RectLight" (
                        prepend apiSchemas = ["ShapingAPI"]
                    )
                    {
                        float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                        float inputs:colorTemperature = 4000
                        bool inputs:enableColorTemperature = 1
                        float inputs:exposure = 14.6
                        float inputs:height = 33.4
                        float inputs:intensity = 31.9
                        float inputs:shaping:cone:angle = 180
                        float inputs:shaping:cone:softness
                        float inputs:shaping:focus
                        color3f inputs:shaping:focusTint
                        asset inputs:shaping:ies:file
                        float inputs:width = 1.6
                        double3 xformOp:rotateXYZ = (0, 0, 90)
                        double3 xformOp:scale = (1, 1, 1)
                        double3 xformOp:translate = (-1.073349267244339e-7, -16.930447958409786, -108.29742302320665)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                    }

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                float inputs:emissive_intensity = 4 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }
            }
        }

        over "mesh_0D58AFC9C914F4C8"
        {
            custom int preserveOriginalDrawCall = 1
        }

        over "mesh_04DF32F622C92CD9"
        {
            custom int preserveOriginalDrawCall = 1

            def SphereLight "SphereLight_01" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:colorTemperature = 2700
                bool inputs:enableColorTemperature = 1
                float inputs:intensity = 351
                float inputs:radius = 0.4
                float inputs:shaping:cone:angle = 91.700005
                float inputs:shaping:cone:softness = 0.1
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (0, 0, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, -1.0000000149011612)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_04BD7732962A6720"
        {
            custom int preserveOriginalDrawCall = 1

            def SphereLight "DoubleHeadPole" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:colorTemperature = 4000
                bool inputs:enableColorTemperature = 1
                float inputs:intensity = 200
                float inputs:radius = 0.2
                float inputs:shaping:cone:angle = 74.3
                float inputs:shaping:cone:softness = 0.2
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (0, -19.80000029504299, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0.800000011920929, 0, 8.300000123679638)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "DoubleHeadPole_01" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:colorTemperature = 4000
                bool inputs:enableColorTemperature = 1
                float inputs:intensity = 200
                float inputs:radius = 0.2
                float inputs:shaping:cone:angle = 74.3
                float inputs:shaping:cone:softness = 0.2
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (-20.000000298023224, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, -0.7000000104308128, 8.300000123679638)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_3A48DA88DF0E979E"
        {
            custom int preserveOriginalDrawCall = 1

            def SphereLight "CurvedDoublePole" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:colorTemperature = 4500
                bool inputs:enableColorTemperature = 1
                float inputs:exposure = 0
                float inputs:intensity = 283.4
                float inputs:radius = 0.5
                float inputs:shaping:cone:angle = 77.9
                float inputs:shaping:cone:softness = 0.3
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, -3.9000000581145287, 10.000000149011612)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "CurvedDoublePole_01" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:colorTemperature = 4500
                bool inputs:enableColorTemperature = 1
                float inputs:exposure = 0
                float inputs:intensity = 283.4
                float inputs:radius = 0.5
                float inputs:shaping:cone:angle = 77.9
                float inputs:shaping:cone:softness = 0.3
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 3.9, 10.000000149011612)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_ED3F11D38E7B5ABE"
        {
            custom int preserveOriginalDrawCall = 1

            def SphereLight "BannerPoleLight" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:colorTemperature = 5000
                bool inputs:enableColorTemperature = 1
                float inputs:exposure = 8.7
                float inputs:intensity = 200
                float inputs:radius = 0.05
                float inputs:shaping:cone:angle = 79.200005
                float inputs:shaping:cone:softness = 0.3
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, -2.8000000417232513, 8.00000011920929)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_5709FF2F177FFFFC"
        {
            custom int preserveOriginalDrawCall = 1

            def SphereLight "BannerPoleLight" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:colorTemperature = 5000
                bool inputs:enableColorTemperature = 1
                float inputs:exposure = 8
                float inputs:intensity = 200
                float inputs:radius = 0.05
                float inputs:shaping:cone:angle = 65.700005
                float inputs:shaping:cone:softness = 0.3
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, -2.8000000417232513, 8.200000122189522)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_689A36E40801EAAF"
        {
            custom int preserveOriginalDrawCall = 1
            token visibility = "invisible"

            def SphereLight "LittleItalyCornerBuilding" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:exposure = 6.6
                float inputs:intensity = 150
                float inputs:radius = 0.05
                float inputs:shaping:cone:angle = 20.800001
                float inputs:shaping:cone:softness = 0.1
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (182.1524042715397, -2.2737367544323206e-13, 45.79499835691411)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (1.565746958418957, -12.491950658879377, 7.289544987730788)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "LittleItalyCornerBuilding_01" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:exposure = 6.6
                float inputs:intensity = 150
                float inputs:radius = 0.05
                float inputs:shaping:cone:angle = 20.800001
                float inputs:shaping:cone:softness = 0.1
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (182.1524042715397, -2.2737367544323206e-13, 45.79499835691411)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (5.0478423688638685, -8.821639345217285, 7.281215020279112)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "LittleItalyCornerBuilding_02" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:exposure = 6.6
                float inputs:intensity = 150
                float inputs:radius = 0.05
                float inputs:shaping:cone:angle = 20.800001
                float inputs:shaping:cone:softness = 0.1
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (181.25622862660714, 1.7479197352285496, -8.491663221566114)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-2.306440612428011, -16.272251157158408, 7.294808527336315)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "LittleItalyCornerBuilding_03" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:exposure = 6.6
                float inputs:intensity = 150
                float inputs:radius = 0.05
                float inputs:shaping:cone:angle = 20.800001
                float inputs:shaping:cone:softness = 0.1
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (180.05939249434277, 2.1515850757112105, -42.623434688847794)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-1.9020482437699862, -16.161177532119527, 7.286823948520674)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "LittleItalyCornerBuilding_04" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:exposure = 6.6
                float inputs:intensity = 150
                float inputs:radius = 0.05
                float inputs:shaping:cone:angle = 20.800001
                float inputs:shaping:cone:softness = 0.1
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (-180, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-7.4054664759277165, -15.305615148959069, 7.418980834599353)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "LittleItalyCornerBuilding_05" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:exposure = 6.6
                float inputs:intensity = 150
                float inputs:radius = 0.05
                float inputs:shaping:cone:angle = 20.800001
                float inputs:shaping:cone:softness = 0.1
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (-180, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-7.672835205774428, -15.177343334322597, 7.418980834599353)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "LittleItalyCornerBuilding_06" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:exposure = 6.6
                float inputs:intensity = 150
                float inputs:radius = 0.05
                float inputs:shaping:cone:angle = 20.800001
                float inputs:shaping:cone:softness = 0.1
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (-180, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-11.330746006952836, -11.726069855606825, 7.418980834599367)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "LittleItalyCornerBuilding_07" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:exposure = 6.6
                float inputs:intensity = 150
                float inputs:radius = 0.05
                float inputs:shaping:cone:angle = 20.800001
                float inputs:shaping:cone:softness = 0.1
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (-180, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-14.961463087818622, -8.256323050483847, 7.418980834599355)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "LittleItalyCornerBuilding_08" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:exposure = 6.6
                float inputs:intensity = 150
                float inputs:radius = 0.05
                float inputs:shaping:cone:angle = 20.800001
                float inputs:shaping:cone:softness = 0.1
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (-180, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-18.42590037492289, -4.967554930265644, 7.418980834599453)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_045BD125FCC78E75" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = None
            custom int preserveOriginalDrawCall = 1
            token visibility = "inherited"

            def Xform "Xform_mesh_0" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, -209.87143030459117)
                double3 xformOp:scale = (0.0025, 0.0025, 0.0025)
                double3 xformOp:translate = (1091.4762684591517, -738.4326928238278, 118.452769506543)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_2" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (1, 0.9499904, 0.73745173) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 40 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    float inputs:exposure = 0
                    float inputs:height = 1032
                    float inputs:intensity = 105.700005
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 79.1
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (5.238689482212067e-10, 1.1641532182693481e-10, -105.3785766454821)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_01" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, -241.86529084606985)
                double3 xformOp:scale = (0.0025, 0.0025, 0.0025)
                double3 xformOp:translate = (1098.487746757688, -746.8826790479961, 118.45276950653806)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_2" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (1, 0.9499904, 0.73745173) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 40 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    float inputs:exposure = 0
                    float inputs:height = 1032
                    float inputs:intensity = 105.700005
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 79.1
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (5.238689482212067e-10, 1.1641532182693481e-10, -105.3785766454821)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_11" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, -238.2757835313044)
                double3 xformOp:scale = (0.0025, 0.0025, 0.0025)
                double3 xformOp:translate = (1103.6578544484428, -756.2664091973398, 118.45276950654143)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_2" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (1, 0.9499904, 0.73745173) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 40 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    float inputs:exposure = 0
                    float inputs:height = 1032
                    float inputs:intensity = 105.700005
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 79.1
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (5.238689482212067e-10, 1.1641532182693481e-10, -105.3785766454821)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_12" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, -234.6995526448116)
                double3 xformOp:scale = (0.0025, 0.0025, 0.0025)
                double3 xformOp:translate = (1109.096786318072, -766.6588226559637, 118.45276950653667)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_2" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (1, 0.9499904, 0.73745173) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 40 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    float inputs:exposure = 0
                    float inputs:height = 1032
                    float inputs:intensity = 105.700005
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 79.1
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (5.238689482212067e-10, 1.1641532182693481e-10, -105.3785766454821)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_14" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, -354.20073440927564)
                double3 xformOp:scale = (0.0025, 0.0025, 0.0025)
                double3 xformOp:translate = (1087.5056802386086, -804.7898571448285, 117.61592508205686)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_2" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (1, 0.9499904, 0.73745173) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 40 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    float inputs:exposure = 0
                    float inputs:height = 1032
                    float inputs:intensity = 105.700005
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 79.1
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (5.238689482212067e-10, 1.1641532182693481e-10, -105.3785766454821)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_17" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, -232.0221278428417)
                double3 xformOp:scale = (0.0025, 0.0025, 0.0025)
                double3 xformOp:translate = (1062.8676312052173, -790.5613922890465, 117.61592508205685)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_2" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (1, 0.9499904, 0.73745173) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 40 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    float inputs:exposure = 0
                    float inputs:height = 1032
                    float inputs:intensity = 105.700005
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 79.1
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (5.238689482212067e-10, 1.1641532182693481e-10, -105.3785766454821)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_18" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, -298.54038071014173)
                double3 xformOp:scale = (0.0025, 0.0025, 0.0025)
                double3 xformOp:translate = (1081.0682212010124, -806.9748682784124, 117.61592508205692)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_2" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (1, 0.9499904, 0.73745173) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 40 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    float inputs:exposure = 0
                    float inputs:height = 1032
                    float inputs:intensity = 105.700005
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 79.1
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (5.238689482212067e-10, 1.1641532182693481e-10, -105.3785766454821)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_19" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, -298.54038071014173)
                double3 xformOp:scale = (0.0025, 0.0025, 0.0025)
                double3 xformOp:translate = (1075.7526197891946, -804.083879611437, 117.61592508205692)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_2" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (1, 0.9499904, 0.73745173) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 40 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    float inputs:exposure = 0
                    float inputs:height = 1032
                    float inputs:intensity = 105.700005
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 79.1
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (5.238689482212067e-10, 1.1641532182693481e-10, -105.3785766454821)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_20" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, -298.54038071014173)
                double3 xformOp:scale = (0.0025, 0.0025, 0.0025)
                double3 xformOp:translate = (1070.0071677737026, -800.9591087009271, 117.61592508205692)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_2" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (1, 0.9499904, 0.73745173) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 40 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    float inputs:exposure = 0
                    float inputs:height = 1032
                    float inputs:intensity = 105.700005
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 79.1
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (5.238689482212067e-10, 1.1641532182693481e-10, -105.3785766454821)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_21" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, -298.54038071014173)
                double3 xformOp:scale = (0.0025, 0.0025, 0.0025)
                double3 xformOp:translate = (1064.7736757004793, -798.1127767245301, 117.61592508205692)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_2" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (1, 0.9499904, 0.73745173) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 40 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    float inputs:exposure = 0
                    float inputs:height = 1032
                    float inputs:intensity = 105.700005
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 79.1
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (5.238689482212067e-10, 1.1641532182693481e-10, -105.3785766454821)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_1" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                prepend references = @./meshes/Highbay-Frame.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, -26.090517307551096)
                double3 xformOp:scale = (0.45, 0.45, 0.45)
                double3 xformOp:translate = (1041.307103727115, -722.1314869498806, 116.83756427220949)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_2" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    prepend references = @./meshes/Highbay-Lens.usd@
                )
                {
                    rel material:binding = None (
                        bindMaterialAs = "strongerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0.22085475846699865)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    def Xform "Xform_mesh_2" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                        prepend references = @./meshes/Highbay-Source.usd@
                    )
                    {
                        rel material:binding = </Looks/LightSource> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                        double3 xformOp:rotateXYZ = (0, 0, 0)
                        double3 xformOp:scale = (0.5, 0.5, 0.1)
                        double3 xformOp:translate = (-3.183231456205249e-12, -7.275957614183426e-12, 0.33963338807291166)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                        over "Looks"
                        {
                            over "AperturePBR_Opacity"
                            {
                                over "Shader"
                                {
                                    color3f inputs:emissive_color_constant = (0.9619982, 0.992278, 0.9041606) (
                                        doc = "The emissive color when no emissive color texture is specified."
                                        hidden = false
                                        renderType = "color"
                                    )
                                    float inputs:emissive_intensity = 5 (
                                        doc = "Intensity of the emission"
                                        hidden = false
                                    )
                                }
                            }
                        }
                    }

                    over "_Joined_Solid_Geometry__12530__001" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </Looks/HighBayLens> (
                            bindMaterialAs = "weakerThanDescendants"
                        )

                        over "_Joined_Solid_Geometry__12530__Geometry_001" (
                            prepend apiSchemas = ["MaterialBindingAPI"]
                        )
                        {
                        }
                    }
                }

                def SphereLight "SphereLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                    color3f inputs:color = (0.95748264, 1, 0.85714287)
                    float inputs:colorTemperature = 5000
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 7.9
                    float inputs:intensity = 67.5
                    float inputs:radius = 0.05
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    double3 xformOp:rotateXYZ = (90, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-9.094947017729282e-13, -8.526512829121202e-13, 0.04838584732260642)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def Xform "Xform_mesh_03" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    prepend references = @./meshes/Rod.usd@
                )
                {
                    rel material:binding = </Looks/MetalRod> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (28.500000424683094, 28.500000424683094, 26.30000039190054)
                    double3 xformOp:translate = (-4.547473508864641e-13, 1.1368683772161603e-12, 2.712877571333138)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_02" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                prepend references = @./meshes/Highbay-Frame.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, -26.090517307551096)
                double3 xformOp:scale = (0.45, 0.45, 0.45)
                double3 xformOp:translate = (1054.7557401356585, -728.717146174866, 116.8375642722095)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_2" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    prepend references = @./meshes/Highbay-Lens.usd@
                )
                {
                    rel material:binding = None (
                        bindMaterialAs = "strongerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0.22085475846699865)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    def Xform "Xform_mesh_2" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                        prepend references = @./meshes/Highbay-Source.usd@
                    )
                    {
                        rel material:binding = </Looks/LightSource> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                        double3 xformOp:rotateXYZ = (0, 0, 0)
                        double3 xformOp:scale = (0.5, 0.5, 0.1)
                        double3 xformOp:translate = (-3.183231456205249e-12, -7.275957614183426e-12, 0.33963338807291166)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                        over "Looks"
                        {
                            over "AperturePBR_Opacity"
                            {
                                over "Shader"
                                {
                                    color3f inputs:emissive_color_constant = (0.9619982, 0.992278, 0.9041606) (
                                        doc = "The emissive color when no emissive color texture is specified."
                                        hidden = false
                                        renderType = "color"
                                    )
                                    float inputs:emissive_intensity = 5 (
                                        doc = "Intensity of the emission"
                                        hidden = false
                                    )
                                }
                            }
                        }
                    }

                    over "_Joined_Solid_Geometry__12530__001" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </Looks/HighBayLens> (
                            bindMaterialAs = "weakerThanDescendants"
                        )

                        over "_Joined_Solid_Geometry__12530__Geometry_001" (
                            prepend apiSchemas = ["MaterialBindingAPI"]
                        )
                        {
                        }
                    }
                }

                def SphereLight "SphereLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                    color3f inputs:color = (0.95748264, 1, 0.85714287)
                    float inputs:colorTemperature = 5000
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 7.9
                    float inputs:intensity = 67.5
                    float inputs:radius = 0.05
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    double3 xformOp:rotateXYZ = (90, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-9.094947017729282e-13, -8.526512829121202e-13, 0.04838584732260642)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def Xform "Xform_mesh_03" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    prepend references = @./meshes/Rod.usd@
                )
                {
                    rel material:binding = </Looks/MetalRod> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (28.500000424683094, 28.500000424683094, 26.30000039190054)
                    double3 xformOp:translate = (-4.547473508864641e-13, 1.1368683772161603e-12, 2.712877571333138)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_03" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                prepend references = @./meshes/Highbay-Frame.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, -26.090517307551096)
                double3 xformOp:scale = (0.45, 0.45, 0.45)
                double3 xformOp:translate = (1069.5629670736978, -735.9680932388239, 116.83756427220943)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_2" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    prepend references = @./meshes/Highbay-Lens.usd@
                )
                {
                    rel material:binding = None (
                        bindMaterialAs = "strongerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0.22085475846699865)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    def Xform "Xform_mesh_2" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                        prepend references = @./meshes/Highbay-Source.usd@
                    )
                    {
                        rel material:binding = </Looks/LightSource> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                        double3 xformOp:rotateXYZ = (0, 0, 0)
                        double3 xformOp:scale = (0.5, 0.5, 0.1)
                        double3 xformOp:translate = (-3.183231456205249e-12, -7.275957614183426e-12, 0.33963338807291166)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                        over "Looks"
                        {
                            over "AperturePBR_Opacity"
                            {
                                over "Shader"
                                {
                                    color3f inputs:emissive_color_constant = (0.9619982, 0.992278, 0.9041606) (
                                        doc = "The emissive color when no emissive color texture is specified."
                                        hidden = false
                                        renderType = "color"
                                    )
                                    float inputs:emissive_intensity = 5 (
                                        doc = "Intensity of the emission"
                                        hidden = false
                                    )
                                }
                            }
                        }
                    }

                    over "_Joined_Solid_Geometry__12530__001" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </Looks/HighBayLens> (
                            bindMaterialAs = "weakerThanDescendants"
                        )

                        over "_Joined_Solid_Geometry__12530__Geometry_001" (
                            prepend apiSchemas = ["MaterialBindingAPI"]
                        )
                        {
                        }
                    }
                }

                def SphereLight "SphereLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                    color3f inputs:color = (0.95748264, 1, 0.85714287)
                    float inputs:colorTemperature = 5000
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 7.9
                    float inputs:intensity = 67.5
                    float inputs:radius = 0.05
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    double3 xformOp:rotateXYZ = (90, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-9.094947017729282e-13, -8.526512829121202e-13, 0.04838584732260642)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def Xform "Xform_mesh_03" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    prepend references = @./meshes/Rod.usd@
                )
                {
                    rel material:binding = </Looks/MetalRod> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (28.500000424683094, 28.500000424683094, 26.30000039190054)
                    double3 xformOp:translate = (-4.547473508864641e-13, 1.1368683772161603e-12, 2.712877571333138)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_04" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                prepend references = @./meshes/Highbay-Frame.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, -26.090517307551096)
                double3 xformOp:scale = (0.45, 0.45, 0.45)
                double3 xformOp:translate = (1083.5078699339458, -742.7967690519872, 116.83756427220943)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_2" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    prepend references = @./meshes/Highbay-Lens.usd@
                )
                {
                    rel material:binding = None (
                        bindMaterialAs = "strongerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0.22085475846699865)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    def Xform "Xform_mesh_2" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                        prepend references = @./meshes/Highbay-Source.usd@
                    )
                    {
                        rel material:binding = </Looks/LightSource> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                        double3 xformOp:rotateXYZ = (0, 0, 0)
                        double3 xformOp:scale = (0.5, 0.5, 0.1)
                        double3 xformOp:translate = (-3.183231456205249e-12, -7.275957614183426e-12, 0.33963338807291166)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                        over "Looks"
                        {
                            over "AperturePBR_Opacity"
                            {
                                over "Shader"
                                {
                                    color3f inputs:emissive_color_constant = (0.9619982, 0.992278, 0.9041606) (
                                        doc = "The emissive color when no emissive color texture is specified."
                                        hidden = false
                                        renderType = "color"
                                    )
                                    float inputs:emissive_intensity = 5 (
                                        doc = "Intensity of the emission"
                                        hidden = false
                                    )
                                }
                            }
                        }
                    }

                    over "_Joined_Solid_Geometry__12530__001" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </Looks/HighBayLens> (
                            bindMaterialAs = "weakerThanDescendants"
                        )

                        over "_Joined_Solid_Geometry__12530__Geometry_001" (
                            prepend apiSchemas = ["MaterialBindingAPI"]
                        )
                        {
                        }
                    }
                }

                def SphereLight "SphereLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                    color3f inputs:color = (0.95748264, 1, 0.85714287)
                    float inputs:colorTemperature = 5000
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 7.9
                    float inputs:intensity = 67.5
                    float inputs:radius = 0.05
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    double3 xformOp:rotateXYZ = (90, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-9.094947017729282e-13, -8.526512829121202e-13, 0.04838584732260642)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def Xform "Xform_mesh_03" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    prepend references = @./meshes/Rod.usd@
                )
                {
                    rel material:binding = </Looks/MetalRod> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (28.500000424683094, 28.500000424683094, 26.30000039190054)
                    double3 xformOp:translate = (-4.547473508864641e-13, 1.1368683772161603e-12, 2.712877571333138)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_05" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                prepend references = @./meshes/Highbay-Frame.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, -26.090517307551096)
                double3 xformOp:scale = (0.45, 0.45, 0.45)
                double3 xformOp:translate = (1045.65885836246, -747.2939736783396, 116.83756427220949)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_2" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    prepend references = @./meshes/Highbay-Lens.usd@
                )
                {
                    rel material:binding = None (
                        bindMaterialAs = "strongerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0.22085475846699865)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    def Xform "Xform_mesh_2" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                        prepend references = @./meshes/Highbay-Source.usd@
                    )
                    {
                        rel material:binding = </Looks/LightSource> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                        double3 xformOp:rotateXYZ = (0, 0, 0)
                        double3 xformOp:scale = (0.5, 0.5, 0.1)
                        double3 xformOp:translate = (-3.183231456205249e-12, -7.275957614183426e-12, 0.33963338807291166)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                        over "Looks"
                        {
                            over "AperturePBR_Opacity"
                            {
                                over "Shader"
                                {
                                    color3f inputs:emissive_color_constant = (0.9619982, 0.992278, 0.9041606) (
                                        doc = "The emissive color when no emissive color texture is specified."
                                        hidden = false
                                        renderType = "color"
                                    )
                                    float inputs:emissive_intensity = 5 (
                                        doc = "Intensity of the emission"
                                        hidden = false
                                    )
                                }
                            }
                        }
                    }

                    over "_Joined_Solid_Geometry__12530__001" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </Looks/HighBayLens> (
                            bindMaterialAs = "weakerThanDescendants"
                        )

                        over "_Joined_Solid_Geometry__12530__Geometry_001" (
                            prepend apiSchemas = ["MaterialBindingAPI"]
                        )
                        {
                        }
                    }
                }

                def SphereLight "SphereLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                    color3f inputs:color = (0.95748264, 1, 0.85714287)
                    float inputs:colorTemperature = 5000
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 7.9
                    float inputs:intensity = 67.5
                    float inputs:radius = 0.05
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    double3 xformOp:rotateXYZ = (90, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-9.094947017729282e-13, -8.526512829121202e-13, 0.04838584732260642)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def Xform "Xform_mesh_03" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    prepend references = @./meshes/Rod.usd@
                )
                {
                    rel material:binding = </Looks/MetalRod> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (28.500000424683094, 28.500000424683094, 26.30000039190054)
                    double3 xformOp:translate = (-4.547473508864641e-13, 1.1368683772161603e-12, 2.712877571333138)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_06" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                prepend references = @./meshes/Highbay-Frame.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, -26.090517307551096)
                double3 xformOp:scale = (0.45, 0.45, 0.45)
                double3 xformOp:translate = (1060.4660853005034, -754.5449207423025, 116.83756427220943)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_2" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    prepend references = @./meshes/Highbay-Lens.usd@
                )
                {
                    rel material:binding = None (
                        bindMaterialAs = "strongerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0.22085475846699865)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    def Xform "Xform_mesh_2" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                        prepend references = @./meshes/Highbay-Source.usd@
                    )
                    {
                        rel material:binding = </Looks/LightSource> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                        double3 xformOp:rotateXYZ = (0, 0, 0)
                        double3 xformOp:scale = (0.5, 0.5, 0.1)
                        double3 xformOp:translate = (-3.183231456205249e-12, -7.275957614183426e-12, 0.33963338807291166)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                        over "Looks"
                        {
                            over "AperturePBR_Opacity"
                            {
                                over "Shader"
                                {
                                    color3f inputs:emissive_color_constant = (0.9619982, 0.992278, 0.9041606) (
                                        doc = "The emissive color when no emissive color texture is specified."
                                        hidden = false
                                        renderType = "color"
                                    )
                                    float inputs:emissive_intensity = 5 (
                                        doc = "Intensity of the emission"
                                        hidden = false
                                    )
                                }
                            }
                        }
                    }

                    over "_Joined_Solid_Geometry__12530__001" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </Looks/HighBayLens> (
                            bindMaterialAs = "weakerThanDescendants"
                        )

                        over "_Joined_Solid_Geometry__12530__Geometry_001" (
                            prepend apiSchemas = ["MaterialBindingAPI"]
                        )
                        {
                        }
                    }
                }

                def SphereLight "SphereLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                    color3f inputs:color = (0.95748264, 1, 0.85714287)
                    float inputs:colorTemperature = 5000
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 7.9
                    float inputs:intensity = 67.5
                    float inputs:radius = 0.05
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    double3 xformOp:rotateXYZ = (90, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-9.094947017729282e-13, -8.526512829121202e-13, 0.04838584732260642)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def Xform "Xform_mesh_03" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    prepend references = @./meshes/Rod.usd@
                )
                {
                    rel material:binding = </Looks/MetalRod> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (28.500000424683094, 28.500000424683094, 26.30000039190054)
                    double3 xformOp:translate = (-4.547473508864641e-13, 1.1368683772161603e-12, 2.712877571333138)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_07" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                prepend references = @./meshes/Highbay-Frame.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, -26.090517307551096)
                double3 xformOp:scale = (0.45, 0.45, 0.45)
                double3 xformOp:translate = (1074.4109881607476, -761.3735965554628, 116.83756427220943)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_2" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    prepend references = @./meshes/Highbay-Lens.usd@
                )
                {
                    rel material:binding = None (
                        bindMaterialAs = "strongerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0.22085475846699865)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    def Xform "Xform_mesh_2" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                        prepend references = @./meshes/Highbay-Source.usd@
                    )
                    {
                        rel material:binding = </Looks/LightSource> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                        double3 xformOp:rotateXYZ = (0, 0, 0)
                        double3 xformOp:scale = (0.5, 0.5, 0.1)
                        double3 xformOp:translate = (-3.183231456205249e-12, -7.275957614183426e-12, 0.33963338807291166)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                        over "Looks"
                        {
                            over "AperturePBR_Opacity"
                            {
                                over "Shader"
                                {
                                    color3f inputs:emissive_color_constant = (0.9619982, 0.992278, 0.9041606) (
                                        doc = "The emissive color when no emissive color texture is specified."
                                        hidden = false
                                        renderType = "color"
                                    )
                                    float inputs:emissive_intensity = 5 (
                                        doc = "Intensity of the emission"
                                        hidden = false
                                    )
                                }
                            }
                        }
                    }

                    over "_Joined_Solid_Geometry__12530__001" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </Looks/HighBayLens> (
                            bindMaterialAs = "weakerThanDescendants"
                        )

                        over "_Joined_Solid_Geometry__12530__Geometry_001" (
                            prepend apiSchemas = ["MaterialBindingAPI"]
                        )
                        {
                        }
                    }
                }

                def SphereLight "SphereLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                    color3f inputs:color = (0.95748264, 1, 0.85714287)
                    float inputs:colorTemperature = 5000
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 7.9
                    float inputs:intensity = 67.5
                    float inputs:radius = 0.05
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    double3 xformOp:rotateXYZ = (90, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-9.094947017729282e-13, -8.526512829121202e-13, 0.04838584732260642)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def Xform "Xform_mesh_03" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    prepend references = @./meshes/Rod.usd@
                )
                {
                    rel material:binding = </Looks/MetalRod> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (28.500000424683094, 28.500000424683094, 26.30000039190054)
                    double3 xformOp:translate = (-4.547473508864641e-13, 1.1368683772161603e-12, 2.712877571333138)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_08" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                prepend references = @./meshes/Highbay-Frame.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, -26.090517307551096)
                double3 xformOp:scale = (0.45, 0.45, 0.45)
                double3 xformOp:translate = (1090.7358405432044, -769.3677092240657, 116.83756427220943)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_2" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    prepend references = @./meshes/Highbay-Lens.usd@
                )
                {
                    rel material:binding = None (
                        bindMaterialAs = "strongerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0.22085475846699865)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    def Xform "Xform_mesh_2" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                        prepend references = @./meshes/Highbay-Source.usd@
                    )
                    {
                        rel material:binding = </Looks/LightSource> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                        double3 xformOp:rotateXYZ = (0, 0, 0)
                        double3 xformOp:scale = (0.5, 0.5, 0.1)
                        double3 xformOp:translate = (-3.183231456205249e-12, -7.275957614183426e-12, 0.33963338807291166)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                        over "Looks"
                        {
                            over "AperturePBR_Opacity"
                            {
                                over "Shader"
                                {
                                    color3f inputs:emissive_color_constant = (0.9619982, 0.992278, 0.9041606) (
                                        doc = "The emissive color when no emissive color texture is specified."
                                        hidden = false
                                        renderType = "color"
                                    )
                                    float inputs:emissive_intensity = 5 (
                                        doc = "Intensity of the emission"
                                        hidden = false
                                    )
                                }
                            }
                        }
                    }

                    over "_Joined_Solid_Geometry__12530__001" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </Looks/HighBayLens> (
                            bindMaterialAs = "weakerThanDescendants"
                        )

                        over "_Joined_Solid_Geometry__12530__Geometry_001" (
                            prepend apiSchemas = ["MaterialBindingAPI"]
                        )
                        {
                        }
                    }
                }

                def SphereLight "SphereLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                    color3f inputs:color = (0.95748264, 1, 0.85714287)
                    float inputs:colorTemperature = 5000
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 7.9
                    float inputs:intensity = 67.5
                    float inputs:radius = 0.05
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    double3 xformOp:rotateXYZ = (90, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-9.094947017729282e-13, -8.526512829121202e-13, 0.04838584732260642)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def Xform "Xform_mesh_03" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    prepend references = @./meshes/Rod.usd@
                )
                {
                    rel material:binding = </Looks/MetalRod> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (28.500000424683094, 28.500000424683094, 26.30000039190054)
                    double3 xformOp:translate = (-4.547473508864641e-13, 1.1368683772161603e-12, 2.712877571333138)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_09" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                prepend references = @./meshes/Highbay-Frame.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, -26.090517307551096)
                double3 xformOp:scale = (0.45, 0.45, 0.45)
                double3 xformOp:translate = (1065.3499419839663, -779.8772438516723, 116.83756427220945)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_2" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    prepend references = @./meshes/Highbay-Lens.usd@
                )
                {
                    rel material:binding = None (
                        bindMaterialAs = "strongerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0.22085475846699865)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    def Xform "Xform_mesh_2" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                        prepend references = @./meshes/Highbay-Source.usd@
                    )
                    {
                        rel material:binding = </Looks/LightSource> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                        double3 xformOp:rotateXYZ = (0, 0, 0)
                        double3 xformOp:scale = (0.5, 0.5, 0.1)
                        double3 xformOp:translate = (-3.183231456205249e-12, -7.275957614183426e-12, 0.33963338807291166)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                        over "Looks"
                        {
                            over "AperturePBR_Opacity"
                            {
                                over "Shader"
                                {
                                    color3f inputs:emissive_color_constant = (0.9619982, 0.992278, 0.9041606) (
                                        doc = "The emissive color when no emissive color texture is specified."
                                        hidden = false
                                        renderType = "color"
                                    )
                                    float inputs:emissive_intensity = 5 (
                                        doc = "Intensity of the emission"
                                        hidden = false
                                    )
                                }
                            }
                        }
                    }

                    over "_Joined_Solid_Geometry__12530__001" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </Looks/HighBayLens> (
                            bindMaterialAs = "weakerThanDescendants"
                        )

                        over "_Joined_Solid_Geometry__12530__Geometry_001" (
                            prepend apiSchemas = ["MaterialBindingAPI"]
                        )
                        {
                        }
                    }
                }

                def SphereLight "SphereLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                    color3f inputs:color = (0.95748264, 1, 0.85714287)
                    float inputs:colorTemperature = 5000
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 7.9
                    float inputs:intensity = 67.5
                    float inputs:radius = 0.05
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    double3 xformOp:rotateXYZ = (90, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-9.094947017729282e-13, -8.526512829121202e-13, 0.04838584732260642)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def Xform "Xform_mesh_03" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    prepend references = @./meshes/Rod.usd@
                )
                {
                    rel material:binding = </Looks/MetalRod> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (28.500000424683094, 28.500000424683094, 26.30000039190054)
                    double3 xformOp:translate = (-4.547473508864641e-13, 1.1368683772161603e-12, 2.712877571333138)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_10" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                prepend references = @./meshes/Highbay-Frame.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, -26.090517307551096)
                double3 xformOp:scale = (0.45, 0.45, 0.45)
                double3 xformOp:translate = (1081.6747943664257, -787.8713565202786, 116.83756427220945)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_2" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    prepend references = @./meshes/Highbay-Lens.usd@
                )
                {
                    rel material:binding = None (
                        bindMaterialAs = "strongerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0.22085475846699865)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    def Xform "Xform_mesh_2" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                        prepend references = @./meshes/Highbay-Source.usd@
                    )
                    {
                        rel material:binding = </Looks/LightSource> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                        double3 xformOp:rotateXYZ = (0, 0, 0)
                        double3 xformOp:scale = (0.5, 0.5, 0.1)
                        double3 xformOp:translate = (-3.183231456205249e-12, -7.275957614183426e-12, 0.33963338807291166)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                        over "Looks"
                        {
                            over "AperturePBR_Opacity"
                            {
                                over "Shader"
                                {
                                    color3f inputs:emissive_color_constant = (0.9619982, 0.992278, 0.9041606) (
                                        doc = "The emissive color when no emissive color texture is specified."
                                        hidden = false
                                        renderType = "color"
                                    )
                                    float inputs:emissive_intensity = 5 (
                                        doc = "Intensity of the emission"
                                        hidden = false
                                    )
                                }
                            }
                        }
                    }

                    over "_Joined_Solid_Geometry__12530__001" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </Looks/HighBayLens> (
                            bindMaterialAs = "weakerThanDescendants"
                        )

                        over "_Joined_Solid_Geometry__12530__Geometry_001" (
                            prepend apiSchemas = ["MaterialBindingAPI"]
                        )
                        {
                        }
                    }
                }

                def SphereLight "SphereLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                    color3f inputs:color = (0.95748264, 1, 0.85714287)
                    float inputs:colorTemperature = 5000
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 7.9
                    float inputs:intensity = 67.5
                    float inputs:radius = 0.05
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    double3 xformOp:rotateXYZ = (90, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-9.094947017729282e-13, -8.526512829121202e-13, 0.04838584732260642)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def Xform "Xform_mesh_03" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    prepend references = @./meshes/Rod.usd@
                )
                {
                    rel material:binding = </Looks/MetalRod> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (28.500000424683094, 28.500000424683094, 26.30000039190054)
                    double3 xformOp:translate = (-4.547473508864641e-13, 1.1368683772161603e-12, 2.712877571333138)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_13" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                prepend references = @./meshes/Highbay-Frame.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, -26.090517307551096)
                double3 xformOp:scale = (0.45, 0.45, 0.45)
                double3 xformOp:translate = (1093.44701258185, -793.636090961268, 116.83756427220943)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_2" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    prepend references = @./meshes/Highbay-Lens.usd@
                )
                {
                    rel material:binding = None (
                        bindMaterialAs = "strongerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0.22085475846699865)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    def Xform "Xform_mesh_2" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                        prepend references = @./meshes/Highbay-Source.usd@
                    )
                    {
                        rel material:binding = </Looks/LightSource> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                        double3 xformOp:rotateXYZ = (0, 0, 0)
                        double3 xformOp:scale = (0.5, 0.5, 0.1)
                        double3 xformOp:translate = (-3.183231456205249e-12, -7.275957614183426e-12, 0.33963338807291166)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                        over "Looks"
                        {
                            over "AperturePBR_Opacity"
                            {
                                over "Shader"
                                {
                                    color3f inputs:emissive_color_constant = (0.9619982, 0.992278, 0.9041606) (
                                        doc = "The emissive color when no emissive color texture is specified."
                                        hidden = false
                                        renderType = "color"
                                    )
                                    float inputs:emissive_intensity = 5 (
                                        doc = "Intensity of the emission"
                                        hidden = false
                                    )
                                }
                            }
                        }
                    }

                    over "_Joined_Solid_Geometry__12530__001" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </Looks/HighBayLens> (
                            bindMaterialAs = "weakerThanDescendants"
                        )

                        over "_Joined_Solid_Geometry__12530__Geometry_001" (
                            prepend apiSchemas = ["MaterialBindingAPI"]
                        )
                        {
                        }
                    }
                }

                def SphereLight "SphereLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                    color3f inputs:color = (0.95748264, 1, 0.85714287)
                    float inputs:colorTemperature = 5000
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 7.9
                    float inputs:intensity = 67.5
                    float inputs:radius = 0.05
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    double3 xformOp:rotateXYZ = (90, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-9.094947017729282e-13, -8.526512829121202e-13, 0.04838584732260642)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def Xform "Xform_mesh_03" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    prepend references = @./meshes/Rod.usd@
                )
                {
                    rel material:binding = </Looks/MetalRod> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (28.500000424683094, 28.500000424683094, 26.30000039190054)
                    double3 xformOp:translate = (-4.547473508864641e-13, 1.1368683772161603e-12, 2.712877571333138)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_15" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                prepend references = @./meshes/Highbay-Frame.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, -26.090517307551096)
                double3 xformOp:scale = (0.45, 0.45, 0.45)
                double3 xformOp:translate = (1102.508058758617, -775.132443665055, 116.83756427220943)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_2" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    prepend references = @./meshes/Highbay-Lens.usd@
                )
                {
                    rel material:binding = None (
                        bindMaterialAs = "strongerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0.22085475846699865)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    def Xform "Xform_mesh_2" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                        prepend references = @./meshes/Highbay-Source.usd@
                    )
                    {
                        rel material:binding = </Looks/LightSource> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                        double3 xformOp:rotateXYZ = (0, 0, 0)
                        double3 xformOp:scale = (0.5, 0.5, 0.1)
                        double3 xformOp:translate = (-3.183231456205249e-12, -7.275957614183426e-12, 0.33963338807291166)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                        over "Looks"
                        {
                            over "AperturePBR_Opacity"
                            {
                                over "Shader"
                                {
                                    color3f inputs:emissive_color_constant = (0.9619982, 0.992278, 0.9041606) (
                                        doc = "The emissive color when no emissive color texture is specified."
                                        hidden = false
                                        renderType = "color"
                                    )
                                    float inputs:emissive_intensity = 5 (
                                        doc = "Intensity of the emission"
                                        hidden = false
                                    )
                                }
                            }
                        }
                    }

                    over "_Joined_Solid_Geometry__12530__001" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </Looks/HighBayLens> (
                            bindMaterialAs = "weakerThanDescendants"
                        )

                        over "_Joined_Solid_Geometry__12530__Geometry_001" (
                            prepend apiSchemas = ["MaterialBindingAPI"]
                        )
                        {
                        }
                    }
                }

                def SphereLight "SphereLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                    color3f inputs:color = (0.95748264, 1, 0.85714287)
                    float inputs:colorTemperature = 5000
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 7.9
                    float inputs:intensity = 67.5
                    float inputs:radius = 0.05
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    double3 xformOp:rotateXYZ = (90, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-9.094947017729282e-13, -8.526512829121202e-13, 0.04838584732260642)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def Xform "Xform_mesh_03" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    prepend references = @./meshes/Rod.usd@
                )
                {
                    rel material:binding = </Looks/MetalRod> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (28.500000424683094, 28.500000424683094, 26.30000039190054)
                    double3 xformOp:translate = (-4.547473508864641e-13, 1.1368683772161603e-12, 2.712877571333138)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_16" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                prepend references = @./meshes/Highbay-Frame.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, -26.090517307551096)
                double3 xformOp:scale = (0.45, 0.45, 0.45)
                double3 xformOp:translate = (1051.0098903382902, -772.8550677337153, 116.83756427220945)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_2" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    prepend references = @./meshes/Highbay-Lens.usd@
                )
                {
                    rel material:binding = None (
                        bindMaterialAs = "strongerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0.22085475846699865)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    def Xform "Xform_mesh_2" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                        prepend references = @./meshes/Highbay-Source.usd@
                    )
                    {
                        rel material:binding = </Looks/LightSource> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                        double3 xformOp:rotateXYZ = (0, 0, 0)
                        double3 xformOp:scale = (0.5, 0.5, 0.1)
                        double3 xformOp:translate = (-3.183231456205249e-12, -7.275957614183426e-12, 0.33963338807291166)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                        over "Looks"
                        {
                            over "AperturePBR_Opacity"
                            {
                                over "Shader"
                                {
                                    color3f inputs:emissive_color_constant = (0.9619982, 0.992278, 0.9041606) (
                                        doc = "The emissive color when no emissive color texture is specified."
                                        hidden = false
                                        renderType = "color"
                                    )
                                    float inputs:emissive_intensity = 5 (
                                        doc = "Intensity of the emission"
                                        hidden = false
                                    )
                                }
                            }
                        }
                    }

                    over "_Joined_Solid_Geometry__12530__001" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = </Looks/HighBayLens> (
                            bindMaterialAs = "weakerThanDescendants"
                        )

                        over "_Joined_Solid_Geometry__12530__Geometry_001" (
                            prepend apiSchemas = ["MaterialBindingAPI"]
                        )
                        {
                        }
                    }
                }

                def SphereLight "SphereLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                    color3f inputs:color = (0.95748264, 1, 0.85714287)
                    float inputs:colorTemperature = 5000
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 7.9
                    float inputs:intensity = 67.5
                    float inputs:radius = 0.05
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    double3 xformOp:rotateXYZ = (90, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-9.094947017729282e-13, -8.526512829121202e-13, 0.04838584732260642)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }

                def Xform "Xform_mesh_03" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    prepend references = @./meshes/Rod.usd@
                )
                {
                    rel material:binding = </Looks/MetalRod> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (28.500000424683094, 28.500000424683094, 26.30000039190054)
                    double3 xformOp:translate = (-4.547473508864641e-13, 1.1368683772161603e-12, 2.712877571333138)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }
        }

        over "mesh_8BAC37FB2337DAD0"
        {
            token visibility = "inherited"

            def Xform "Xform_mesh_0" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (0.002, 0.002, 0.002)
                double3 xformOp:translate = (-4.183174643183677, -1.8504092755328498, 5.796968246301571)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.9601484, 1, 0.8030888) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 50 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 1215.8
                    float inputs:intensity = 148
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 115
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.4809758013763636e-14, 0, -116.33826232616593)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            over "mesh"
            {
                token visibility = "invisible"
            }

            def Xform "Xform_mesh_01" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (0.002, 0.002, 0.002)
                double3 xformOp:translate = (-4.183174643183624, 1.512473231442714, 5.645275424235391)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.9601484, 1, 0.8030888) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 50 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 1215.8
                    float inputs:intensity = 148
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 115
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.4809758013763636e-14, 0, -116.33826232616593)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_02" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (0.002, 0.002, 0.002)
                double3 xformOp:translate = (-4.183174643183677, 3.9120513727938486, 5.501579988642072)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.9601484, 1, 0.8030888) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 50 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 1215.8
                    float inputs:intensity = 148
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 115
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.4809758013763636e-14, 0, -116.33826232616593)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_03" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (0.002, 0.002, 0.002)
                double3 xformOp:translate = (0.4027909166114439, -1.8504092755328498, 5.796968246301571)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.9601484, 1, 0.8030888) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 50 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 1215.8
                    float inputs:intensity = 148
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 115
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.4809758013763636e-14, 0, -116.33826232616593)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_04" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (0.002, 0.002, 0.002)
                double3 xformOp:translate = (0.4027909166114725, 1.512473231442714, 5.645275424235391)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.9601484, 1, 0.8030888) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 50 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 1215.8
                    float inputs:intensity = 148
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 115
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.4809758013763636e-14, 0, -116.33826232616593)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_05" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (0.002, 0.002, 0.002)
                double3 xformOp:translate = (0.4027909166114439, 3.9120513727938486, 5.501579988642072)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.9601484, 1, 0.8030888) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 50 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 1215.8
                    float inputs:intensity = 148
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 115
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.4809758013763636e-14, 0, -116.33826232616593)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_06" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (0.002, 0.002, 0.002)
                double3 xformOp:translate = (4.461390640323624, -1.8504092755328498, 5.796968246301571)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.9601484, 1, 0.8030888) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 50 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 1215.8
                    float inputs:intensity = 148
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 115
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.4809758013763636e-14, 0, -116.33826232616593)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_07" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (0.002, 0.002, 0.002)
                double3 xformOp:translate = (4.461390640323659, 1.512473231442714, 5.645275424235391)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.9601484, 1, 0.8030888) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 50 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 1215.8
                    float inputs:intensity = 148
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 115
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.4809758013763636e-14, 0, -116.33826232616593)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_08" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (0.002, 0.002, 0.002)
                double3 xformOp:translate = (4.461390640323624, 3.9120513727938486, 5.501579988642072)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.9601484, 1, 0.8030888) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 50 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 1215.8
                    float inputs:intensity = 148
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 115
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.4809758013763636e-14, 0, -116.33826232616593)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_09" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (0.002, 0.002, 0.002)
                double3 xformOp:translate = (0.40279091661143873, -6.393295885135925, 5.388195540969945)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.9601484, 1, 0.8030888) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 50 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 1215.8
                    float inputs:intensity = 148
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 115
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.4809758013763636e-14, 0, -116.33826232616593)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_10" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (0.002, 0.002, 0.002)
                double3 xformOp:translate = (-4.183174643183676, -6.393295885135925, 5.388195540969945)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.9601484, 1, 0.8030888) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 50 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 1215.8
                    float inputs:intensity = 148
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 115
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.4809758013763636e-14, 0, -116.33826232616593)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_11" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (0.002, 0.002, 0.002)
                double3 xformOp:translate = (4.461390640323615, -6.393295885135925, 5.388195540969945)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.9601484, 1, 0.8030888) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 50 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 1215.8
                    float inputs:intensity = 148
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 115
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.4809758013763636e-14, 0, -116.33826232616593)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_12" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 45)
                double3 xformOp:scale = (0.002, 0.002, 0.002)
                double3 xformOp:translate = (-0.18792574514478724, 9.716482193954825, 5.286145246832589)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.9601484, 1, 0.8030888) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 50 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 1215.8
                    float inputs:intensity = 25
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 115
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.4809758013763636e-14, 0, -116.33826232616593)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_13" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 45)
                double3 xformOp:scale = (0.002, 0.002, 0.002)
                double3 xformOp:translate = (-4.344549930721244, 9.28714081973612, 5.3242971453124355)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.9601484, 1, 0.8030888) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 50 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 1215.8
                    float inputs:intensity = 25
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 115
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.4809758013763636e-14, 0, -116.33826232616593)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_14" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 45)
                double3 xformOp:scale = (0.002, 0.002, 0.002)
                double3 xformOp:translate = (3.911807995122173, 9.675348177400068, 5.304140901709991)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.9601484, 1, 0.8030888) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 50 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 1215.8
                    float inputs:intensity = 25
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 115
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.4809758013763636e-14, 0, -116.33826232616593)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_15" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 45)
                double3 xformOp:scale = (0.002, 0.002, 0.002)
                double3 xformOp:translate = (-0.6247607290475936, 13.006930021409888, 5.3242971453124355)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.9601484, 1, 0.8030888) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 50 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 1215.8
                    float inputs:intensity = 25
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 115
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.4809758013763636e-14, 0, -116.33826232616593)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_16" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 45)
                double3 xformOp:scale = (0.002, 0.002, 0.002)
                double3 xformOp:translate = (3.5318634565289257, 13.436271395628603, 5.286145246832589)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.9601484, 1, 0.8030888) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 50 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 1215.8
                    float inputs:intensity = 25
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 115
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.4809758013763636e-14, 0, -116.33826232616593)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_17" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 45)
                double3 xformOp:scale = (0.002, 0.002, 0.002)
                double3 xformOp:translate = (3.1779284995332944, 16.809619249990853, 5.324297145312433)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.9601484, 1, 0.8030888) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 50 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 1215.8
                    float inputs:intensity = 25
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 115
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.4809758013763636e-14, 0, -116.33826232616593)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_18" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 45)
                double3 xformOp:scale = (0.002, 0.002, 0.002)
                double3 xformOp:translate = (1.1555538270231436, 18.83199392250135, 5.32429714531243)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.9601484, 1, 0.8030888) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 50 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 1215.8
                    float inputs:intensity = 25
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 115
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.4809758013763636e-14, 0, -116.33826232616593)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_19" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 45)
                double3 xformOp:scale = (0.002, 0.002, 0.002)
                double3 xformOp:translate = (-2.6471354015578905, 15.029304693920256, 5.324297145312433)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.9601484, 1, 0.8030888) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 50 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 1215.8
                    float inputs:intensity = 25
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 115
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.4809758013763636e-14, 0, -116.33826232616593)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_20" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 45)
                double3 xformOp:scale = (0.002, 0.002, 0.002)
                double3 xformOp:translate = (-6.36692460323164, 11.309515492246405, 5.324297145312433)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.9601484, 1, 0.8030888) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 50 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 1215.8
                    float inputs:intensity = 25
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 115
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.4809758013763636e-14, 0, -116.33826232616593)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_22" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 45)
                double3 xformOp:scale = (0.002, 0.002, 0.002)
                double3 xformOp:translate = (-2.0064960814284354, 19.53489008355621, 5.324297145312433)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.9601484, 1, 0.8030888) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 50 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 1215.8
                    float inputs:intensity = 25
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 115
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.4809758013763636e-14, 0, -116.33826232616593)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_23" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 45)
                double3 xformOp:scale = (0.002, 0.002, 0.002)
                double3 xformOp:translate = (-5.726285283102702, 15.815100881881907, 5.324297145312433)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.9601484, 1, 0.8030888) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 50 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 1215.8
                    float inputs:intensity = 25
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 115
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.4809758013763636e-14, 0, -116.33826232616593)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_24" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 45)
                double3 xformOp:scale = (0.002, 0.002, 0.002)
                double3 xformOp:translate = (-5.983093516605107, 19.769928377384435, 5.324297145312433)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.9601484, 1, 0.8030888) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 50 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 1215.8
                    float inputs:intensity = 25
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 115
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.4809758013763636e-14, 0, -116.33826232616593)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_21" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (0.002, 0.002, 0.002)
                double3 xformOp:translate = (0.40279091661143873, -10.4151643399259, 6.248701749129185)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.9601484, 1, 0.8030888) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 50 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 1215.8
                    float inputs:intensity = 10
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 115
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.4809758013763636e-14, 0, -116.33826232616593)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_25" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (0.002, 0.002, 0.002)
                double3 xformOp:translate = (-4.183174643183676, -10.4151643399259, 6.248701749129185)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.9601484, 1, 0.8030888) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 50 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 1215.8
                    float inputs:intensity = 10
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 115
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.4809758013763636e-14, 0, -116.33826232616593)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_26" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (0.002, 0.002, 0.002)
                double3 xformOp:translate = (4.461390640323615, -10.4151643399259, 6.248701749129185)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.9601484, 1, 0.8030888) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 50 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 1215.8
                    float inputs:intensity = 10
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 115
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.4809758013763636e-14, 0, -116.33826232616593)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_27" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (0.002, 0.002, 0.002)
                double3 xformOp:translate = (0.40279091661143873, -13.430673552489424, 6.401556114068649)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.9601484, 1, 0.8030888) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 50 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 1215.8
                    float inputs:intensity = 10
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 115
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.4809758013763636e-14, 0, -116.33826232616593)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_28" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (0.002, 0.002, 0.002)
                double3 xformOp:translate = (-4.183174643183676, -13.430673552489424, 6.401556114068649)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.9601484, 1, 0.8030888) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 50 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 1215.8
                    float inputs:intensity = 10
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 115
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.4809758013763636e-14, 0, -116.33826232616593)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_29" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (0.002, 0.002, 0.002)
                double3 xformOp:translate = (4.461390640323615, -13.430673552489424, 6.401556114068649)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.9601484, 1, 0.8030888) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 50 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 1215.8
                    float inputs:intensity = 10
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 115
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.4809758013763636e-14, 0, -116.33826232616593)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_30" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (0.002, 0.002, 0.002)
                double3 xformOp:translate = (0.40279091661143873, -16.659799886235877, 6.556101663223498)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.9601484, 1, 0.8030888) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 50 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 1215.8
                    float inputs:intensity = 10
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 115
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.4809758013763636e-14, 0, -116.33826232616593)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_31" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (0.002, 0.002, 0.002)
                double3 xformOp:translate = (-4.183174643183676, -16.659799886235877, 6.556101663223498)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.9601484, 1, 0.8030888) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 50 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 1215.8
                    float inputs:intensity = 10
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 115
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.4809758013763636e-14, 0, -116.33826232616593)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_32" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (0.002, 0.002, 0.002)
                double3 xformOp:translate = (4.461390640323615, -16.659799886235877, 6.556101663223498)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.9601484, 1, 0.8030888) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 50 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 1215.8
                    float inputs:intensity = 10
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 115
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.4809758013763636e-14, 0, -116.33826232616593)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_33" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (0.002, 0.002, 0.002)
                double3 xformOp:translate = (0.40279091661143873, -19.489351816949608, 6.781937382711116)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.9601484, 1, 0.8030888) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 50 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 1215.8
                    float inputs:intensity = 10
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 115
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.4809758013763636e-14, 0, -116.33826232616593)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_34" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (0.002, 0.002, 0.002)
                double3 xformOp:translate = (-4.183174643183676, -19.489351816949608, 6.781937382711116)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.9601484, 1, 0.8030888) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 50 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 1215.8
                    float inputs:intensity = 10
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 115
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.4809758013763636e-14, 0, -116.33826232616593)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_35" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (0.002, 0.002, 0.002)
                double3 xformOp:translate = (4.461390640323615, -19.489351816949608, 6.781937382711116)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.9601484, 1, 0.8030888) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 50 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    bool inputs:enableColorTemperature = 1
                    float inputs:height = 1215.8
                    float inputs:intensity = 10
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 115
                    double3 xformOp:rotateXYZ = (0, 0, 90)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.4809758013763636e-14, 0, -116.33826232616593)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }
        }

        over "mesh_A2721FE40B34519E"
        {
            custom int preserveOriginalDrawCall = 1

            def SphereLight "HighwayPole" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:colorTemperature = 5000
                bool inputs:enableColorTemperature = 1
                float inputs:exposure = 9.1
                float inputs:intensity = 300
                float inputs:radius = 0.025
                float inputs:shaping:cone:angle = 90
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, -6.000000089406967, 12.800000190734863)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_82266CE244131204" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </RootNode/Looks/mat_F5F58B17A49A6BB1> (
                bindMaterialAs = "weakerThanDescendants"
            )
            custom int preserveOriginalDrawCall = 1
            token visibility = "inherited"

            def Xform "Xform_mesh_0" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                prepend references = @./meshes/WallPack-Base.usd@
            )
            {
                rel material:binding = </Looks/WallMount> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (90, 0, 35)
                double3 xformOp:scale = (0.7000000104308128, 0.7000000104308128, 0.7000000104308128)
                double3 xformOp:translate = (1960.2605513964518, -558.7700049241218, 112.85025155979336)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    prepend references = @./meshes/WallPack-Frame.usd@
                )
                {
                    rel material:binding = None (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 3.183231456205249e-12)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    def Xform "Xform_mesh_1" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                        prepend references = @./meshes/WallPack-Lens.usd@
                    )
                    {
                        rel material:binding = </Looks/LightSource> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                        double3 xformOp:rotateXYZ = (0, 0, 0)
                        double3 xformOp:scale = (1, 1, 1)
                        double3 xformOp:translate = (0, 0, 0)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                        over "_Extrusion__52301_" (
                            prepend apiSchemas = ["MaterialBindingAPI"]
                        )
                        {
                            rel material:binding = None (
                                bindMaterialAs = "weakerThanDescendants"
                            )
                        }
                    }

                    over "_Joined_Solid_Geometry__47937_"
                    {
                        over "_Joined_Solid_Geometry__47937__Geometry" (
                            prepend apiSchemas = ["MaterialBindingAPI"]
                        )
                        {
                            rel material:binding = </Looks/WallMount> (
                                bindMaterialAs = "weakerThanDescendants"
                            )
                        }
                    }
                }

                over "_Blend__50136_" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = None (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    float3 xformOp:rotateXYZ = (0, 0, 0)
                    float3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "_Blend__50136__Geometry" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = None (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }
                }

                def SphereLight "SphereLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                    float inputs:colorTemperature = 4500
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 0
                    float inputs:intensity = 250
                    float inputs:radius = 0.05
                    float inputs:shaping:cone:angle = 79.4
                    float inputs:shaping:cone:softness = 0.8
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    double3 xformOp:rotateXYZ = (-78.70000117272139, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-0.08876583619075973, -0.2954875439123441, 1.083664418036733)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_01" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                prepend references = @./meshes/WallPack-Base.usd@
            )
            {
                rel material:binding = </Looks/WallMount> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double3 xformOp:rotateXYZ = (90, 0, 44.56268314389712)
                double3 xformOp:scale = (0.7000000104308128, 0.7000000104308128, 0.7000000104308128)
                double3 xformOp:translate = (1931.8227935532784, -568.0685379143517, 107.41891573739085)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    prepend references = @./meshes/WallPack-Frame.usd@
                )
                {
                    rel material:binding = None (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 3.183231456205249e-12)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    def Xform "Xform_mesh_1" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                        prepend references = @./meshes/WallPack-Lens.usd@
                    )
                    {
                        rel material:binding = </Looks/LightSource> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                        double3 xformOp:rotateXYZ = (0, 0, 0)
                        double3 xformOp:scale = (1, 1, 1)
                        double3 xformOp:translate = (0, 0, 0)
                        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                        over "_Extrusion__52301_" (
                            prepend apiSchemas = ["MaterialBindingAPI"]
                        )
                        {
                            rel material:binding = None (
                                bindMaterialAs = "weakerThanDescendants"
                            )
                        }
                    }

                    over "_Joined_Solid_Geometry__47937_"
                    {
                        over "_Joined_Solid_Geometry__47937__Geometry" (
                            prepend apiSchemas = ["MaterialBindingAPI"]
                        )
                        {
                            rel material:binding = </Looks/WallMount> (
                                bindMaterialAs = "weakerThanDescendants"
                            )
                        }
                    }
                }

                over "_Blend__50136_" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = None (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    float3 xformOp:rotateXYZ = (0, 0, 0)
                    float3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "_Blend__50136__Geometry" (
                        prepend apiSchemas = ["MaterialBindingAPI"]
                    )
                    {
                        rel material:binding = None (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }
                }

                def SphereLight "SphereLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                    float inputs:colorTemperature = 4500
                    bool inputs:enableColorTemperature = 1
                    float inputs:exposure = 0
                    float inputs:intensity = 250
                    float inputs:radius = 0.05
                    float inputs:shaping:cone:angle = 79.4
                    float inputs:shaping:cone:softness = 0.8
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    double3 xformOp:rotateXYZ = (-78.70000117272139, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-0.08876583619075973, -0.2954875439123441, 1.083664418036733)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }
        }

        over "mesh_7C39E9C3D3DEB834"
        {
            custom int preserveOriginalDrawCall = 0
        }

        over "mesh_F9DBF7AEAE6E594E"
        {
            custom int preserveOriginalDrawCall = 0
        }

        over "mesh_F06DCF92D807B5A5"
        {
            custom int preserveOriginalDrawCall = 0
        }

        over "mesh_FF2CB4355053F19D"
        {
            custom int preserveOriginalDrawCall = 0
        }

        over "mesh_53D8A0D543036B18"
        {
            custom int preserveOriginalDrawCall = 0
        }

        over "mesh_B0ED77312581AA60"
        {
            custom int preserveOriginalDrawCall = 0
        }

        over "mesh_C792BE495DBAD28C"
        {
            custom int preserveOriginalDrawCall = 0
        }

        over "mesh_C3549D463DF4EA3D"
        {
            custom int preserveOriginalDrawCall = 0
        }

        over "mesh_5CD09FCCE8E8EEBB"
        {
            custom int preserveOriginalDrawCall = 0
        }

        over "mesh_C0ADDA310A616562"
        {
            custom int preserveOriginalDrawCall = 0
        }

        over "mesh_4BEDA7B6094AA05F"
        {
            custom int preserveOriginalDrawCall = 0
        }

        over "mesh_84962F6ADA69CCA2"
        {
            custom int preserveOriginalDrawCall = 0
        }

        over "mesh_EBC93FC93CED86FB"
        {
            custom int preserveOriginalDrawCall = 0
        }

        over "mesh_47C8EBA5EDBC424F"
        {
            custom int preserveOriginalDrawCall = 0
        }

        over "mesh_7FC5B1472309A18B"
        {
            custom int preserveOriginalDrawCall = 0
        }

        over "mesh_9964D647EE5CCA80"
        {
            custom int preserveOriginalDrawCall = 0
        }

        over "mesh_129C2D5E2CC5A2C5"
        {
            custom int preserveOriginalDrawCall = 0
        }

        over "mesh_311CF2BA2E1A6D0B"
        {
            custom int preserveOriginalDrawCall = 0
        }

        over "mesh_736EA7A37D72599D"
        {
            custom int preserveOriginalDrawCall = 0
        }

        over "mesh_898A9B7C6A0BA40A"
        {
            custom int preserveOriginalDrawCall = 0
        }

        over "mesh_E3B6B2D49C8A1BDB"
        {
            custom int preserveOriginalDrawCall = 0
        }

        over "mesh_D8DF95321B1B717C"
        {
            custom int preserveOriginalDrawCall = 0
        }

        over "mesh_76A67CA6554D4A4B"
        {
            custom int preserveOriginalDrawCall = 0
        }

        over "mesh_7136A44207FA1571"
        {
            custom int preserveOriginalDrawCall = 0
        }

        over "mesh_979ECE5858F5608F"
        {
            custom int preserveOriginalDrawCall = 0
        }

        over "mesh_EB42BB76D977C52E"
        {
            custom int preserveOriginalDrawCall = 0
        }

        over "mesh_8E1B2F6766527504"
        {
            custom int preserveOriginalDrawCall = 1

            def SphereLight "RedPoleLight" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:intensity = 200
                float inputs:radius = 0.25
                float inputs:shaping:cone:angle = 90
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (0, 0, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, -3.300000049173832, 9.200000137090683)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_CAB0D515750A8C02"
        {
            custom int preserveOriginalDrawCall = 0
        }

        over "mesh_B4B9B8A430099244"
        {
            custom int preserveOriginalDrawCall = 0
        }

        over "mesh_A0BF3512CC138865"
        {
            custom int preserveOriginalDrawCall = 0
        }

        over "mesh_C485324B2E1BDE21"
        {
            custom int preserveOriginalDrawCall = 0
        }

        over "mesh_DA072E74F557CFAA"
        {
            custom int preserveOriginalDrawCall = 0
        }

        over "mesh_4A4EDB083CE00331"
        {
            custom int preserveOriginalDrawCall = 0
        }

        over "mesh_695F5123880F8801"
        {
            custom int preserveOriginalDrawCall = 0
        }

        over "mesh_51773F443F34EB03"
        {
            custom int preserveOriginalDrawCall = 0
        }

        over "mesh_4A5D8A9AB45A4CDA"
        {
            custom int preserveOriginalDrawCall = 0
        }

        over "mesh_5DC4D6EC8F4CCD47"
        {
            custom int preserveOriginalDrawCall = 0
        }

        over "mesh_844592909579A0AC"
        {
            custom int preserveOriginalDrawCall = 1
            token visibility = "inherited"

            def SphereLight "Highway201EastSign" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:colorTemperature = 4000
                bool inputs:enableColorTemperature = 1
                float inputs:exposure = 0
                float inputs:intensity = 750
                float inputs:radius = 0.05
                float inputs:shaping:cone:angle = 53.100002
                float inputs:shaping:cone:softness = 0.4
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                token visibility = "inherited"
                double3 xformOp:rotateXYZ = (0, -117.80000175535679, 7.600000113248825)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (1502.700022391975, 891.2000132799149, 119.20000177621841)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "Highway201EastSign_01" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:colorTemperature = 4000
                bool inputs:enableColorTemperature = 1
                float inputs:exposure = 0
                float inputs:intensity = 750
                float inputs:radius = 0.05
                float inputs:shaping:cone:angle = 53.100002
                float inputs:shaping:cone:softness = 0.4
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                token visibility = "inherited"
                double3 xformOp:rotateXYZ = (0, -117.80000175535679, -4.90000007301569)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (1502.700022391975, 894.6000133305788, 119.20000177621851)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "Highway201EastSign_03" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:colorTemperature = 4000
                bool inputs:enableColorTemperature = 1
                float inputs:exposure = 0
                float inputs:intensity = 750
                float inputs:radius = 0.05
                float inputs:shaping:cone:angle = 53.100002
                float inputs:shaping:cone:softness = 0.4
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                token visibility = "inherited"
                double3 xformOp:rotateXYZ = (10.000000149011612, -117.80000175535679, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (1547.7000223919756, 893.6000133305788, 132.60000197589397)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "Highway201EastSign_04" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:colorTemperature = 4000
                bool inputs:enableColorTemperature = 1
                float inputs:exposure = 0
                float inputs:intensity = 750
                float inputs:radius = 0.05
                float inputs:shaping:cone:angle = 53.100002
                float inputs:shaping:cone:softness = 0.4
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                token visibility = "inherited"
                double3 xformOp:rotateXYZ = (10.000000149011612, -117.80000175535679, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (1548.8000230789185, 889.1000132486224, 132.60000197589395)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "Highway201EastSign_05" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:colorTemperature = 4000
                bool inputs:enableColorTemperature = 1
                float inputs:exposure = 0
                float inputs:intensity = 750
                float inputs:radius = 0.05
                float inputs:shaping:cone:angle = 53.100002
                float inputs:shaping:cone:softness = 0.4
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                token visibility = "inherited"
                double3 xformOp:rotateXYZ = (10.000000149011612, -117.80000175535679, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (1549.9000230953097, 886.0000132024288, 132.60000197589343)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "Highway201EastSign_06" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:colorTemperature = 4000
                bool inputs:enableColorTemperature = 1
                float inputs:exposure = 0
                float inputs:intensity = 750
                float inputs:radius = 0.05
                float inputs:shaping:cone:angle = 53.100002
                float inputs:shaping:cone:softness = 0.4
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                token visibility = "inherited"
                double3 xformOp:rotateXYZ = (10.000000149011612, -117.80000175535679, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (1551.2000231146812, 881.5000131353736, 132.60000197589372)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_290B4F5D3B41DD2A"
        {
            custom int preserveOriginalDrawCall = 1
            token visibility = "inherited"

            def Xform "Xform_mesh_0" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 90)
                double3 xformOp:scale = (0.0025, 0.0025, 0.0025)
                double3 xformOp:translate = (1965.0000000000023, 949.9999999999995, 125.10000000000001)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, -0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.96401, 1, 0.8880309) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 4.5 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    float inputs:height = 109
                    float inputs:intensity = 15
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 1271
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.1641532182693481e-10, 0, -127.2000018954277)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_01" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 90)
                double3 xformOp:scale = (0.0025, 0.0025, 0.0025)
                double3 xformOp:translate = (1973.0000000000023, 949.9999999999995, 125.10000000000001)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, -0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.96401, 1, 0.8880309) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 4.5 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    float inputs:height = 109
                    float inputs:intensity = 15
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 1271
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.1641532182693481e-10, 0, -127.2000018954277)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_02" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 90)
                double3 xformOp:scale = (0.0025, 0.0025, 0.0025)
                double3 xformOp:translate = (1965.0000000000023, 957.9999999999997, 125.10000000000001)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, -0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.96401, 1, 0.8880309) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 4.5 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    float inputs:height = 109
                    float inputs:intensity = 15
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 1271
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.1641532182693481e-10, 0, -127.2000018954277)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_03" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 90)
                double3 xformOp:scale = (0.0025, 0.0025, 0.0025)
                double3 xformOp:translate = (1973.0000000000023, 957.9999999999997, 125.10000000000001)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, -0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.96401, 1, 0.8880309) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 4.5 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    float inputs:height = 109
                    float inputs:intensity = 15
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 1271
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.1641532182693481e-10, 0, -127.2000018954277)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_04" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 90)
                double3 xformOp:scale = (0.0025, 0.0025, 0.0025)
                double3 xformOp:translate = (1965.0000000000023, 966.9999999999993, 125.10000000000001)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, -0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.96401, 1, 0.8880309) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 4.5 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    float inputs:height = 109
                    float inputs:intensity = 15
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 1271
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.1641532182693481e-10, 0, -127.2000018954277)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_05" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, 0, 90)
                double3 xformOp:scale = (0.0025, 0.0025, 0.0025)
                double3 xformOp:translate = (1973.0000000000023, 966.9999999999993, 125.10000000000001)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, -0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.96401, 1, 0.8880309) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 4.5 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    float inputs:height = 109
                    float inputs:intensity = 15
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 1271
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.1641532182693481e-10, 0, -127.2000018954277)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_06" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, -1.1000000163912773, 90)
                double3 xformOp:scale = (0.0025, 0.0025, 0.0025)
                double3 xformOp:translate = (1965.0000000000023, 976.9999999999993, 125.1)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, -0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.96401, 1, 0.8880309) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 4.5 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    float inputs:height = 109
                    float inputs:intensity = 15
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 1271
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.1641532182693481e-10, 0, -127.2000018954277)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_07" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, -1.1000000163912773, 90)
                double3 xformOp:scale = (0.0025, 0.0025, 0.0025)
                double3 xformOp:translate = (1973.0000000000023, 976.9999999999993, 125.1)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, -0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.96401, 1, 0.8880309) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 4.5 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    float inputs:height = 109
                    float inputs:intensity = 15
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 1271
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.1641532182693481e-10, 0, -127.2000018954277)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_08" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, -1.700000025331974, 90)
                double3 xformOp:scale = (0.0025, 0.0025, 0.0025)
                double3 xformOp:translate = (1965.0000000000023, 985.9999999999991, 125.3)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, -0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.96401, 1, 0.8880309) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 4.5 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    float inputs:height = 109
                    float inputs:intensity = 15
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 1271
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.1641532182693481e-10, 0, -127.2000018954277)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            def Xform "Xform_mesh_09" (
                prepend references = @./meshes/vaporwrap_4ft-housing.usd@
            )
            {
                double3 xformOp:rotateXYZ = (0, -1.700000025331974, 90)
                double3 xformOp:scale = (0.0025, 0.0025, 0.0025)
                double3 xformOp:translate = (1973.0000000000023, 985.9999999999991, 125.3)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                def Xform "Xform_mesh_1" (
                    prepend references = @./meshes/vaporwrap_4ft-lens.usd@
                )
                {
                    double3 xformOp:rotateXYZ = (0, -0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                    over "Looks"
                    {
                        over "AperturePBR_Opacity"
                        {
                            over "Shader"
                            {
                                color3f inputs:emissive_color_constant = (0.96401, 1, 0.8880309) (
                                    doc = "The emissive color when no emissive color texture is specified."
                                    hidden = false
                                    renderType = "color"
                                )
                                float inputs:emissive_intensity = 4.5 (
                                    doc = "Intensity of the emission"
                                    hidden = false
                                )
                            }
                        }
                    }
                }

                def RectLight "RectLight" (
                    prepend apiSchemas = ["ShapingAPI"]
                )
                {
                    float3[] extent = [(-0.5, -0.5, -0), (0.5, 0.5, 0)]
                    float inputs:height = 109
                    float inputs:intensity = 15
                    float inputs:shaping:cone:angle = 180
                    float inputs:shaping:cone:softness
                    float inputs:shaping:focus
                    color3f inputs:shaping:focusTint
                    asset inputs:shaping:ies:file
                    float inputs:width = 1271
                    double3 xformOp:rotateXYZ = (0, 0, 0)
                    double3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.1641532182693481e-10, 0, -127.2000018954277)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }
        }

        over "mesh_9651245CE1698942"
        {
            over "mesh"
            {
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_EC25A794186D7E0A"
        {
            custom int preserveOriginalDrawCall = 0
        }

        over "mesh_F6C2DE86922C4FF3"
        {
            custom int preserveOriginalDrawCall = 0
        }

        over "mesh_F10B8F117D1003EC"
        {
            token visibility = "inherited"
        }

        over "mesh_FE25B0F782D19C53"
        {
            token visibility = "invisible"
        }

        over "mesh_A16F912D1153B3E7"
        {
            token visibility = "inherited"
        }

        over "mesh_CC85528BE95CB75E"
        {
            token visibility = "invisible"
        }

        over "mesh_AF302E3EFA05E951"
        {
            custom int preserveOriginalDrawCall = 0
        }

        over "mesh_8D13483CD01C5636"
        {
            custom int preserveOriginalDrawCall = 0
        }

        over "mesh_638D3CAC57C2E767"
        {
            custom int preserveOriginalDrawCall = 0
        }

        over "mesh_56A549A08D150522"
        {
            custom int preserveOriginalDrawCall = 0
        }

        over "mesh_799026D52CC54FEA"
        {
            custom int preserveOriginalDrawCall = 0
        }

        over "mesh_D7245504A4C14495"
        {
            custom int preserveOriginalDrawCall = 0
        }

        over "mesh_5516421DEADE0A23"
        {
            custom int preserveOriginalDrawCall = 0
        }

        over "mesh_CFA7A57DF9164613"
        {
            custom int preserveOriginalDrawCall = 0
        }

        over "mesh_60CB88F381A81B66"
        {
            token visibility = "inherited"

            over "mesh"
            {
                token visibility = "inherited"
            }
        }

        over "mesh_D64CA34CD69869C0"
        {
            custom int preserveOriginalDrawCall = 1

            def SphereLight "PoliceCarLightBar" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                color3f inputs:color = (0.22007722, 0.35937166, 1)
                float inputs:exposure = 0
                float inputs:intensity = 5000
                float inputs:radius = 0.01
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (90, 0, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-0.05, -0.5, 1.45)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "PoliceCarLightBar_01" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                color3f inputs:color = (1, 1, 1)
                float inputs:exposure = 0
                float inputs:intensity = 5000
                float inputs:radius = 0.01
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (90, 0, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0.03, -0.36, 1.45)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "PoliceCarLightBar_02" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                color3f inputs:color = (0.22007722, 0.35937166, 1)
                float inputs:exposure = 0
                float inputs:intensity = 5000
                float inputs:radius = 0.01
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (90, 0, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0.1, -0.19, 1.45)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "PoliceCarLightBar_03" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                color3f inputs:color = (1, 1, 1)
                float inputs:exposure = 0
                float inputs:intensity = 500
                float inputs:radius = 0.01
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (90, 0, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0.2, 0, 1.45)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "PoliceCarLightBar_04" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                color3f inputs:color = (1, 0.20077223, 0.20077223)
                float inputs:exposure = 0
                float inputs:intensity = 5000
                float inputs:radius = 0.01
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (90, 0, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0.1, 0.2, 1.45)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "PoliceCarLightBar_05" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                color3f inputs:color = (1, 1, 1)
                float inputs:exposure = 0
                float inputs:intensity = 500
                float inputs:radius = 0.01
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (90, 0, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0.02, 0.35, 1.45)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def SphereLight "PoliceCarLightBar_06" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                color3f inputs:color = (1, 0, 0)
                float inputs:exposure = 0
                float inputs:intensity = 5000
                float inputs:radius = 0.01
                float inputs:shaping:cone:angle = 180
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (90, 0, 90)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-0.05, 0.5, 1.45)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_EA5FA7241B358CA2"
        {
            custom int preserveOriginalDrawCall = 1

            def SphereLight "HelioSpot" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:colorTemperature = 8000
                bool inputs:enableColorTemperature = 1
                float inputs:intensity = 30000
                float inputs:radius = 0.5
                float inputs:shaping:cone:angle = 54.7
                float inputs:shaping:cone:softness = 0.2
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (2.2000000327825546, 0, 0.30000000447034836)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }

        over "mesh_0BDC98CEF36F99F3"
        {
            custom int preserveOriginalDrawCall = 1

            def SphereLight "SphereLight" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
                float inputs:colorTemperature = 85000
                bool inputs:enableColorTemperature = 1
                float inputs:exposure = 1.9
                float inputs:intensity = 5000
                float inputs:radius = 0.5
                float inputs:shaping:cone:angle = 63.600002
                float inputs:shaping:cone:softness
                float inputs:shaping:focus
                color3f inputs:shaping:focusTint
                asset inputs:shaping:ies:file
                double3 xformOp:rotateXYZ = (0, 0, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (2.3000000342726707, 0, 0.4000000059604645)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }
    }

    over "instances"
    {
        over "inst_82266CE244131204_0"
        {
            token visibility = "invisible"

            over "mesh"
            {
                token visibility = "inherited"
            }
        }

        over "inst_3FCFB6F859A6A0B4_0"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "inst_BCC3576AFE23E2E7_0"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "inst_3E1F0C06ECBEB38C_0"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "inst_DED58212E948DBFE_0"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "inst_A31C73480C31DD94_0"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "inst_7C39E9C3D3DEB834_0"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "inst_F9DBF7AEAE6E594E_0"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "inst_F06DCF92D807B5A5_0"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "inst_FF2CB4355053F19D_0"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "inst_53D8A0D543036B18_0"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "inst_B0ED77312581AA60_0"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "inst_C792BE495DBAD28C_0"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "inst_C3549D463DF4EA3D_0"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "inst_5CD09FCCE8E8EEBB_0"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "inst_C0ADDA310A616562_0"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "inst_4BEDA7B6094AA05F_0"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "inst_84962F6ADA69CCA2_0"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "inst_EBC93FC93CED86FB_0"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "inst_47C8EBA5EDBC424F_0"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "inst_7FC5B1472309A18B_0"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "inst_9964D647EE5CCA80_0"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "inst_129C2D5E2CC5A2C5_0"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "inst_311CF2BA2E1A6D0B_0"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "inst_94468480C3AFE213_0"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "inst_76A67CA6554D4A4B_0"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "inst_D8DF95321B1B717C_0"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "inst_E3B6B2D49C8A1BDB_0"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "inst_736EA7A37D72599D_0"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "inst_898A9B7C6A0BA40A_0"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "inst_7136A44207FA1571_0"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "inst_979ECE5858F5608F_0"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "inst_EB42BB76D977C52E_0"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "inst_CAB0D515750A8C02_0"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "inst_B4B9B8A430099244_0"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "inst_58AD2FF701E6285F_0"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "inst_048DDEA4580D8397_0"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "inst_A0BF3512CC138865_0"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "inst_C485324B2E1BDE21_0"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "inst_DA072E74F557CFAA_0"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "inst_4A4EDB083CE00331_0"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "inst_695F5123880F8801_0"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "inst_51773F443F34EB03_0"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "inst_4A5D8A9AB45A4CDA_0"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "inst_5DC4D6EC8F4CCD47_0"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "inst_290B4F5D3B41DD2A_0"
        {
            over "Xform_mesh_01" (
                active = false
            )
            {
            }

            over "Xform_mesh_02" (
                active = false
            )
            {
            }

            over "Xform_mesh_03" (
                active = false
            )
            {
            }

            over "Xform_mesh_04" (
                active = false
            )
            {
            }

            over "Xform_mesh_05" (
                active = false
            )
            {
            }

            over "Xform_mesh_06" (
                active = false
            )
            {
            }

            over "Xform_mesh_07" (
                active = false
            )
            {
            }

            over "Xform_mesh_08" (
                active = false
            )
            {
            }

            over "Xform_mesh_09" (
                active = false
            )
            {
            }

            over "Xform_mesh_10" (
                active = false
            )
            {
            }

            over "Xform_mesh_11" (
                active = false
            )
            {
            }
        }

        over "inst_EC25A794186D7E0A_0"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "inst_F6C2DE86922C4FF3_0"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "inst_AF302E3EFA05E951_0"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "inst_8D13483CD01C5636_0"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "inst_638D3CAC57C2E767_0"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "inst_56A549A08D150522_0"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "inst_799026D52CC54FEA_0"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "inst_D7245504A4C14495_0"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "inst_5516421DEADE0A23_0"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "inst_CFA7A57DF9164613_0"
        {
            over "mesh" (
                active = false
            )
            {
            }
        }

        over "inst_D64CA34CD69869C0_1"
        {
            over "PoliceCarLightBar"
            {
                float inputs:exposure = 11.6
            }

            over "PoliceCarLightBar_01"
            {
                float inputs:exposure = 11.6
            }

            over "PoliceCarLightBar_02"
            {
                float inputs:exposure = 11.6
            }

            over "PoliceCarLightBar_03"
            {
                float inputs:exposure = 11.6
            }

            over "PoliceCarLightBar_04"
            {
                float inputs:exposure = 11.6
            }

            over "PoliceCarLightBar_05"
            {
                float inputs:exposure = 11.6
            }

            over "PoliceCarLightBar_06"
            {
                float inputs:exposure = 11.6
            }
        }
    }
}

def Scope "Looks"
{
    def Material "AperturePBR_Translucent"
    {
        token outputs:mdl:displacement.connect = </Looks/AperturePBR_Translucent/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/AperturePBR_Translucent/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/AperturePBR_Translucent/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @../../captures/materials/AperturePBR_Translucent.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Translucent"
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "mat_AperturePBR_Translucent"
    {
        token outputs:mdl:displacement.connect = </Looks/mat_AperturePBR_Translucent/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/mat_AperturePBR_Translucent/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/mat_AperturePBR_Translucent/Shader.outputs:out>

        def Shader "Shader" (
            kind = "Material"
        )
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./mats/AperturePBR_Translucent.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Translucent"
            float inputs:ior_constant = 1.3 (
                customData = {
                    float default = 1.3
                    dictionary range = {
                        float max = 3
                        float min = 1
                    }
                }
                displayGroup = "Specular"
                displayName = "Index of Refraction"
                doc = "Index of Refraction of the material"
                hidden = false
            )
            bool inputs:thin_walled = 1 (
                customData = {
                    bool default = 0
                }
                displayGroup = "Specular"
                displayName = "Thin-walled"
                doc = "Whether the material is thin-walled"
                hidden = false
            )
            token outputs:out
        }
    }

    def Material "MetalRod"
    {
        token outputs:mdl:displacement.connect = </Looks/MetalRod/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/MetalRod/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/MetalRod/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./mats/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            float inputs:metallic_constant = 1 (
                customData = {
                    float default = 0
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Specular"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
                hidden = false
            )
            float inputs:reflection_roughness_constant = 1 (
                customData = {
                    float default = 0.5
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Specular"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
                hidden = false
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "HighBayLens"
    {
        token outputs:mdl:displacement.connect = </Looks/HighBayLens/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/HighBayLens/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/HighBayLens/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./mats/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            float inputs:metallic_constant = 0.35999998 (
                customData = {
                    float default = 0
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Specular"
                displayName = "Metallic Amount"
                doc = "Metallic Material"
                hidden = false
            )
            float inputs:reflection_roughness_constant = 0.099999994 (
                customData = {
                    float default = 0.5
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Specular"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
                hidden = false
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "LightSource"
    {
        token outputs:mdl:displacement.connect = </Looks/LightSource/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/LightSource/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/LightSource/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./mats/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            color3f inputs:emissive_color_constant = (1, 0.99999, 0.99999) (
                customData = {
                    float3 default = (1, 0.1, 0.1)
                    dictionary range = {
                        float3 max = (1, 1, 1)
                        float3 min = (0, 0, 0)
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Color"
                doc = "The emissive color when no emissive color texture is specified."
                hidden = false
                renderType = "color"
            )
            float inputs:emissive_intensity = 40 (
                customData = {
                    float default = 40
                    dictionary range = {
                        float max = 65504
                        float min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
                hidden = false
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    bool default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emission"
                doc = "Enables the emission of light from the material"
                hidden = false
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "WallMountFrame"
    {
        token outputs:mdl:displacement.connect = </Looks/WallMountFrame/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/WallMountFrame/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/WallMountFrame/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./mats/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            float inputs:emissive_intensity = 40 (
                customData = {
                    float default = 40
                    dictionary range = {
                        float max = 65504
                        float min = 0
                    }
                }
                displayGroup = "Emissive"
                displayName = "Emissive Intensity"
                doc = "Intensity of the emission"
                hidden = false
            )
            bool inputs:enable_emission = 1 (
                customData = {
                    bool default = 0
                }
                displayGroup = "Emissive"
                displayName = "Enable Emission"
                doc = "Enables the emission of light from the material"
                hidden = false
            )
            float inputs:reflection_roughness_constant = 1 (
                customData = {
                    float default = 0.5
                    dictionary range = {
                        float max = 1
                        float min = 0
                    }
                }
                displayGroup = "Specular"
                displayName = "Roughness Amount"
                doc = "Higher roughness values lead to more blurry reflections"
                hidden = false
            )
            token outputs:out (
                renderType = "material"
            )
        }
    }

    def Material "WallMount"
    {
        token outputs:mdl:displacement.connect = </Looks/WallMount/Shader.outputs:out>
        token outputs:mdl:surface.connect = </Looks/WallMount/Shader.outputs:out>
        token outputs:mdl:volume.connect = </Looks/WallMount/Shader.outputs:out>

        def Shader "Shader"
        {
            uniform token info:implementationSource = "sourceAsset"
            uniform asset info:mdl:sourceAsset = @./mats/AperturePBR_Opacity.mdl@
            uniform token info:mdl:sourceAsset:subIdentifier = "AperturePBR_Opacity"
            token outputs:out (
                renderType = "material"
            )
        }
    }
}

def "Viewport_Waypoints"
{
}

def Scope "Scope"
{
}

